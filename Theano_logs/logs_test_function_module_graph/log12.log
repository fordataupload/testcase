EEEEERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EEEEE.EE.EEE.EEEEEsEERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EEEERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EEE.EERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EEERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EEERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

EERROR (theano.gof.opt): SeqOptimizer apply <theano.tensor.opt.InplaceElemwiseOptimizer object at 0x0000019F3A5D9518>
ERROR (theano.gof.opt): Traceback:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 251, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\opt.py", line 97, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\tensor\opt.py", line 354, in apply
    for i, o in enumerate(node.outputs)]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3788, in make_new_inplace
    out = self.__class__(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3973, in __init__
    self.init_fgraph()       # self.fgraph
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\scalar\basic.py", line 3919, in init_fgraph
    fgraph = FunctionGraph(self.inputs, self.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: <float64> is already owned by another fgraph

E
======================================================================
ERROR: test_borrow_input (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 503, in test_borrow_input
    f = theano.function([In(a, borrow=False)], Out(a + 1, borrow=True))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_borrow_output (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 514, in test_borrow_output
    f = function([a], Out(a, borrow=False))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', DeepCopyOp(<TensorType(float64, matrix)>), '\n', '<TensorType(float64, matrix)> is already owned by another fgraph')

======================================================================
ERROR: test_check_for_aliased_inputs (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 603, in test_check_for_aliased_inputs
    f = theano.function(**d)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_constant_output (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 467, in test_constant_output
    f = theano.function([], theano.tensor.constant([4]))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', DeepCopyOp(TensorConstant{(1,) of 4}), '\n', 'TensorConstant{(1,) of 4} is already owned by another fgraph')

======================================================================
ERROR: test_copy (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 231, in test_copy
    s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_copy_delete_updates (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 378, in test_copy_delete_updates
    ori = theano.function([x], out, mode=mode, updates={z: z * 2})
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_copy_share_memory (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 258, in test_copy_share_memory
    ori = theano.function([x], [out], mode=mode, updates={z: z + 1})
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_default_values (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 583, in test_default_values
    func = theano.function([theano.In(a, name='first'), theano.In(b, value=1, name='second')], c)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{add,no_inplace}(a, b), '\n', 'a is already owned by another fgraph')

======================================================================
ERROR: test_disconnected_input (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 541, in test_disconnected_input
    function([a, v], v * 2, on_unused_input='ignore')
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_extra_inputs (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 57, in test_extra_inputs
    fn = function([x], [x])
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', DeepCopyOp(x), '\n', 'x is already owned by another fgraph')

======================================================================
ERROR: test_free (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 561, in test_free
    func = function([x], x + 1)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_input_anon_singleton (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 112, in test_input_anon_singleton
    fn = function([s, x], [x + s])
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{add,no_inplace}(x, s), '\n', 'x is already owned by another fgraph')

======================================================================
ERROR: test_input_anon_unpack (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 119, in test_input_anon_unpack
    fn = function([s, x], x + s)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{add,no_inplace}(x, s), '\n', 'x is already owned by another fgraph')

======================================================================
ERROR: test_masked_input (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 548, in test_masked_input
    function([m, mt], mt * 2, on_unused_input='ignore')
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 167, in __init__
    raise ValueError("One of the provided inputs is the output of"
ValueError: One of the provided inputs is the output ofan already existing node. If that is okay, either discard that input's owner or use graph.clone.

======================================================================
ERROR: test_naming_rule0 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 124, in test_naming_rule0
    f = function([x, s], x / s)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{true_div,no_inplace}(x, s), '\n', 'x is already owned by another fgraph')

======================================================================
ERROR: test_naming_rule1 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 137, in test_naming_rule1
    f = function([a, s], a / s)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{true_div,no_inplace}(<TensorType(float64, scalar)>, s), '\n', '<TensorType(float64, scalar)> is already owned by another fgraph')

======================================================================
ERROR: test_naming_rule2 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 150, in test_naming_rule2
    f = function([x, a, s], a / s, on_unused_input='ignore')
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{true_div,no_inplace}(<TensorType(float64, scalar)>, s), '\n', '<TensorType(float64, scalar)> is already owned by another fgraph')

======================================================================
ERROR: test_naming_rule3 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 162, in test_naming_rule3
    f = function([x, In(a, value=1.0), s], a / s + x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{((i0 / i1) + i2)}}(<TensorType(float64, scalar)>, s, x), '\n', '<TensorType(float64, scalar)> is already owned by another fgraph')

======================================================================
ERROR: test_naming_rule4 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 175, in test_naming_rule4
    f = function([x, In(a, value=1.0, name='a'), s], a / s + x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{((i0 / i1) + i2)}}(<TensorType(float64, scalar)>, s, x), '\n', '<TensorType(float64, scalar)> is already owned by another fgraph')

======================================================================
ERROR: test_same_names (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 209, in test_same_names
    f = function([a, x, s], a + x + s)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{add,no_inplace}(x, x, x), '\n', 'x is already owned by another fgraph')

======================================================================
ERROR: test_shared_state0 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 400, in test_shared_state0
    s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_shared_state1 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 417, in test_shared_state1
    In(s, value=0.0, update=s + a * x, mutable=True)], s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_shared_state2 (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 434, in test_shared_state2
    mutable=False)], s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_shared_state_not_implicit (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 453, in test_shared_state_not_implicit
    inc = function([x, In(s, update=(s + x), value=10.0)], [])
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Add}[(0, 0)](s, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_state_access (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 190, in test_state_access
    f = function([x, In(a, value=1.0, name='a'), In(s, value=0.0, update=s + a * x)], s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_swap_SharedVariable (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 305, in test_swap_SharedVariable
    givens={x: x_list[i]})
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_swap_SharedVariable_with_given (__main__.T_function)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 357, in test_swap_SharedVariable_with_given
    updates={train_x: train_x + 0.1})
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_broken_pickle_with_shared (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 897, in test_broken_pickle_with_shared
    f = theano.function([x], theano.tensor.dot(x, y))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Dot22(<TensorType(float64, matrix)>, <TensorType(float64, matrix)>), '\n', '<TensorType(float64, matrix)> is already owned by another fgraph')

======================================================================
ERROR: test_deepcopy (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 628, in test_deepcopy
    s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_deepcopy_shared_container (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 705, in test_deepcopy_shared_container
    h = function([In(a, value=0.0)], a)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', DeepCopyOp(a), '\n', 'a is already owned by another fgraph')

======================================================================
ERROR: test_deepcopy_trust_input (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 673, in test_deepcopy_trust_input
    s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_multiple_functions (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 817, in test_multiple_functions
    s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_optimizations_preserved (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 768, in test_optimizations_preserved
    f = function([a, x, s, xm, sm], ((a.T.T) * (tensor.dot(xm, (sm.T.T.T)) + x).T * (x / x) + s))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', InplaceDimShuffle{x,0}(s), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_output_keys (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 692, in test_output_keys
    f = theano.function([x], {'vec': x**2})
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1839, in orig_function
    name=name)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1487, in __init__
    accept_inplace)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 181, in std_fgraph
    update_mapping=update_mapping)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 175, in __init__
    self.__import_r__(output, reason="init")
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 346, in __import_r__
    self.__import__(variable.owner, reason=reason)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 405, in __import__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 193, in __setup_r__
    "You manually constructed a FunctionGraph, but you passed it a"
theano.gof.fg.CachedConstantError: You manually constructed a FunctionGraph, but you passed it a graph that has a cached constant. This should not happen. Clone the graph before building the FunctionGraph.

======================================================================
ERROR: test_pickle (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 730, in test_pickle
    In(s, value=0.0, update=s + a * x, mutable=True)], s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

======================================================================
ERROR: test_pickle_class_with_functions (__main__.T_picklefunction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_function_module.py", line 919, in test_pickle_class_with_functions
    blah = SomethingToPickle()
  File "test_function_module.py", line 952, in __init__
    s + a * x)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function.py", line 317, in function
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\pfunc.py", line 486, in pfunc
    output_keys=output_keys)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1841, in orig_function
    fn = m.create(defaults)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\compile\function_module.py", line 1715, in create
    input_storage=input_storage_lists, storage_map=storage_map)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
    storage_map=storage_map)[:3]
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\vm.py", line 1091, in make_all
    impl=impl))
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 955, in make_thunk
    no_recycling)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
    e = FunctionGraph(node.inputs, node.outputs)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 171, in __init__
    self.__setup_r__(input)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\theano\gof\fg.py", line 199, in __setup_r__
    raise Exception("%s is already owned by another fgraph" % r)
Exception: ('The following error happened while compiling the node', Elemwise{Composite{(i0 + (i1 * i2))}}(s, <TensorType(float64, scalar)>, x), '\n', 's is already owned by another fgraph')

----------------------------------------------------------------------
Ran 41 tests in 0.375s

FAILED (errors=36, skipped=1)
