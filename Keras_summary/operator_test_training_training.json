[{"node type": "decorator", "line number": "(33, 0)", "node content": "<Decorator: @K.symbolic@32,4>", "related code": "    def compile(self, optimizer,\n"}, {"node type": "decorator", "line number": "(1584, 0)", "node content": "<Decorator: @interfaces.legacy_generator_methods_support@1583,4>", "related code": "    def fit_generator(self, generator,\n"}, {"node type": "decorator", "line number": "(1735, 0)", "node content": "<Decorator: @interfaces.legacy_generator_methods_support@1734,4>", "related code": "    def evaluate_generator(self, generator,\n"}, {"node type": "decorator", "line number": "(1794, 0)", "node content": "<Decorator: @interfaces.legacy_generator_methods_support@1793,4>", "related code": "    def predict_generator(self, generator,\n"}, {"node type": "expr_stmt", "line number": "(1859, 16)", "node content": "<ExprStmt: metrics = []@1859,4>", "related code": "    metrics = []\n"}, {"node type": "expr_stmt", "line number": "(278, 51)", "node content": "<ExprStmt: metrics = self._get_training_eval_metrics()@278,8>", "related code": "        metrics = self._get_training_eval_metrics()\n"}, {"node type": "not_test", "line number": "(291, 60)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@291,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@291,23>, <Operator: ,>, <String: '_collected_trainable_weights'>]), <Operator: )>])])])", "related code": "        if not hasattr(self, '_collected_trainable_weights'):\n"}, {"node type": "not_test", "line number": "(302, 46)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@302,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@302,23>, <Operator: ,>, <String: 'train_function'>]), <Operator: )>])])])", "related code": "        if not hasattr(self, 'train_function'):\n"}, {"node type": "not_test", "line number": "(336, 45)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@336,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@336,23>, <Operator: ,>, <String: 'test_function'>]), <Operator: )>])])])", "related code": "        if not hasattr(self, 'test_function'):\n"}, {"node type": "not_test", "line number": "(364, 48)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@364,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@364,23>, <Operator: ,>, <String: 'predict_function'>]), <Operator: )>])])])", "related code": "        if not hasattr(self, 'predict_function'):\n"}, {"node type": "expr_stmt", "line number": "(425, 24)", "node content": "<ExprStmt: # On-the-fly setting of symbolic model inputs         # (either by using the tensor provided,         # or by creating a placeholder if Numpy data was provided).         self.inputs = []@425,8>", "related code": "        self.inputs = []\n"}, {"node type": "expr_stmt", "line number": "(426, 29)", "node content": "<ExprStmt: self.input_names = []@426,8>", "related code": "        self.input_names = []\n"}, {"node type": "expr_stmt", "line number": "(427, 30)", "node content": "<ExprStmt: self._feed_inputs = []@427,8>", "related code": "        self._feed_inputs = []\n"}, {"node type": "expr_stmt", "line number": "(428, 35)", "node content": "<ExprStmt: self._feed_input_names = []@428,8>", "related code": "        self._feed_input_names = []\n"}, {"node type": "expr_stmt", "line number": "(429, 36)", "node content": "<ExprStmt: self._feed_input_shapes = []@429,8>", "related code": "        self._feed_input_shapes = []\n"}, {"node type": "expr_stmt", "line number": "(430, 50)", "node content": "<ExprStmt: inputs = to_list(inputs, allow_tuple=True)@430,8>", "related code": "        inputs = to_list(inputs, allow_tuple=True)\n"}, {"node type": "expr_stmt", "line number": "(464, 52)", "node content": "<ExprStmt: outputs = to_list(outputs, allow_tuple=True)@464,8>", "related code": "        outputs = to_list(outputs, allow_tuple=True)\n"}, {"node type": "expr_stmt", "line number": "(465, 30)", "node content": "<ExprStmt: self.outputs = outputs@465,8>", "related code": "        self.outputs = outputs\n"}, {"node type": "expr_stmt", "line number": "(476, 23)", "node content": "<ExprStmt: all_inputs = []@476,8>", "related code": "        all_inputs = []\n"}, {"node type": "not_test", "line number": "(477, 25)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@477,15>, PythonNode(trailer, [<Operator: .>, <Name: built@477,20>])])])", "related code": "        if not self.built:\n"}, {"node type": "not_test", "line number": "(562, 37)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@562,15>, PythonNode(trailer, [<Operator: .>, <Name: _is_graph_network@562,20>])])])", "related code": "        if not self._is_graph_network:\n"}, {"node type": "and_test", "line number": "(647, 39)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: self@647,11>, PythonNode(trailer, [<Operator: .>, <Name: stateful@647,16>])]), <Keyword: and>, <Name: batch_size@647,29>])", "related code": "        if self.stateful and batch_size:\n"}, {"node type": "expr_stmt", "line number": "(669, 25)", "node content": "<ExprStmt: total_loss = None@669,8>", "related code": "        total_loss = None\n"}, {"node type": "expr_stmt", "line number": "(722, 20)", "node content": "<ExprStmt: metrics = []@722,8>", "related code": "        metrics = []\n"}, {"node type": "expr_stmt", "line number": "(731, 26)", "node content": "<ExprStmt: output_shapes = []@731,8>", "related code": "        output_shapes = []\n"}, {"node type": "and_test", "line number": "(881, 66)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: hasattr@881,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@881,19>, <Operator: ,>, <String: 'callback_model'>]), <Operator: )>])]), <Keyword: and>, PythonNode(atom_expr, [<Name: self@881,47>, PythonNode(trailer, [<Operator: .>, <Name: callback_model@881,52>])])])", "related code": "        if hasattr(self, 'callback_model') and self.callback_model:\n"}, {"node type": "and_test", "line number": "(911, 80)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: batch_size@911,11>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(atom_expr, [<Name: training_utils@911,38>, PythonNode(trailer, [<Operator: .>, <Name: is_generator_or_sequence@911,53>]), PythonNode(trailer, [<Operator: (>, <Name: x@911,78>, <Operator: )>])])])", "related code": "        if batch_size is not None and training_utils.is_generator_or_sequence(x):\n"}, {"node type": "and_test", "line number": "(932, 47)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: batch_size@932,11>, <Keyword: is>, <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: steps@932,34>, <Keyword: is>, <Keyword: None>])])", "related code": "        if batch_size is None and steps is None:\n"}, {"node type": "and_test", "line number": "(1120, 62)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: x@1120,11>, <Keyword: is>, <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: y@1120,25>, <Keyword: is>, <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: steps_per_epoch@1120,39>, <Keyword: is>, <Keyword: None>])])", "related code": "        if x is None and y is None and steps_per_epoch is None:\n"}, {"node type": "and_test", "line number": "(1341, 52)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: x@1341,11>, <Keyword: is>, <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: y@1341,25>, <Keyword: is>, <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: steps@1341,39>, <Keyword: is>, <Keyword: None>])])", "related code": "        if x is None and y is None and steps is None:\n"}, {"node type": "and_test", "line number": "(1435, 38)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: x@1435,11>, <Keyword: is>, <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: steps@1435,25>, <Keyword: is>, <Keyword: None>])])", "related code": "        if x is None and steps is None:\n"}, {"node type": "keyword", "line number": "(1520, 72)", "node content": "<Keyword: True>", "related code": "    def test_on_batch(self, x, y, sample_weight=None, reset_metrics=True):\n"}, {"node type": "not_test", "line number": "(108, 25)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@108,15>, PythonNode(trailer, [<Operator: .>, <Name: built@108,20>])])])", "related code": "        if not self.built:\n"}, {"node type": "keyword", "line number": "(291, 14)", "node content": "<Keyword: not>", "related code": "        if not hasattr(self, '_collected_trainable_weights'):\n"}, {"node type": "keyword", "line number": "(302, 14)", "node content": "<Keyword: not>", "related code": "        if not hasattr(self, 'train_function'):\n"}, {"node type": "keyword", "line number": "(305, 33)", "node content": "<Keyword: is>", "related code": "        if self.train_function is None:\n"}, {"node type": "keyword", "line number": "(336, 14)", "node content": "<Keyword: not>", "related code": "        if not hasattr(self, 'test_function'):\n"}, {"node type": "keyword", "line number": "(338, 32)", "node content": "<Keyword: is>", "related code": "        if self.test_function is None:\n"}, {"node type": "keyword", "line number": "(364, 14)", "node content": "<Keyword: not>", "related code": "        if not hasattr(self, 'predict_function'):\n"}, {"node type": "keyword", "line number": "(366, 35)", "node content": "<Keyword: is>", "related code": "        if self.predict_function is None:\n"}, {"node type": "operator", "line number": "(409, 37)", "node content": "<Operator: ==>", "related code": "        if self.__class__.__name__ == 'Sequential':\n"}, {"node type": "string", "line number": "(409, 50)", "node content": "<String: 'Sequential'>", "related code": "        if self.__class__.__name__ == 'Sequential':\n"}, {"node type": "keyword", "line number": "(458, 21)", "node content": "<Keyword: is>", "related code": "        if outputs is None:\n"}, {"node type": "keyword", "line number": "(468, 25)", "node content": "<Keyword: True>", "related code": "        self.built = True\n"}, {"node type": "keyword", "line number": "(477, 14)", "node content": "<Keyword: not>", "related code": "        if not self.built:\n"}, {"node type": "keyword", "line number": "(562, 14)", "node content": "<Keyword: not>", "related code": "        if not self._is_graph_network:\n"}, {"node type": "operator", "line number": "(762, 35)", "node content": "<Operator: >>", "related code": "        if len(self.output_names) > 1:\n"}, {"node type": "number", "line number": "(762, 37)", "node content": "<Number: 1>", "related code": "        if len(self.output_names) > 1:\n"}, {"node type": "number", "line number": "(765, 13)", "node content": "<Number: 1>", "related code": "        j = 1\n"}, {"node type": "keyword", "line number": "(767, 28)", "node content": "<Keyword: in>", "related code": "        while metric_name in self.metrics_names:\n"}]
