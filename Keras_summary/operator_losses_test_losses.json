[{"node type": "decorator", "line number": "(17, 0)", "node content": "<Decorator: @six.add_metaclass(abc.ABCMeta)@16,0>", "related code": "class Loss(object):\n"}, {"node type": "expr_stmt", "line number": "(751, 30)", "node content": "<ExprStmt: # Aliases.  mse = MSE = mean_squared_error@751,0>", "related code": "mse = MSE = mean_squared_error\n"}, {"node type": "expr_stmt", "line number": "(752, 31)", "node content": "<ExprStmt: mae = MAE = mean_absolute_error@752,0>", "related code": "mae = MAE = mean_absolute_error\n"}, {"node type": "expr_stmt", "line number": "(753, 44)", "node content": "<ExprStmt: mape = MAPE = mean_absolute_percentage_error@753,0>", "related code": "mape = MAPE = mean_absolute_percentage_error\n"}, {"node type": "expr_stmt", "line number": "(754, 44)", "node content": "<ExprStmt: msle = MSLE = mean_squared_logarithmic_error@754,0>", "related code": "msle = MSLE = mean_squared_logarithmic_error\n"}, {"node type": "expr_stmt", "line number": "(755, 39)", "node content": "<ExprStmt: kld = KLD = kullback_leibler_divergence@755,0>", "related code": "kld = KLD = kullback_leibler_divergence\n"}, {"node type": "expr_stmt", "line number": "(756, 45)", "node content": "<ExprStmt: cosine = cosine_similarity = cosine_proximity@756,0>", "related code": "cosine = cosine_similarity = cosine_proximity\n"}, {"node type": "not_test", "line number": "(603, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: K@603,11>, PythonNode(trailer, [<Operator: .>, <Name: is_tensor@603,13>]), PythonNode(trailer, [<Operator: (>, <Name: y_pred@603,23>, <Operator: )>])])])", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "expr_stmt", "line number": "(605, 41)", "node content": "<ExprStmt: y_true = K.cast(y_true, y_pred.dtype)@605,4>", "related code": "    y_true = K.cast(y_true, y_pred.dtype)\n"}, {"node type": "not_test", "line number": "(610, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: K@610,11>, PythonNode(trailer, [<Operator: .>, <Name: is_tensor@610,13>]), PythonNode(trailer, [<Operator: (>, <Name: y_pred@610,23>, <Operator: )>])])])", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "expr_stmt", "line number": "(612, 41)", "node content": "<ExprStmt: y_true = K.cast(y_true, y_pred.dtype)@612,4>", "related code": "    y_true = K.cast(y_true, y_pred.dtype)\n"}, {"node type": "not_test", "line number": "(617, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: K@617,11>, PythonNode(trailer, [<Operator: .>, <Name: is_tensor@617,13>]), PythonNode(trailer, [<Operator: (>, <Name: y_pred@617,23>, <Operator: )>])])])", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "expr_stmt", "line number": "(619, 41)", "node content": "<ExprStmt: y_true = K.cast(y_true, y_pred.dtype)@619,4>", "related code": "    y_true = K.cast(y_true, y_pred.dtype)\n"}, {"node type": "not_test", "line number": "(627, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: K@627,11>, PythonNode(trailer, [<Operator: .>, <Name: is_tensor@627,13>]), PythonNode(trailer, [<Operator: (>, <Name: y_pred@627,23>, <Operator: )>])])])", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "expr_stmt", "line number": "(629, 41)", "node content": "<ExprStmt: y_true = K.cast(y_true, y_pred.dtype)@629,4>", "related code": "    y_true = K.cast(y_true, y_pred.dtype)\n"}, {"node type": "expr_stmt", "line number": "(630, 61)", "node content": "<ExprStmt: first_log = K.log(K.clip(y_pred, K.epsilon(), None) + 1.)@630,4>", "related code": "    first_log = K.log(K.clip(y_pred, K.epsilon(), None) + 1.)\n"}, {"node type": "expr_stmt", "line number": "(631, 62)", "node content": "<ExprStmt: second_log = K.log(K.clip(y_true, K.epsilon(), None) + 1.)@631,4>", "related code": "    second_log = K.log(K.clip(y_true, K.epsilon(), None) + 1.)\n"}, {"node type": "expr_stmt", "line number": "(636, 42)", "node content": "<ExprStmt: y_true = _maybe_convert_labels(y_true)@636,4>", "related code": "    y_true = _maybe_convert_labels(y_true)\n"}, {"node type": "expr_stmt", "line number": "(641, 42)", "node content": "<ExprStmt: y_true = _maybe_convert_labels(y_true)@641,4>", "related code": "    y_true = _maybe_convert_labels(y_true)\n"}, {"node type": "number", "line number": "(671, 40)", "node content": "<Number: 1.0>", "related code": "def huber_loss(y_true, y_pred, delta=1.0):\n"}, {"node type": "keyword", "line number": "(679, 62)", "node content": "<Keyword: False>", "related code": "def categorical_crossentropy(y_true, y_pred, from_logits=False, label_smoothing=0):\n"}, {"node type": "number", "line number": "(679, 81)", "node content": "<Number: 0>", "related code": "def categorical_crossentropy(y_true, y_pred, from_logits=False, label_smoothing=0):\n"}, {"node type": "keyword", "line number": "(694, 69)", "node content": "<Keyword: False>", "related code": "def sparse_categorical_crossentropy(y_true, y_pred, from_logits=False, axis=-1):\n"}, {"node type": "keyword", "line number": "(699, 57)", "node content": "<Keyword: False>", "related code": "def binary_crossentropy(y_true, y_pred, from_logits=False, label_smoothing=0):\n"}, {"node type": "number", "line number": "(699, 76)", "node content": "<Number: 0>", "related code": "def binary_crossentropy(y_true, y_pred, from_logits=False, label_smoothing=0):\n"}, {"node type": "keyword", "line number": "(603, 10)", "node content": "<Keyword: not>", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "keyword", "line number": "(610, 10)", "node content": "<Keyword: not>", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "keyword", "line number": "(617, 10)", "node content": "<Keyword: not>", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "keyword", "line number": "(627, 10)", "node content": "<Keyword: not>", "related code": "    if not K.is_tensor(y_pred):\n"}, {"node type": "number", "line number": "(683, 31)", "node content": "<Number: 0>", "related code": "    if label_smoothing is not 0:\n"}, {"node type": "operator", "line number": "(694, 77)", "node content": "<Operator: ->", "related code": "def sparse_categorical_crossentropy(y_true, y_pred, from_logits=False, axis=-1):\n"}, {"node type": "number", "line number": "(694, 78)", "node content": "<Number: 1>", "related code": "def sparse_categorical_crossentropy(y_true, y_pred, from_logits=False, axis=-1):\n"}, {"node type": "number", "line number": "(702, 31)", "node content": "<Number: 0>", "related code": "    if label_smoothing is not 0:\n"}, {"node type": "operator", "line number": "(721, 43)", "node content": "<Operator: ->", "related code": "def cosine_proximity(y_true, y_pred, axis=-1):\n"}, {"node type": "number", "line number": "(721, 44)", "node content": "<Number: 1>", "related code": "def cosine_proximity(y_true, y_pred, axis=-1):\n"}, {"node type": "keyword", "line number": "(791, 20)", "node content": "<Keyword: is>", "related code": "    if identifier is None:\n"}, {"node type": "number", "line number": "(623, 15)", "node content": "<Number: 100.>", "related code": "    return 100. * K.mean(diff, axis=-1)\n"}, {"node type": "operator", "line number": "(623, 17)", "node content": "<Operator: *>", "related code": "    return 100. * K.mean(diff, axis=-1)\n"}, {"node type": "operator", "line number": "(672, 20)", "node content": "<Operator: ->", "related code": "    error = y_pred - y_true\n"}, {"node type": "operator", "line number": "(675, 24)", "node content": "<Operator: ->", "related code": "    linear = abs_error - quadratic\n"}, {"node type": "operator", "line number": "(676, 38)", "node content": "<Operator: +>", "related code": "    return 0.5 * K.square(quadratic) + delta * linear\n"}, {"node type": "not_test", "line number": "(680, 58)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: K@680,39>, PythonNode(trailer, [<Operator: .>, <Name: is_tensor@680,41>]), PythonNode(trailer, [<Operator: (>, <Name: y_pred@680,51>, <Operator: )>])])])", "related code": "    y_pred = K.constant(y_pred) if not K.is_tensor(y_pred) else y_pred\n"}, {"node type": "keyword", "line number": "(683, 29)", "node content": "<Keyword: not>", "related code": "    if label_smoothing is not 0:\n"}, {"node type": "not_test", "line number": "(700, 58)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: K@700,39>, PythonNode(trailer, [<Operator: .>, <Name: is_tensor@700,41>]), PythonNode(trailer, [<Operator: (>, <Name: y_pred@700,51>, <Operator: )>])])])", "related code": "    y_pred = K.constant(y_pred) if not K.is_tensor(y_pred) else y_pred\n"}, {"node type": "keyword", "line number": "(702, 29)", "node content": "<Keyword: not>", "related code": "    if label_smoothing is not 0:\n"}, {"node type": "operator", "line number": "(724, 12)", "node content": "<Operator: ->", "related code": "    return - K.sum(y_true * y_pred, axis=axis)\n"}, {"node type": "number", "line number": "(676, 14)", "node content": "<Number: 0.5>", "related code": "    return 0.5 * K.square(quadratic) + delta * linear\n"}, {"node type": "operator", "line number": "(676, 16)", "node content": "<Operator: *>", "related code": "    return 0.5 * K.square(quadratic) + delta * linear\n"}, {"node type": "operator", "line number": "(676, 46)", "node content": "<Operator: *>", "related code": "    return 0.5 * K.square(quadratic) + delta * linear\n"}, {"node type": "keyword", "line number": "(680, 38)", "node content": "<Keyword: not>", "related code": "    y_pred = K.constant(y_pred) if not K.is_tensor(y_pred) else y_pred\n"}]
