[{"node type": "decorator", "line number": "(103, 0)", "node content": "<Decorator: @interfaces.legacy_dropout_support@102,4>", "related code": "    def __init__(self, rate, noise_shape=None, seed=None, **kwargs):\n"}, {"node type": "decorator", "line number": "(214, 0)", "node content": "<Decorator: @interfaces.legacy_spatialdropoutNd_support@213,4>", "related code": "    def __init__(self, rate, data_format=None, **kwargs):\n"}, {"node type": "decorator", "line number": "(263, 0)", "node content": "<Decorator: @interfaces.legacy_spatialdropoutNd_support@262,4>", "related code": "    def __init__(self, rate, data_format=None, **kwargs):\n"}, {"node type": "decorator", "line number": "(647, 0)", "node content": "<Decorator: @interfaces.legacy_lambda_support@646,4>", "related code": "    def __init__(self, function, output_shape=None,\n"}, {"node type": "decorator", "line number": "(750, 0)", "node content": "<Decorator: @classmethod@749,4>", "related code": "    def from_config(cls, config, custom_objects=None):\n"}, {"node type": "decorator", "line number": "(860, 0)", "node content": "<Decorator: @interfaces.legacy_dense_support@859,4>", "related code": "    def __init__(self, units,\n"}, {"node type": "number", "line number": "(58, 36)", "node content": "<Number: 0.>", "related code": "    def __init__(self, mask_value=0., **kwargs):\n"}, {"node type": "expr_stmt", "line number": "(61, 36)", "node content": "<ExprStmt: self.mask_value = mask_value@61,8>", "related code": "        self.mask_value = mask_value\n"}, {"node type": "expr_stmt", "line number": "(64, 74)", "node content": "<ExprStmt: output_mask = K.any(K.not_equal(inputs, self.mask_value), axis=-1)@64,8>", "related code": "        output_mask = K.any(K.not_equal(inputs, self.mask_value), axis=-1)\n"}, {"node type": "expr_stmt", "line number": "(73, 48)", "node content": "<ExprStmt: config = {'mask_value': self.mask_value}@73,8>", "related code": "        config = {'mask_value': self.mask_value}\n"}, {"node type": "expr_stmt", "line number": "(74, 55)", "node content": "<ExprStmt: base_config = super(Masking, self).get_config()@74,8>", "related code": "        base_config = super(Masking, self).get_config()\n"}, {"node type": "expr_stmt", "line number": "(114, 40)", "node content": "<ExprStmt: symbolic_shape = K.shape(inputs)@114,8>", "related code": "        symbolic_shape = K.shape(inputs)\n"}, {"node type": "expr_stmt", "line number": "(134, 55)", "node content": "<ExprStmt: base_config = super(Dropout, self).get_config()@134,8>", "related code": "        base_config = super(Dropout, self).get_config()\n"}, {"node type": "expr_stmt", "line number": "(173, 37)", "node content": "<ExprStmt: input_shape = K.shape(inputs)@173,8>", "related code": "        input_shape = K.shape(inputs)\n"}, {"node type": "expr_stmt", "line number": "(174, 57)", "node content": "<ExprStmt: noise_shape = (input_shape[0], 1, input_shape[2])@174,8>", "related code": "        noise_shape = (input_shape[0], 1, input_shape[2])\n"}, {"node type": "expr_stmt", "line number": "(220, 37)", "node content": "<ExprStmt: input_shape = K.shape(inputs)@220,8>", "related code": "        input_shape = K.shape(inputs)\n"}, {"node type": "expr_stmt", "line number": "(269, 37)", "node content": "<ExprStmt: input_shape = K.shape(inputs)@269,8>", "related code": "        input_shape = K.shape(inputs)\n"}, {"node type": "expr_stmt", "line number": "(297, 53)", "node content": "<ExprStmt: self.activation = activations.get(activation)@297,8>", "related code": "        self.activation = activations.get(activation)\n"}, {"node type": "expr_stmt", "line number": "(303, 71)", "node content": "<ExprStmt: config = {'activation': activations.serialize(self.activation)}@303,8>", "related code": "        config = {'activation': activations.serialize(self.activation)}\n"}, {"node type": "expr_stmt", "line number": "(304, 58)", "node content": "<ExprStmt: base_config = super(Activation, self).get_config()@304,8>", "related code": "        base_config = super(Activation, self).get_config()\n"}, {"node type": "expr_stmt", "line number": "(348, 47)", "node content": "<ExprStmt: self.target_shape = tuple(target_shape)@348,8>", "related code": "        self.target_shape = tuple(target_shape)\n"}, {"node type": "not_test", "line number": "(498, 35)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: all@498,15>, PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: input_shape@498,19>, PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Number: 1>, <Operator: :>]), <Operator: ]>])]), <Operator: )>])])])", "related code": "        if not all(input_shape[1:]):\n"}, {"node type": "number", "line number": "(956, 28)", "node content": "<Number: 0.>", "related code": "    def __init__(self, l1=0., l2=0., **kwargs):\n"}, {"node type": "number", "line number": "(956, 35)", "node content": "<Number: 0.>", "related code": "    def __init__(self, l1=0., l2=0., **kwargs):\n"}, {"node type": "keyword", "line number": "(60, 36)", "node content": "<Keyword: True>", "related code": "        self.supports_masking = True\n"}, {"node type": "keyword", "line number": "(111, 30)", "node content": "<Keyword: is>", "related code": "        if self.noise_shape is None:\n"}, {"node type": "number", "line number": "(120, 13)", "node content": "<Number: 0.>", "related code": "        if 0. < self.rate < 1.:\n"}, {"node type": "operator", "line number": "(120, 15)", "node content": "<Operator: <>", "related code": "        if 0. < self.rate < 1.:\n"}, {"node type": "operator", "line number": "(120, 27)", "node content": "<Operator: <>", "related code": "        if 0. < self.rate < 1.:\n"}, {"node type": "number", "line number": "(120, 30)", "node content": "<Number: 1.>", "related code": "        if 0. < self.rate < 1.:\n"}, {"node type": "operator", "line number": "(221, 30)", "node content": "<Operator: ==>", "related code": "        if self.data_format == 'channels_first':\n"}, {"node type": "string", "line number": "(221, 47)", "node content": "<String: 'channels_first'>", "related code": "        if self.data_format == 'channels_first':\n"}, {"node type": "operator", "line number": "(270, 30)", "node content": "<Operator: ==>", "related code": "        if self.data_format == 'channels_first':\n"}, {"node type": "string", "line number": "(270, 47)", "node content": "<String: 'channels_first'>", "related code": "        if self.data_format == 'channels_first':\n"}, {"node type": "keyword", "line number": "(296, 36)", "node content": "<Keyword: True>", "related code": "        self.supports_masking = True\n"}, {"node type": "string", "line number": "(369, 57)", "node content": "<String: 'total size of new array must be unchanged'>", "related code": "        msg = 'total size of new array must be unchanged'\n"}, {"node type": "operator", "line number": "(386, 24)", "node content": "<Operator: !=>", "related code": "        elif original != known:\n"}, {"node type": "keyword", "line number": "(392, 18)", "node content": "<Keyword: in>", "related code": "        if None in input_shape[1:]:\n"}, {"node type": "keyword", "line number": "(498, 14)", "node content": "<Keyword: not>", "related code": "        if not all(input_shape[1:]):\n"}, {"node type": "operator", "line number": "(508, 30)", "node content": "<Operator: ==>", "related code": "        if self.data_format == 'channels_first':\n"}, {"node type": "string", "line number": "(508, 47)", "node content": "<String: 'channels_first'>", "related code": "        if self.data_format == 'channels_first':\n"}, {"node type": "keyword", "line number": "(668, 32)", "node content": "<Keyword: is>", "related code": "        if self._output_shape is None:\n"}, {"node type": "and_test", "line number": "(871, 64)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<String: 'input_shape'>, PythonNode(comp_op, [<Keyword: not>, <Keyword: in>]), <Name: kwargs@871,32>]), <Keyword: and>, PythonNode(comparison, [<String: 'input_dim'>, <Keyword: in>, <Name: kwargs@871,58>])])", "related code": "        if 'input_shape' not in kwargs and 'input_dim' in kwargs:\n"}, {"node type": "keyword", "line number": "(905, 25)", "node content": "<Keyword: True>", "related code": "        self.built = True\n"}, {"node type": "keyword", "line number": "(958, 36)", "node content": "<Keyword: True>", "related code": "        self.supports_masking = True\n"}, {"node type": "operator", "line number": "(70, 23)", "node content": "<Operator: *>", "related code": "        return inputs * K.cast(boolean_mask, K.dtype(inputs))\n"}, {"node type": "keyword", "line number": "(108, 36)", "node content": "<Keyword: True>", "related code": "        self.supports_masking = True\n"}, {"node type": "number", "line number": "(371, 26)", "node content": "<Number: 1>", "related code": "        known, unknown = 1, None\n"}, {"node type": "keyword", "line number": "(382, 25)", "node content": "<Keyword: not>", "related code": "        if unknown is not None:\n"}, {"node type": "keyword", "line number": "(657, 26)", "node content": "<Keyword: is>", "related code": "        if output_shape is None:\n"}]
