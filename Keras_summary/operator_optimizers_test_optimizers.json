[{"node type": "expr_stmt", "line number": "(791, 9)", "node content": "<ExprStmt: # Aliases.  sgd = SGD@791,0>", "related code": "sgd = SGD\n"}, {"node type": "expr_stmt", "line number": "(792, 17)", "node content": "<ExprStmt: rmsprop = RMSprop@792,0>", "related code": "rmsprop = RMSprop\n"}, {"node type": "expr_stmt", "line number": "(793, 17)", "node content": "<ExprStmt: adagrad = Adagrad@793,0>", "related code": "adagrad = Adagrad\n"}, {"node type": "expr_stmt", "line number": "(794, 19)", "node content": "<ExprStmt: adadelta = Adadelta@794,0>", "related code": "adadelta = Adadelta\n"}, {"node type": "expr_stmt", "line number": "(795, 11)", "node content": "<ExprStmt: adam = Adam@795,0>", "related code": "adam = Adam\n"}, {"node type": "expr_stmt", "line number": "(796, 15)", "node content": "<ExprStmt: adamax = Adamax@796,0>", "related code": "adamax = Adamax\n"}, {"node type": "expr_stmt", "line number": "(797, 13)", "node content": "<ExprStmt: nadam = Nadam@797,0>", "related code": "nadam = Nadam\n"}, {"node type": "operator", "line number": "(17, 17)", "node content": "<Operator: ==>", "related code": "if K.backend() == 'tensorflow':\n"}, {"node type": "string", "line number": "(17, 30)", "node content": "<String: 'tensorflow'>", "related code": "if K.backend() == 'tensorflow':\n"}, {"node type": "operator", "line number": "(33, 11)", "node content": "<Operator: <=>", "related code": "    if c <= 0:  # if clipnorm == 0 no need to add ops to the graph\n"}, {"node type": "number", "line number": "(33, 13)", "node content": "<Number: 0>", "related code": "    if c <= 0:  # if clipnorm == 0 no need to add ops to the graph\n"}, {"node type": "operator", "line number": "(37, 21)", "node content": "<Operator: ==>", "related code": "    if K.backend() == 'tensorflow':\n"}, {"node type": "string", "line number": "(37, 34)", "node content": "<String: 'tensorflow'>", "related code": "    if K.backend() == 'tensorflow':\n"}, {"node type": "decorator", "line number": "(86, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@85,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(190, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@189,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(257, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@256,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(333, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@332,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(413, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@412,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(502, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@501,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(596, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@595,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(679, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@678,4>", "related code": "    @K.symbolic\n"}, {"node type": "decorator", "line number": "(759, 0)", "node content": "<Decorator: @interfaces.legacy_get_updates_support@758,4>", "related code": "    @K.symbolic\n"}, {"node type": "keyword", "line number": "(828, 38)", "node content": "<Keyword: in>", "related code": "    if config['class_name'].lower() in all_classes:\n"}, {"node type": "operator", "line number": "(853, 21)", "node content": "<Operator: ==>", "related code": "    if K.backend() == 'tensorflow':\n"}, {"node type": "string", "line number": "(853, 34)", "node content": "<String: 'tensorflow'>", "related code": "    if K.backend() == 'tensorflow':\n"}, {"node type": "expr_stmt", "line number": "(38, 26)", "node content": "<ExprStmt: condition = n >= c@38,8>", "related code": "        condition = n >= c\n"}, {"node type": "expr_stmt", "line number": "(39, 49)", "node content": "<ExprStmt: then_expression = tf.scalar_mul(c / n, g)@39,8>", "related code": "        then_expression = tf.scalar_mul(c / n, g)\n"}, {"node type": "expr_stmt", "line number": "(40, 27)", "node content": "<ExprStmt: else_expression = g@40,8>", "related code": "        else_expression = g\n"}, {"node type": "expr_stmt", "line number": "(76, 50)", "node content": "<ExprStmt: allowed_kwargs = {'clipnorm', 'clipvalue'}@76,8>", "related code": "        allowed_kwargs = {'clipnorm', 'clipvalue'}\n"}, {"node type": "expr_stmt", "line number": "(82, 25)", "node content": "<ExprStmt: self.updates = []@82,8>", "related code": "        self.updates = []\n"}, {"node type": "expr_stmt", "line number": "(83, 25)", "node content": "<ExprStmt: self.weights = []@83,8>", "related code": "        self.weights = []\n"}, {"node type": "expr_stmt", "line number": "(91, 41)", "node content": "<ExprStmt: grads = K.gradients(loss, params)@91,8>", "related code": "        grads = K.gradients(loss, params)\n"}, {"node type": "number", "line number": "(177, 41)", "node content": "<Number: 0.01>", "related code": "    def __init__(self, learning_rate=0.01, momentum=0.,\n"}, {"node type": "number", "line number": "(177, 54)", "node content": "<Number: 0.>", "related code": "    def __init__(self, learning_rate=0.01, momentum=0.,\n"}, {"node type": "number", "line number": "(245, 42)", "node content": "<Number: 0.001>", "related code": "    def __init__(self, learning_rate=0.001, rho=0.9, **kwargs):\n"}, {"node type": "number", "line number": "(245, 51)", "node content": "<Number: 0.9>", "related code": "    def __init__(self, learning_rate=0.001, rho=0.9, **kwargs):\n"}, {"node type": "number", "line number": "(322, 41)", "node content": "<Number: 0.01>", "related code": "    def __init__(self, learning_rate=0.01, **kwargs):\n"}, {"node type": "number", "line number": "(401, 40)", "node content": "<Number: 1.0>", "related code": "    def __init__(self, learning_rate=1.0, rho=0.95, **kwargs):\n"}, {"node type": "number", "line number": "(401, 50)", "node content": "<Number: 0.95>", "related code": "    def __init__(self, learning_rate=1.0, rho=0.95, **kwargs):\n"}, {"node type": "number", "line number": "(487, 42)", "node content": "<Number: 0.001>", "related code": "    def __init__(self, learning_rate=0.001, beta_1=0.9, beta_2=0.999,\n"}, {"node type": "number", "line number": "(487, 54)", "node content": "<Number: 0.9>", "related code": "    def __init__(self, learning_rate=0.001, beta_1=0.9, beta_2=0.999,\n"}, {"node type": "number", "line number": "(487, 68)", "node content": "<Number: 0.999>", "related code": "    def __init__(self, learning_rate=0.001, beta_1=0.9, beta_2=0.999,\n"}, {"node type": "number", "line number": "(583, 42)", "node content": "<Number: 0.002>", "related code": "    def __init__(self, learning_rate=0.002, beta_1=0.9, beta_2=0.999, **kwargs):\n"}, {"node type": "number", "line number": "(583, 54)", "node content": "<Number: 0.9>", "related code": "    def __init__(self, learning_rate=0.002, beta_1=0.9, beta_2=0.999, **kwargs):\n"}, {"node type": "number", "line number": "(583, 68)", "node content": "<Number: 0.999>", "related code": "    def __init__(self, learning_rate=0.002, beta_1=0.9, beta_2=0.999, **kwargs):\n"}, {"node type": "number", "line number": "(666, 42)", "node content": "<Number: 0.002>", "related code": "    def __init__(self, learning_rate=0.002, beta_1=0.9, beta_2=0.999, **kwargs):\n"}, {"node type": "number", "line number": "(666, 54)", "node content": "<Number: 0.9>", "related code": "    def __init__(self, learning_rate=0.002, beta_1=0.9, beta_2=0.999, **kwargs):\n"}, {"node type": "number", "line number": "(666, 68)", "node content": "<Number: 0.999>", "related code": "    def __init__(self, learning_rate=0.002, beta_1=0.9, beta_2=0.999, **kwargs):\n"}, {"node type": "operator", "line number": "(47, 29)", "node content": "<Operator: !=>", "related code": "        if condition.dtype != tf.bool:\n"}, {"node type": "operator", "line number": "(122, 25)", "node content": "<Operator: !=>", "related code": "        if len(params) != len(weights):\n"}]
