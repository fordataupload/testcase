[{"node type": "expr_stmt", "line number": "(450, 20)", "node content": "<ExprStmt: # Compatibility aliases  zero = zeros = Zeros@450,0>", "related code": "zero = zeros = Zeros\n"}, {"node type": "expr_stmt", "line number": "(451, 17)", "node content": "<ExprStmt: one = ones = Ones@451,0>", "related code": "one = ones = Ones\n"}, {"node type": "expr_stmt", "line number": "(452, 19)", "node content": "<ExprStmt: constant = Constant@452,0>", "related code": "constant = Constant\n"}, {"node type": "expr_stmt", "line number": "(453, 40)", "node content": "<ExprStmt: uniform = random_uniform = RandomUniform@453,0>", "related code": "uniform = random_uniform = RandomUniform\n"}, {"node type": "expr_stmt", "line number": "(454, 37)", "node content": "<ExprStmt: normal = random_normal = RandomNormal@454,0>", "related code": "normal = random_normal = RandomNormal\n"}, {"node type": "expr_stmt", "line number": "(455, 34)", "node content": "<ExprStmt: truncated_normal = TruncatedNormal@455,0>", "related code": "truncated_normal = TruncatedNormal\n"}, {"node type": "expr_stmt", "line number": "(456, 19)", "node content": "<ExprStmt: identity = Identity@456,0>", "related code": "identity = Identity\n"}, {"node type": "expr_stmt", "line number": "(457, 23)", "node content": "<ExprStmt: orthogonal = Orthogonal@457,0>", "related code": "orthogonal = Orthogonal\n"}, {"node type": "decorator", "line number": "(296, 0)", "node content": "<Decorator: @K.eager@295,4>", "related code": "    def __call__(self, shape, dtype=None):\n"}, {"node type": "string", "line number": "(462, 52)", "node content": "<String: 'channels_last'>", "related code": "def _compute_fans(shape, data_format='channels_last'):\n"}, {"node type": "operator", "line number": "(478, 20)", "node content": "<Operator: ==>", "related code": "    if len(shape) == 2:\n"}, {"node type": "number", "line number": "(478, 22)", "node content": "<Number: 2>", "related code": "    if len(shape) == 2:\n"}, {"node type": "keyword", "line number": "(481, 22)", "node content": "<Keyword: in>", "related code": "    elif len(shape) in {3, 4, 5}:\n"}, {"node type": "number", "line number": "(56, 30)", "node content": "<Number: 0>", "related code": "    def __init__(self, value=0):\n"}, {"node type": "expr_stmt", "line number": "(57, 26)", "node content": "<ExprStmt: self.value = value@57,8>", "related code": "        self.value = value\n"}, {"node type": "number", "line number": "(77, 30)", "node content": "<Number: 0.>", "related code": "    def __init__(self, mean=0., stddev=0.05, seed=None):\n"}, {"node type": "number", "line number": "(77, 43)", "node content": "<Number: 0.05>", "related code": "    def __init__(self, mean=0., stddev=0.05, seed=None):\n"}, {"node type": "expr_stmt", "line number": "(78, 24)", "node content": "<ExprStmt: self.mean = mean@78,8>", "related code": "        self.mean = mean\n"}, {"node type": "expr_stmt", "line number": "(79, 28)", "node content": "<ExprStmt: self.stddev = stddev@79,8>", "related code": "        self.stddev = stddev\n"}, {"node type": "expr_stmt", "line number": "(80, 24)", "node content": "<ExprStmt: self.seed = seed@80,8>", "related code": "        self.seed = seed\n"}, {"node type": "number", "line number": "(108, 48)", "node content": "<Number: 0.05>", "related code": "    def __init__(self, minval=-0.05, maxval=0.05, seed=None):\n"}, {"node type": "expr_stmt", "line number": "(109, 28)", "node content": "<ExprStmt: self.minval = minval@109,8>", "related code": "        self.minval = minval\n"}, {"node type": "expr_stmt", "line number": "(110, 28)", "node content": "<ExprStmt: self.maxval = maxval@110,8>", "related code": "        self.maxval = maxval\n"}, {"node type": "number", "line number": "(144, 30)", "node content": "<Number: 0.>", "related code": "    def __init__(self, mean=0., stddev=0.05, seed=None):\n"}, {"node type": "number", "line number": "(144, 43)", "node content": "<Number: 0.05>", "related code": "    def __init__(self, mean=0., stddev=0.05, seed=None):\n"}, {"node type": "number", "line number": "(189, 32)", "node content": "<Number: 1.0>", "related code": "    def __init__(self, scale=1.0,\n"}, {"node type": "number", "line number": "(253, 30)", "node content": "<Number: 1.>", "related code": "    def __init__(self, gain=1., seed=None):\n"}, {"node type": "number", "line number": "(292, 30)", "node content": "<Number: 1.>", "related code": "    def __init__(self, gain=1.):\n"}, {"node type": "operator", "line number": "(108, 31)", "node content": "<Operator: ->", "related code": "    def __init__(self, minval=-0.05, maxval=0.05, seed=None):\n"}, {"node type": "number", "line number": "(108, 35)", "node content": "<Number: 0.05>", "related code": "    def __init__(self, minval=-0.05, maxval=0.05, seed=None):\n"}, {"node type": "operator", "line number": "(193, 19)", "node content": "<Operator: <=>", "related code": "        if scale <= 0.:\n"}, {"node type": "number", "line number": "(193, 22)", "node content": "<Number: 0.>", "related code": "        if scale <= 0.:\n"}, {"node type": "operator", "line number": "(213, 23)", "node content": "<Operator: ==>", "related code": "        if self.mode == 'fan_in':\n"}, {"node type": "string", "line number": "(213, 32)", "node content": "<String: 'fan_in'>", "related code": "        if self.mode == 'fan_in':\n"}, {"node type": "operator", "line number": "(215, 25)", "node content": "<Operator: ==>", "related code": "        elif self.mode == 'fan_out':\n"}, {"node type": "string", "line number": "(215, 35)", "node content": "<String: 'fan_out'>", "related code": "        elif self.mode == 'fan_out':\n"}, {"node type": "operator", "line number": "(219, 31)", "node content": "<Operator: ==>", "related code": "        if self.distribution == 'normal':\n"}, {"node type": "string", "line number": "(219, 40)", "node content": "<String: 'normal'>", "related code": "        if self.distribution == 'normal':\n"}, {"node type": "number", "line number": "(258, 20)", "node content": "<Number: 1>", "related code": "        num_rows = 1\n"}, {"node type": "number", "line number": "(481, 25)", "node content": "<Number: 3>", "related code": "    elif len(shape) in {3, 4, 5}:\n"}, {"node type": "number", "line number": "(481, 28)", "node content": "<Number: 4>", "related code": "    elif len(shape) in {3, 4, 5}:\n"}, {"node type": "number", "line number": "(481, 31)", "node content": "<Number: 5>", "related code": "    elif len(shape) in {3, 4, 5}:\n"}, {"node type": "operator", "line number": "(485, 25)", "node content": "<Operator: ==>", "related code": "        if data_format == 'channels_first':\n"}, {"node type": "string", "line number": "(485, 42)", "node content": "<String: 'channels_first'>", "related code": "        if data_format == 'channels_first':\n"}, {"node type": "operator", "line number": "(489, 27)", "node content": "<Operator: ==>", "related code": "        elif data_format == 'channels_last':\n"}, {"node type": "string", "line number": "(489, 43)", "node content": "<String: 'channels_last'>", "related code": "        elif data_format == 'channels_last':\n"}, {"node type": "keyword", "line number": "(85, 27)", "node content": "<Keyword: not>", "related code": "        if self.seed is not None:\n"}, {"node type": "keyword", "line number": "(116, 27)", "node content": "<Keyword: not>", "related code": "        if self.seed is not None:\n"}, {"node type": "keyword", "line number": "(152, 27)", "node content": "<Keyword: not>", "related code": "        if self.seed is not None:\n"}, {"node type": "keyword", "line number": "(196, 19)", "node content": "<Keyword: not>", "related code": "        if mode not in {'fan_in', 'fan_out', 'fan_avg'}:\n"}]
