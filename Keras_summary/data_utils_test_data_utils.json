[{"node type": "expr_stmt", "line number": "(382, 22)", "node content": "<ExprStmt: # Global variables to be shared across processes _SHARED_SEQUENCES = {}@382,0>", "related code": "_SHARED_SEQUENCES = {}\n"}, {"node type": "expr_stmt", "line number": "(384, 24)", "node content": "<ExprStmt: # We use a Value to provide unique id to different processes. _SEQUENCE_COUNTER = None@384,0>", "related code": "_SEQUENCE_COUNTER = None\n"}, {"node type": "operator", "line number": "(34, 25)", "node content": "<Operator: ==>", "related code": "if sys.version_info[0] == 2:\n"}, {"node type": "number", "line number": "(34, 27)", "node content": "<Number: 2>", "related code": "if sys.version_info[0] == 2:\n"}, {"node type": "string", "line number": "(76, 40)", "node content": "<String: '.'>", "related code": "def _extract_archive(file_path, path='.', archive_format='auto'):\n"}, {"node type": "string", "line number": "(76, 63)", "node content": "<String: 'auto'>", "related code": "def _extract_archive(file_path, path='.', archive_format='auto'):\n"}, {"node type": "and_test", "line number": "(177, 49)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: md5_hash@177,7>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [<Name: file_hash@177,32>, <Keyword: is>, <Keyword: None>])])", "related code": "    if md5_hash is not None and file_hash is None:\n"}, {"node type": "expr_stmt", "line number": "(180, 48)", "node content": "<ExprStmt: datadir_base = os.path.expanduser(cache_dir)@180,4>", "related code": "    datadir_base = os.path.expanduser(cache_dir)\n"}, {"node type": "not_test", "line number": "(181, 43)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: os@181,11>, PythonNode(trailer, [<Operator: .>, <Name: access@181,14>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: datadir_base@181,21>, <Operator: ,>, PythonNode(atom_expr, [<Name: os@181,35>, PythonNode(trailer, [<Operator: .>, <Name: W_OK@181,38>])])]), <Operator: )>])])])", "related code": "    if not os.access(datadir_base, os.W_OK):\n"}, {"node type": "expr_stmt", "line number": "(183, 54)", "node content": "<ExprStmt: datadir = os.path.join(datadir_base, cache_subdir)@183,4>", "related code": "    datadir = os.path.join(datadir_base, cache_subdir)\n"}, {"node type": "not_test", "line number": "(184, 34)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: os@184,11>, PythonNode(trailer, [<Operator: .>, <Name: path@184,14>]), PythonNode(trailer, [<Operator: .>, <Name: exists@184,19>]), PythonNode(trailer, [<Operator: (>, <Name: datadir@184,26>, <Operator: )>])])])", "related code": "    if not os.path.exists(datadir):\n"}, {"node type": "string", "line number": "(247, 40)", "node content": "<String: 'sha256'>", "related code": "def _hash_file(fpath, algorithm='sha256', chunk_size=65535):\n"}, {"node type": "number", "line number": "(247, 58)", "node content": "<Number: 65535>", "related code": "def _hash_file(fpath, algorithm='sha256', chunk_size=65535):\n"}, {"node type": "or_test", "line number": "(267, 75)", "node content": "PythonNode(or_test, [PythonNode(atom, [<Operator: (>, PythonNode(comparison, [<Name: algorithm@267,8>, <Operator: ==>, <String: 'sha256'>]), <Operator: )>]), <Keyword: or>, PythonNode(atom, [<Operator: (>, PythonNode(and_test, [PythonNode(comparison, [<Name: algorithm@267,35>, <Operator: ==>, <String: 'auto'>]), <Keyword: and>, PythonNode(comparison, [PythonNode(atom_expr, [<Name: len@267,59>, PythonNode(trailer, [<Operator: (>, <Name: hash@267,63>, <Operator: )>])]), <Operator: ==>, <Number: 64>])]), <Operator: )>])])", "related code": "    if (algorithm == 'sha256') or (algorithm == 'auto' and len(hash) == 64):\n"}, {"node type": "string", "line number": "(279, 52)", "node content": "<String: 'auto'>", "related code": "def validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535):\n"}, {"node type": "number", "line number": "(279, 70)", "node content": "<Number: 65535>", "related code": "def validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535):\n"}, {"node type": "number", "line number": "(34, 21)", "node content": "<Number: 0>", "related code": "if sys.version_info[0] == 2:\n"}, {"node type": "keyword", "line number": "(92, 24)", "node content": "<Keyword: is>", "related code": "    if archive_format is None:\n"}, {"node type": "operator", "line number": "(94, 24)", "node content": "<Operator: ==>", "related code": "    if archive_format == 'auto':\n"}, {"node type": "string", "line number": "(94, 31)", "node content": "<String: 'auto'>", "related code": "    if archive_format == 'auto':\n"}, {"node type": "keyword", "line number": "(172, 19)", "node content": "<Keyword: is>", "related code": "    if cache_dir is None:\n"}, {"node type": "keyword", "line number": "(181, 10)", "node content": "<Keyword: not>", "related code": "    if not os.access(datadir_base, os.W_OK):\n"}, {"node type": "keyword", "line number": "(184, 10)", "node content": "<Keyword: not>", "related code": "    if not os.path.exists(datadir):\n"}, {"node type": "keyword", "line number": "(193, 20)", "node content": "<Keyword: False>", "related code": "    download = False\n"}, {"node type": "operator", "line number": "(299, 52)", "node content": "<Operator: ==>", "related code": "    if str(_hash_file(fpath, hasher, chunk_size)) == str(file_hash):\n"}, {"node type": "keyword", "line number": "(347, 27)", "node content": "<Keyword: True>", "related code": "    use_sequence_api = True\n"}, {"node type": "expr_stmt", "line number": "(95, 39)", "node content": "<ExprStmt: archive_format = ['tar', 'zip']@95,8>", "related code": "        archive_format = ['tar', 'zip']\n"}, {"node type": "expr_stmt", "line number": "(97, 41)", "node content": "<ExprStmt: archive_format = [archive_format]@97,8>", "related code": "        archive_format = [archive_format]\n"}, {"node type": "keyword", "line number": "(177, 44)", "node content": "<Keyword: is>", "related code": "    if md5_hash is not None and file_hash is None:\n"}, {"node type": "expr_stmt", "line number": "(178, 28)", "node content": "<ExprStmt: file_hash = md5_hash@178,8>", "related code": "        file_hash = md5_hash\n"}, {"node type": "expr_stmt", "line number": "(188, 50)", "node content": "<ExprStmt: untar_fpath = os.path.join(datadir, fname)@188,8>", "related code": "        untar_fpath = os.path.join(datadir, fname)\n"}, {"node type": "expr_stmt", "line number": "(191, 44)", "node content": "<ExprStmt: fpath = os.path.join(datadir, fname)@191,8>", "related code": "        fpath = os.path.join(datadir, fname)\n"}, {"node type": "expr_stmt", "line number": "(234, 38)", "node content": "<ExprStmt: ProgressTracker.progbar = None@234,8>", "related code": "        ProgressTracker.progbar = None\n"}, {"node type": "not_test", "line number": "(237, 42)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: os@237,15>, PythonNode(trailer, [<Operator: .>, <Name: path@237,18>]), PythonNode(trailer, [<Operator: .>, <Name: exists@237,23>]), PythonNode(trailer, [<Operator: (>, <Name: untar_fpath@237,30>, <Operator: )>])])])", "related code": "        if not os.path.exists(untar_fpath):\n"}, {"node type": "expr_stmt", "line number": "(268, 33)", "node content": "<ExprStmt: hasher = hashlib.sha256()@268,8>", "related code": "        hasher = hashlib.sha256()\n"}, {"node type": "expr_stmt", "line number": "(270, 30)", "node content": "<ExprStmt: hasher = hashlib.md5()@270,8>", "related code": "        hasher = hashlib.md5()\n"}, {"node type": "expr_stmt", "line number": "(432, 32)", "node content": "<ExprStmt: self.sequence = sequence@432,8>", "related code": "        self.sequence = sequence\n"}, {"node type": "expr_stmt", "line number": "(433, 54)", "node content": "<ExprStmt: self.use_multiprocessing = use_multiprocessing@433,8>", "related code": "        self.use_multiprocessing = use_multiprocessing\n"}, {"node type": "number", "line number": "(463, 29)", "node content": "<Number: 1>", "related code": "    def start(self, workers=1, max_queue_size=10):\n"}, {"node type": "number", "line number": "(463, 48)", "node content": "<Number: 10>", "related code": "    def start(self, workers=1, max_queue_size=10):\n"}, {"node type": "keyword", "line number": "(541, 58)", "node content": "<Keyword: False>", "related code": "    def __init__(self, sequence, use_multiprocessing=False, shuffle=False):\n"}, {"node type": "keyword", "line number": "(541, 73)", "node content": "<Keyword: False>", "related code": "    def __init__(self, sequence, use_multiprocessing=False, shuffle=False):\n"}, {"node type": "keyword", "line number": "(558, 18)", "node content": "<Keyword: True>", "related code": "        while True:\n"}, {"node type": "keyword", "line number": "(565, 18)", "node content": "<Keyword: True>", "related code": "        while True:\n"}, {"node type": "keyword", "line number": "(669, 58)", "node content": "<Keyword: False>", "related code": "    def __init__(self, sequence, use_multiprocessing=False, wait_time=None,\n"}, {"node type": "operator", "line number": "(100, 26)", "node content": "<Operator: ==>", "related code": "        if archive_type == 'tar':\n"}, {"node type": "string", "line number": "(100, 32)", "node content": "<String: 'tar'>", "related code": "        if archive_type == 'tar':\n"}, {"node type": "operator", "line number": "(103, 26)", "node content": "<Operator: ==>", "related code": "        if archive_type == 'zip':\n"}, {"node type": "string", "line number": "(103, 32)", "node content": "<String: 'zip'>", "related code": "        if archive_type == 'zip':\n"}, {"node type": "string", "line number": "(173, 23)", "node content": "<String: 'KERAS_HOME'>", "related code": "        if 'KERAS_HOME' in os.environ:\n"}]
