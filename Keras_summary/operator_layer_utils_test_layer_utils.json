[{"node type": "expr_stmt", "line number": "(210, 18)", "node content": "<ExprStmt: to_assign = []@210,4>", "related code": "    to_assign = []\n"}, {"node type": "expr_stmt", "line number": "(242, 38)", "node content": "<ExprStmt: kernel, bias = dense.get_weights()@242,4>", "related code": "    kernel, bias = dense.get_weights()\n"}, {"node type": "not_test", "line number": "(273, 44)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@273,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: tensor@273,19>, <Operator: ,>, <String: '_keras_history'>]), <Operator: )>])])])", "related code": "    if not hasattr(tensor, '_keras_history'):\n"}, {"node type": "or_test", "line number": "(276, 34)", "node content": "PythonNode(or_test, [PythonNode(comparison, [<Name: layer@276,7>, <Keyword: is>, <Keyword: None>]), <Keyword: or>, <Name: node_index@276,24>])", "related code": "    if layer is None or node_index:\n"}, {"node type": "not_test", "line number": "(278, 31)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: layer@278,11>, PythonNode(trailer, [<Operator: .>, <Name: _inbound_nodes@278,17>])])])", "related code": "    if not layer._inbound_nodes:\n"}, {"node type": "keyword", "line number": "(273, 10)", "node content": "<Keyword: not>", "related code": "    if not hasattr(tensor, '_keras_history'):\n"}, {"node type": "keyword", "line number": "(278, 10)", "node content": "<Keyword: not>", "related code": "    if not layer._inbound_nodes:\n"}, {"node type": "keyword", "line number": "(241, 32)", "node content": "<Keyword: in>", "related code": "    assert target_data_format in {'channels_last', 'channels_first'}\n"}, {"node type": "expr_stmt", "line number": "(254, 77)", "node content": "<ExprStmt: kernel[:, i] = np.reshape(ki, (np.prod(previous_feature_map_shape),))@254,8>", "related code": "        kernel[:, i] = np.reshape(ki, (np.prod(previous_feature_map_shape),))\n"}, {"node type": "keyword", "line number": "(276, 15)", "node content": "<Keyword: is>", "related code": "    if layer is None or node_index:\n"}, {"node type": "expr_stmt", "line number": "(277, 52)", "node content": "<ExprStmt: layer, node_index, _ = tensor._keras_history@277,8>", "related code": "        layer, node_index, _ = tensor._keras_history\n"}, {"node type": "expr_stmt", "line number": "(281, 47)", "node content": "<ExprStmt: node = layer._inbound_nodes[node_index]@281,8>", "related code": "        node = layer._inbound_nodes[node_index]\n"}, {"node type": "not_test", "line number": "(282, 34)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: node@282,15>, PythonNode(trailer, [<Operator: .>, <Name: inbound_layers@282,20>])])])", "related code": "        if not node.inbound_layers:\n"}, {"node type": "keyword", "line number": "(212, 38)", "node content": "<Keyword: in>", "related code": "        if layer.__class__.__name__ in conv_classes:\n"}, {"node type": "operator", "line number": "(244, 32)", "node content": "<Operator: ==>", "related code": "        if target_data_format == 'channels_first':\n"}, {"node type": "string", "line number": "(244, 49)", "node content": "<String: 'channels_first'>", "related code": "        if target_data_format == 'channels_first':\n"}, {"node type": "keyword", "line number": "(282, 14)", "node content": "<Keyword: not>", "related code": "        if not node.inbound_layers:\n"}, {"node type": "expr_stmt", "line number": "(213, 55)", "node content": "<ExprStmt: original_kernel = K.get_value(layer.kernel)@213,12>", "related code": "            original_kernel = K.get_value(layer.kernel)\n"}, {"node type": "expr_stmt", "line number": "(214, 62)", "node content": "<ExprStmt: converted_kernel = convert_kernel(original_kernel)@214,12>", "related code": "            converted_kernel = convert_kernel(original_kernel)\n"}, {"node type": "string", "line number": "(241, 49)", "node content": "<String: 'channels_last'>", "related code": "    assert target_data_format in {'channels_last', 'channels_first'}\n"}, {"node type": "string", "line number": "(241, 67)", "node content": "<String: 'channels_first'>", "related code": "    assert target_data_format in {'channels_last', 'channels_first'}\n"}, {"node type": "number", "line number": "(243, 33)", "node content": "<Number: 1>", "related code": "    for i in range(kernel.shape[1]):\n"}, {"node type": "expr_stmt", "line number": "(245, 48)", "node content": "<ExprStmt: c, h, w = previous_feature_map_shape@245,12>", "related code": "            c, h, w = previous_feature_map_shape\n"}, {"node type": "expr_stmt", "line number": "(246, 41)", "node content": "<ExprStmt: original_fm_shape = (h, w, c)@246,12>", "related code": "            original_fm_shape = (h, w, c)\n"}, {"node type": "expr_stmt", "line number": "(247, 56)", "node content": "<ExprStmt: ki = kernel[:, i].reshape(original_fm_shape)@247,12>", "related code": "            ki = kernel[:, i].reshape(original_fm_shape)\n"}, {"node type": "expr_stmt", "line number": "(248, 44)", "node content": "<ExprStmt: ki = np.transpose(ki, (2, 0, 1))@248,12>", "related code": "            ki = np.transpose(ki, (2, 0, 1))  # last -> first\n"}, {"node type": "expr_stmt", "line number": "(250, 48)", "node content": "<ExprStmt: h, w, c = previous_feature_map_shape@250,12>", "related code": "            h, w, c = previous_feature_map_shape\n"}, {"node type": "expr_stmt", "line number": "(251, 41)", "node content": "<ExprStmt: original_fm_shape = (c, h, w)@251,12>", "related code": "            original_fm_shape = (c, h, w)\n"}, {"node type": "expr_stmt", "line number": "(252, 56)", "node content": "<ExprStmt: ki = kernel[:, i].reshape(original_fm_shape)@252,12>", "related code": "            ki = kernel[:, i].reshape(original_fm_shape)\n"}, {"node type": "string", "line number": "(273, 43)", "node content": "<String: '_keras_history'>", "related code": "    if not hasattr(tensor, '_keras_history'):\n"}, {"node type": "number", "line number": "(248, 36)", "node content": "<Number: 2>", "related code": "            ki = np.transpose(ki, (2, 0, 1))  # last -> first\n"}, {"node type": "number", "line number": "(248, 39)", "node content": "<Number: 0>", "related code": "            ki = np.transpose(ki, (2, 0, 1))  # last -> first\n"}, {"node type": "number", "line number": "(248, 42)", "node content": "<Number: 1>", "related code": "            ki = np.transpose(ki, (2, 0, 1))  # last -> first\n"}, {"node type": "number", "line number": "(253, 36)", "node content": "<Number: 1>", "related code": "            ki = np.transpose(ki, (1, 2, 0))  # first -> last\n"}, {"node type": "number", "line number": "(253, 39)", "node content": "<Number: 2>", "related code": "            ki = np.transpose(ki, (1, 2, 0))  # first -> last\n"}, {"node type": "number", "line number": "(253, 42)", "node content": "<Number: 0>", "related code": "            ki = np.transpose(ki, (1, 2, 0))  # first -> last\n"}, {"node type": "keyword", "line number": "(297, 32)", "node content": "<Keyword: not>", "related code": "                    if id(x) not in source_tensors_ids:\n"}]
