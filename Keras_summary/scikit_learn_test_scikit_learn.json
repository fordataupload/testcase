[{"node type": "expr_stmt", "line number": "(61, 32)", "node content": "<ExprStmt: self.build_fn = build_fn@61,8>", "related code": "        self.build_fn = build_fn\n"}, {"node type": "expr_stmt", "line number": "(62, 34)", "node content": "<ExprStmt: self.sk_params = sk_params@62,8>", "related code": "        self.sk_params = sk_params\n"}, {"node type": "expr_stmt", "line number": "(148, 71)", "node content": "<ExprStmt: fit_args = copy.deepcopy(self.filter_sk_params(Sequential.fit))@148,8>", "related code": "        fit_args = copy.deepcopy(self.filter_sk_params(Sequential.fit))\n"}, {"node type": "expr_stmt", "line number": "(151, 50)", "node content": "<ExprStmt: history = self.model.fit(x, y, **fit_args)@151,8>", "related code": "        history = self.model.fit(x, y, **fit_args)\n"}, {"node type": "expr_stmt", "line number": "(166, 33)", "node content": "<ExprStmt: override = override or {}@166,8>", "related code": "        override = override or {}\n"}, {"node type": "expr_stmt", "line number": "(167, 16)", "node content": "<ExprStmt: res = {}@167,8>", "related code": "        res = {}\n"}, {"node type": "expr_stmt", "line number": "(198, 23)", "node content": "<ExprStmt: y = np.array(y)@198,8>", "related code": "        y = np.array(y)\n"}, {"node type": "expr_stmt", "line number": "(206, 44)", "node content": "<ExprStmt: self.n_classes_ = len(self.classes_)@206,8>", "related code": "        self.n_classes_ = len(self.classes_)\n"}, {"node type": "expr_stmt", "line number": "(226, 74)", "node content": "<ExprStmt: kwargs = self.filter_sk_params(Sequential.predict_classes, kwargs)@226,8>", "related code": "        kwargs = self.filter_sk_params(Sequential.predict_classes, kwargs)\n"}, {"node type": "expr_stmt", "line number": "(228, 47)", "node content": "<ExprStmt: proba = self.model.predict(x, **kwargs)@228,8>", "related code": "        proba = self.model.predict(x, **kwargs)\n"}, {"node type": "expr_stmt", "line number": "(254, 72)", "node content": "<ExprStmt: kwargs = self.filter_sk_params(Sequential.predict_proba, kwargs)@254,8>", "related code": "        kwargs = self.filter_sk_params(Sequential.predict_proba, kwargs)\n"}, {"node type": "expr_stmt", "line number": "(255, 47)", "node content": "<ExprStmt: probs = self.model.predict(x, **kwargs)@255,8>", "related code": "        probs = self.model.predict(x, **kwargs)\n"}, {"node type": "expr_stmt", "line number": "(284, 45)", "node content": "<ExprStmt: y = np.searchsorted(self.classes_, y)@284,8>", "related code": "        y = np.searchsorted(self.classes_, y)\n"}, {"node type": "expr_stmt", "line number": "(285, 67)", "node content": "<ExprStmt: kwargs = self.filter_sk_params(Sequential.evaluate, kwargs)@285,8>", "related code": "        kwargs = self.filter_sk_params(Sequential.evaluate, kwargs)\n"}, {"node type": "keyword", "line number": "(76, 27)", "node content": "<Keyword: is>", "related code": "        if self.build_fn is None:\n"}, {"node type": "keyword", "line number": "(135, 27)", "node content": "<Keyword: is>", "related code": "        if self.build_fn is None:\n"}, {"node type": "or_test", "line number": "(166, 33)", "node content": "PythonNode(or_test, [<Name: override@166,19>, <Keyword: or>, PythonNode(atom, [<Operator: {>, <Operator: }>])])", "related code": "        override = override or {}\n"}, {"node type": "operator", "line number": "(229, 28)", "node content": "<Operator: >>", "related code": "        if proba.shape[-1] > 1:\n"}, {"node type": "number", "line number": "(229, 30)", "node content": "<Number: 1>", "related code": "        if proba.shape[-1] > 1:\n"}, {"node type": "operator", "line number": "(258, 28)", "node content": "<Operator: ==>", "related code": "        if probs.shape[1] == 1:\n"}, {"node type": "number", "line number": "(258, 30)", "node content": "<Number: 1>", "related code": "        if probs.shape[1] == 1:\n"}, {"node type": "operator", "line number": "(323, 29)", "node content": "<Operator: ==>", "related code": "        if preds.shape[-1] == 1:\n"}, {"node type": "number", "line number": "(323, 31)", "node content": "<Number: 1>", "related code": "        if preds.shape[-1] == 1:\n"}, {"node type": "not_test", "line number": "(78, 63)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@78,18>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: self@78,29>, PythonNode(trailer, [<Operator: .>, <Name: build_fn@78,34>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: types@78,44>, PythonNode(trailer, [<Operator: .>, <Name: FunctionType@78,50>])])]), <Operator: )>])])])", "related code": "        elif (not isinstance(self.build_fn, types.FunctionType) and\n"}, {"node type": "not_test", "line number": "(137, 63)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@137,18>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: self@137,29>, PythonNode(trailer, [<Operator: .>, <Name: build_fn@137,34>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: types@137,44>, PythonNode(trailer, [<Operator: .>, <Name: FunctionType@137,50>])])]), <Operator: )>])])])", "related code": "        elif (not isinstance(self.build_fn, types.FunctionType) and\n"}, {"node type": "operator", "line number": "(199, 26)", "node content": "<Operator: ==>", "related code": "        if len(y.shape) == 2 and y.shape[1] > 1:\n"}, {"node type": "number", "line number": "(199, 28)", "node content": "<Number: 2>", "related code": "        if len(y.shape) == 2 and y.shape[1] > 1:\n"}, {"node type": "operator", "line number": "(199, 45)", "node content": "<Operator: >>", "related code": "        if len(y.shape) == 2 and y.shape[1] > 1:\n"}, {"node type": "number", "line number": "(199, 47)", "node content": "<Number: 1>", "related code": "        if len(y.shape) == 2 and y.shape[1] > 1:\n"}, {"node type": "operator", "line number": "(201, 71)", "node content": "<Operator: ==>", "related code": "        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n"}, {"node type": "number", "line number": "(201, 73)", "node content": "<Number: 1>", "related code": "        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n"}, {"node type": "keyword", "line number": "(207, 31)", "node content": "<Keyword: not>", "related code": "        if sample_weight is not None:\n"}, {"node type": "operator", "line number": "(290, 23)", "node content": "<Operator: ==>", "related code": "        if loss_name == 'categorical_crossentropy' and len(y.shape) != 2:\n"}, {"node type": "string", "line number": "(290, 50)", "node content": "<String: 'categorical_crossentropy'>", "related code": "        if loss_name == 'categorical_crossentropy' and len(y.shape) != 2:\n"}, {"node type": "operator", "line number": "(290, 70)", "node content": "<Operator: !=>", "related code": "        if loss_name == 'categorical_crossentropy' and len(y.shape) != 2:\n"}, {"node type": "number", "line number": "(290, 72)", "node content": "<Number: 2>", "related code": "        if loss_name == 'categorical_crossentropy' and len(y.shape) != 2:\n"}, {"node type": "keyword", "line number": "(78, 17)", "node content": "<Keyword: not>", "related code": "        elif (not isinstance(self.build_fn, types.FunctionType) and\n"}, {"node type": "keyword", "line number": "(137, 17)", "node content": "<Keyword: not>", "related code": "        elif (not isinstance(self.build_fn, types.FunctionType) and\n"}, {"node type": "name", "line number": "(148, 32)", "node content": "<Name: deepcopy@148,24>", "related code": "        fit_args = copy.deepcopy(self.filter_sk_params(Sequential.fit))\n"}, {"node type": "number", "line number": "(258, 24)", "node content": "<Number: 1>", "related code": "        if probs.shape[1] == 1:\n"}, {"node type": "string", "line number": "(288, 40)", "node content": "<String: '__name__'>", "related code": "        if hasattr(loss_name, '__name__'):\n"}, {"node type": "keyword", "line number": "(296, 22)", "node content": "<Keyword: in>", "related code": "            if name in ['accuracy', 'acc']:\n"}, {"node type": "number", "line number": "(199, 42)", "node content": "<Number: 1>", "related code": "        if len(y.shape) == 2 and y.shape[1] > 1:\n"}, {"node type": "operator", "line number": "(201, 29)", "node content": "<Operator: ==>", "related code": "        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n"}, {"node type": "number", "line number": "(201, 31)", "node content": "<Number: 2>", "related code": "        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n"}, {"node type": "operator", "line number": "(201, 49)", "node content": "<Operator: ==>", "related code": "        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n"}, {"node type": "number", "line number": "(201, 51)", "node content": "<Number: 1>", "related code": "        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n"}, {"node type": "operator", "line number": "(229, 24)", "node content": "<Operator: ->", "related code": "        if proba.shape[-1] > 1:\n"}, {"node type": "number", "line number": "(229, 25)", "node content": "<Number: 1>", "related code": "        if proba.shape[-1] > 1:\n"}, {"node type": "operator", "line number": "(323, 24)", "node content": "<Operator: ->", "related code": "        if preds.shape[-1] == 1:\n"}]
