[{"node type": "expr_stmt", "line number": "(98, 50)", "node content": "<ExprStmt: # See the swig file (../../util/util.i) for documentation. is_sequence = _pywrap_tensorflow.IsSequenceForData@98,0>", "related code": "is_sequence = _pywrap_tensorflow.IsSequenceForData\n"}, {"node type": "expr_stmt", "line number": "(101, 43)", "node content": "<ExprStmt: # See the swig file (../../util/util.i) for documentation. flatten = _pywrap_tensorflow.FlattenForData@101,0>", "related code": "flatten = _pywrap_tensorflow.FlattenForData\n"}, {"node type": "keyword", "line number": "(104, 56)", "node content": "<Keyword: True>", "related code": "def assert_same_structure(nest1, nest2, check_types=True):\n"}, {"node type": "expr_stmt", "line number": "(145, 13)", "node content": "<ExprStmt: packed = []@145,2>", "related code": "  packed = []\n"}, {"node type": "not_test", "line number": "(175, 72)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom, [<Operator: (>, PythonNode(or_test, [PythonNode(atom_expr, [<Name: is_sequence@175,10>, PythonNode(trailer, [<Operator: (>, <Name: flat_sequence@175,22>, <Operator: )>])]), <Keyword: or>, PythonNode(atom_expr, [<Name: isinstance@175,40>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: flat_sequence@175,51>, <Operator: ,>, <Name: list@175,66>]), <Operator: )>])])]), <Operator: )>])])", "related code": "  if not (is_sequence(flat_sequence) or isinstance(flat_sequence, list)):\n"}, {"node type": "not_test", "line number": "(178, 31)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: is_sequence@178,9>, PythonNode(trailer, [<Operator: (>, <Name: structure@178,21>, <Operator: )>])])])", "related code": "  if not is_sequence(structure):\n"}, {"node type": "expr_stmt", "line number": "(184, 37)", "node content": "<ExprStmt: flat_structure = flatten(structure)@184,2>", "related code": "  flat_structure = flatten(structure)\n"}, {"node type": "expr_stmt", "line number": "(191, 68)", "node content": "<ExprStmt: _, packed = _packed_nest_with_indices(structure, flat_sequence, 0)@191,2>", "related code": "  _, packed = _packed_nest_with_indices(structure, flat_sequence, 0)\n"}, {"node type": "not_test", "line number": "(225, 23)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: callable@225,9>, PythonNode(trailer, [<Operator: (>, <Name: func@225,18>, <Operator: )>])])])", "related code": "  if not callable(func):\n"}, {"node type": "not_test", "line number": "(228, 18)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: structure@228,9>])", "related code": "  if not structure:\n"}, {"node type": "expr_stmt", "line number": "(241, 50)", "node content": "<ExprStmt: flat_structure = [flatten(s) for s in structure]@241,2>", "related code": "  flat_structure = [flatten(s) for s in structure]\n"}, {"node type": "expr_stmt", "line number": "(242, 32)", "node content": "<ExprStmt: entries = zip(*flat_structure)@242,2>", "related code": "  entries = zip(*flat_structure)\n"}, {"node type": "keyword", "line number": "(259, 71)", "node content": "<Keyword: True>", "related code": "def assert_shallow_structure(shallow_tree, input_tree, check_types=True):\n"}, {"node type": "not_test", "line number": "(461, 15)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: inputs@461,9>])", "related code": "  if not inputs:\n"}, {"node type": "expr_stmt", "line number": "(471, 69)", "node content": "<ExprStmt: results = [func(*tensors) for tensors in zip(*all_flattened_up_to)]@471,2>", "related code": "  results = [func(*tensors) for tensors in zip(*all_flattened_up_to)]\n"}, {"node type": "keyword", "line number": "(175, 8)", "node content": "<Keyword: not>", "related code": "  if not (is_sequence(flat_sequence) or isinstance(flat_sequence, list)):\n"}, {"node type": "keyword", "line number": "(178, 8)", "node content": "<Keyword: not>", "related code": "  if not is_sequence(structure):\n"}, {"node type": "operator", "line number": "(185, 27)", "node content": "<Operator: !=>", "related code": "  if len(flat_structure) != len(flat_sequence):\n"}, {"node type": "keyword", "line number": "(225, 8)", "node content": "<Keyword: not>", "related code": "  if not callable(func):\n"}, {"node type": "keyword", "line number": "(228, 8)", "node content": "<Keyword: not>", "related code": "  if not structure:\n"}, {"node type": "keyword", "line number": "(461, 8)", "node content": "<Keyword: not>", "related code": "  if not inputs:\n"}, {"node type": "expr_stmt", "line number": "(69, 47)", "node content": "<ExprStmt: # Pack dictionaries in a deterministic order by sorting the keys.     # Notice this means that we ignore the original order of `OrderedDict`     # instances. This is intentional, to avoid potential bugs caused by mixing     # ordered and plain dicts (e.g., flattening a dict but using a     # corresponding `OrderedDict` to pack it back).     result = dict(zip(_sorted(instance), args))@69,4>", "related code": "    result = dict(zip(_sorted(instance), args))\n"}, {"node type": "or_test", "line number": "(175, 71)", "node content": "PythonNode(or_test, [PythonNode(atom_expr, [<Name: is_sequence@175,10>, PythonNode(trailer, [<Operator: (>, <Name: flat_sequence@175,22>, <Operator: )>])]), <Keyword: or>, PythonNode(atom_expr, [<Name: isinstance@175,40>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: flat_sequence@175,51>, <Operator: ,>, <Name: list@175,66>]), <Operator: )>])])])", "related code": "  if not (is_sequence(flat_sequence) or isinstance(flat_sequence, list)):\n"}, {"node type": "expr_stmt", "line number": "(234, 49)", "node content": "<ExprStmt: check_types = check_types_dict[\"check_types\"]@234,4>", "related code": "    check_types = check_types_dict[\"check_types\"]\n"}, {"node type": "not_test", "line number": "(296, 34)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: is_sequence@296,11>, PythonNode(trailer, [<Operator: (>, <Name: input_tree@296,23>, <Operator: )>])])])", "related code": "    if not is_sequence(input_tree):\n"}, {"node type": "and_test", "line number": "(301, 69)", "node content": "PythonNode(and_test, [<Name: check_types@301,7>, <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@301,27>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: input_tree@301,38>, <Operator: ,>, PythonNode(atom_expr, [<Name: type@301,50>, PythonNode(trailer, [<Operator: (>, <Name: shallow_tree@301,55>, <Operator: )>])])]), <Operator: )>])])])])", "related code": "    if check_types and not isinstance(input_tree, type(shallow_tree)):\n"}, {"node type": "and_test", "line number": "(313, 53)", "node content": "PythonNode(and_test, [<Name: check_types@313,7>, <Keyword: and>, PythonNode(atom_expr, [<Name: isinstance@313,23>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: shallow_tree@313,34>, <Operator: ,>, <Name: dict@313,48>]), <Operator: )>])])])", "related code": "    if check_types and isinstance(shallow_tree, dict):\n"}, {"node type": "operator", "line number": "(179, 28)", "node content": "<Operator: !=>", "related code": "    if len(flat_sequence) != 1:\n"}, {"node type": "number", "line number": "(179, 30)", "node content": "<Number: 1>", "related code": "    if len(flat_sequence) != 1:\n"}, {"node type": "keyword", "line number": "(236, 22)", "node content": "<Keyword: True>", "related code": "    check_types = True\n"}, {"node type": "number", "line number": "(238, 26)", "node content": "<Number: 1>", "related code": "  for other in structure[1:]:\n"}, {"node type": "keyword", "line number": "(296, 10)", "node content": "<Keyword: not>", "related code": "    if not is_sequence(input_tree):\n"}, {"node type": "not_test", "line number": "(301, 69)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@301,27>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: input_tree@301,38>, <Operator: ,>, PythonNode(atom_expr, [<Name: type@301,50>, PythonNode(trailer, [<Operator: (>, <Name: shallow_tree@301,55>, <Operator: )>])])]), <Operator: )>])])])", "related code": "    if check_types and not isinstance(input_tree, type(shallow_tree)):\n"}, {"node type": "operator", "line number": "(307, 25)", "node content": "<Operator: !=>", "related code": "    if len(input_tree) != len(shallow_tree):\n"}, {"node type": "expr_stmt", "line number": "(148, 66)", "node content": "<ExprStmt: new_index, child = _packed_nest_with_indices(s, flat, index)@148,6>", "related code": "      new_index, child = _packed_nest_with_indices(s, flat, index)\n"}, {"node type": "expr_stmt", "line number": "(150, 23)", "node content": "<ExprStmt: index = new_index@150,6>", "related code": "      index = new_index\n"}, {"node type": "number", "line number": "(191, 67)", "node content": "<Number: 0>", "related code": "  _, packed = _packed_nest_with_indices(structure, flat_sequence, 0)\n"}, {"node type": "string", "line number": "(232, 20)", "node content": "<String: \"check_types\">", "related code": "    if \"check_types\" not in check_types_dict or len(check_types_dict) > 1:\n"}, {"node type": "operator", "line number": "(232, 71)", "node content": "<Operator: >>", "related code": "    if \"check_types\" not in check_types_dict or len(check_types_dict) > 1:\n"}, {"node type": "number", "line number": "(232, 73)", "node content": "<Number: 1>", "related code": "    if \"check_types\" not in check_types_dict or len(check_types_dict) > 1:\n"}, {"node type": "keyword", "line number": "(241, 39)", "node content": "<Keyword: in>", "related code": "  flat_structure = [flatten(s) for s in structure]\n"}, {"node type": "keyword", "line number": "(301, 26)", "node content": "<Keyword: not>", "related code": "    if check_types and not isinstance(input_tree, type(shallow_tree)):\n"}, {"node type": "expr_stmt", "line number": "(319, 59)", "node content": "<ExprStmt: input_tree = list(sorted(_six.iteritems(input_tree)))@319,6>", "related code": "      input_tree = list(sorted(_six.iteritems(input_tree)))\n"}, {"node type": "expr_stmt", "line number": "(320, 63)", "node content": "<ExprStmt: shallow_tree = list(sorted(_six.iteritems(shallow_tree)))@320,6>", "related code": "      shallow_tree = list(sorted(_six.iteritems(shallow_tree)))\n"}, {"node type": "keyword", "line number": "(471, 42)", "node content": "<Keyword: in>", "related code": "  results = [func(*tensors) for tensors in zip(*all_flattened_up_to)]\n"}, {"node type": "string", "line number": "(50, 66)", "node content": "<String: \"nest only supports dicts with sortable keys.\">", "related code": "    raise TypeError(\"nest only supports dicts with sortable keys.\")\n"}, {"node type": "string", "line number": "(71, 67)", "node content": "<String: \"_fields\">", "related code": "  elif (isinstance(instance, tuple) and hasattr(instance, \"_fields\") and\n"}, {"node type": "operator", "line number": "(153, 14)", "node content": "<Operator: +=>", "related code": "      index += 1\n"}, {"node type": "number", "line number": "(153, 16)", "node content": "<Number: 1>", "related code": "      index += 1\n"}, {"node type": "string", "line number": "(176, 54)", "node content": "<String: \"flat_sequence must be a sequence\">", "related code": "    raise TypeError(\"flat_sequence must be a sequence\")\n"}]
