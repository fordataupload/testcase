[{"node type": "decorator", "line number": "(91, 0)", "node content": "<Decorator: @six.add_metaclass(abc.ABCMeta)@90,0>", "related code": "class _OptimizableVariable(object):\n"}, {"node type": "decorator", "line number": "(217, 0)", "node content": "<Decorator: @tf_export(v1=[\"train.Optimizer\"])@216,0>", "related code": "class Optimizer(\n"}, {"node type": "and_test", "line number": "(204, 75)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: resource_variable_ops@204,5>, PythonNode(trailer, [<Operator: .>, <Name: is_resource_variable@204,27>]), PythonNode(trailer, [<Operator: (>, <Name: v@204,48>, <Operator: )>])]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: v@204,59>, PythonNode(trailer, [<Operator: .>, <Name: _in_graph_mode@204,61>])])])])", "related code": "  if resource_variable_ops.is_resource_variable(v) and not v._in_graph_mode:  # pylint: disable=protected-access\n"}, {"node type": "not_test", "line number": "(204, 75)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: v@204,59>, PythonNode(trailer, [<Operator: .>, <Name: _in_graph_mode@204,61>])])])", "related code": "  if resource_variable_ops.is_resource_variable(v) and not v._in_graph_mode:  # pylint: disable=protected-access\n"}, {"node type": "operator", "line number": "(207, 17)", "node content": "<Operator: ==>", "related code": "  if v.op.type == \"VarHandleOp\":\n"}, {"node type": "string", "line number": "(207, 31)", "node content": "<String: \"VarHandleOp\">", "related code": "  if v.op.type == \"VarHandleOp\":\n"}, {"node type": "string", "line number": "(216, 32)", "node content": "<String: \"train.Optimizer\">", "related code": "@tf_export(v1=[\"train.Optimizer\"])\n"}, {"node type": "expr_stmt", "line number": "(158, 15)", "node content": "<ExprStmt: self._v = v@158,4>", "related code": "    self._v = v\n"}, {"node type": "expr_stmt", "line number": "(171, 59)", "node content": "<ExprStmt: update_op = optimizer._resource_apply_dense(g, self._v)@171,4>", "related code": "    update_op = optimizer._resource_apply_dense(g, self._v)\n"}, {"node type": "expr_stmt", "line number": "(188, 15)", "node content": "<ExprStmt: self._v = v@188,4>", "related code": "    self._v = v\n"}, {"node type": "keyword", "line number": "(204, 58)", "node content": "<Keyword: not>", "related code": "  if resource_variable_ops.is_resource_variable(v) and not v._in_graph_mode:  # pylint: disable=protected-access\n"}, {"node type": "number", "line number": "(309, 15)", "node content": "<Number: 0>", "related code": "  GATE_NONE = 0\n"}, {"node type": "number", "line number": "(310, 13)", "node content": "<Number: 1>", "related code": "  GATE_OP = 1\n"}, {"node type": "number", "line number": "(311, 16)", "node content": "<Number: 2>", "related code": "  GATE_GRAPH = 2\n"}, {"node type": "not_test", "line number": "(327, 15)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: name@327,11>])", "related code": "    if not name:\n"}, {"node type": "expr_stmt", "line number": "(329, 35)", "node content": "<ExprStmt: self._use_locking = use_locking@329,4>", "related code": "    self._use_locking = use_locking\n"}, {"node type": "expr_stmt", "line number": "(330, 21)", "node content": "<ExprStmt: self._name = name@330,4>", "related code": "    self._name = name\n"}, {"node type": "expr_stmt", "line number": "(335, 20)", "node content": "<ExprStmt: # Dictionary of slots.     #  {slot_name :     #      {_var_key(variable_to_train): slot_for_the_variable, ... },     #   ... }     self._slots = {}@335,4>", "related code": "    self._slots = {}\n"}, {"node type": "expr_stmt", "line number": "(336, 28)", "node content": "<ExprStmt: self._non_slot_dict = {}@336,4>", "related code": "    self._non_slot_dict = {}\n"}, {"node type": "expr_stmt", "line number": "(343, 41)", "node content": "<ExprStmt: # For implementing Trackable. Stores information about how to restore     # slot variables which have not yet been created     # (trackable._CheckpointPosition objects).     #  {slot_name :     #      {_var_key(variable_to_train): [checkpoint_position, ... ], ... },     #   ... }     self._deferred_slot_restorations = {}@343,4>", "related code": "    self._deferred_slot_restorations = {}\n"}, {"node type": "expr_stmt", "line number": "(405, 68)", "node content": "<ExprStmt: vars_with_grad = [v for g, v in grads_and_vars if g is not None]@405,4>", "related code": "    vars_with_grad = [v for g, v in grads_and_vars if g is not None]\n"}, {"node type": "not_test", "line number": "(406, 25)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: vars_with_grad@406,11>])", "related code": "    if not vars_with_grad:\n"}, {"node type": "expr_stmt", "line number": "(485, 33)", "node content": "<ExprStmt: # Scale loss if using a \"mean\" loss reduction and multiple replicas.     loss = self._scale_loss(loss)@485,4>", "related code": "    loss = self._scale_loss(loss)\n"}, {"node type": "expr_stmt", "line number": "(504, 54)", "node content": "<ExprStmt: # pylint: enable=protected-access     processors = [_get_processor(v) for v in var_list]@504,4>", "related code": "    processors = [_get_processor(v) for v in var_list]\n"}, {"node type": "not_test", "line number": "(505, 19)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: var_list@505,11>])", "related code": "    if not var_list:\n"}, {"node type": "expr_stmt", "line number": "(507, 47)", "node content": "<ExprStmt: var_refs = [p.target() for p in processors]@507,4>", "related code": "    var_refs = [p.target() for p in processors]\n"}, {"node type": "expr_stmt", "line number": "(515, 47)", "node content": "<ExprStmt: grads_and_vars = list(zip(grads, var_list))@515,4>", "related code": "    grads_and_vars = list(zip(grads, var_list))\n"}, {"node type": "expr_stmt", "line number": "(572, 42)", "node content": "<ExprStmt: # No DistributionStrategy case.     grads_and_vars = tuple(grads_and_vars)@572,4>", "related code": "    grads_and_vars = tuple(grads_and_vars)  # Make sure repeat iteration works.\n"}, {"node type": "not_test", "line number": "(573, 25)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: grads_and_vars@573,11>])", "related code": "    if not grads_and_vars:\n"}, {"node type": "not_test", "line number": "(593, 19)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: var_list@593,11>])", "related code": "    if not var_list:\n"}, {"node type": "keyword", "line number": "(172, 32)", "node content": "<Keyword: not>", "related code": "    if self._v.constraint is not None:\n"}, {"node type": "keyword", "line number": "(327, 10)", "node content": "<Keyword: not>", "related code": "    if not name:\n"}, {"node type": "keyword", "line number": "(406, 10)", "node content": "<Keyword: not>", "related code": "    if not vars_with_grad:\n"}, {"node type": "keyword", "line number": "(495, 18)", "node content": "<Keyword: is>", "related code": "    if var_list is None:\n"}, {"node type": "operator", "line number": "(502, 15)", "node content": "<Operator: +=>", "related code": "    var_list += ops.get_collection(ops.GraphKeys._STREAMING_MODEL_PORTS)\n"}, {"node type": "keyword", "line number": "(505, 10)", "node content": "<Keyword: not>", "related code": "    if not var_list:\n"}, {"node type": "operator", "line number": "(513, 24)", "node content": "<Operator: ==>", "related code": "    if gate_gradients == Optimizer.GATE_GRAPH:\n"}, {"node type": "keyword", "line number": "(573, 10)", "node content": "<Keyword: not>", "related code": "    if not grads_and_vars:\n"}, {"node type": "keyword", "line number": "(593, 10)", "node content": "<Keyword: not>", "related code": "    if not var_list:\n"}, {"node type": "keyword", "line number": "(487, 25)", "node content": "<Keyword: not>", "related code": "    if gate_gradients not in [Optimizer.GATE_NONE, Optimizer.GATE_OP,\n"}, {"node type": "keyword", "line number": "(493, 23)", "node content": "<Keyword: not>", "related code": "    if grad_loss is not None:\n"}, {"node type": "keyword", "line number": "(523, 64)", "node content": "<Keyword: False>", "related code": "    ops.get_default_graph()._is_loss_scaled_by_optimizer = False  # pylint: disable=protected-access\n"}, {"node type": "operator", "line number": "(524, 45)", "node content": "<Operator: ==>", "related code": "    if distribute_lib.get_loss_reduction() == ds_reduce_util.ReduceOp.MEAN:\n"}, {"node type": "not_test", "line number": "(631, 40)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: context@631,13>, PythonNode(trailer, [<Operator: .>, <Name: executing_eagerly@631,21>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])])])", "related code": "      if not context.executing_eagerly():\n"}, {"node type": "string", "line number": "(194, 58)", "node content": "<String: \"Trying to update a Tensor \">", "related code": "    raise NotImplementedError(\"Trying to update a Tensor \", self._v)\n"}, {"node type": "keyword", "line number": "(470, 20)", "node content": "<Keyword: is>", "related code": "      if var_list is None:\n"}, {"node type": "keyword", "line number": "(615, 23)", "node content": "<Keyword: is>", "related code": "      if global_step is None:\n"}, {"node type": "keyword", "line number": "(631, 12)", "node content": "<Keyword: not>", "related code": "      if not context.executing_eagerly():\n"}, {"node type": "keyword", "line number": "(405, 35)", "node content": "<Keyword: in>", "related code": "    vars_with_grad = [v for g, v in grads_and_vars if g is not None]\n"}, {"node type": "keyword", "line number": "(504, 44)", "node content": "<Keyword: in>", "related code": "    processors = [_get_processor(v) for v in var_list]\n"}]
