[{"node type": "expr_stmt", "line number": "(90, 37)", "node content": "<ExprStmt: # pylint: disable=protected-access _TensorLike = tensor_like._TensorLike@90,0>", "related code": "_TensorLike = tensor_like._TensorLike\n"}, {"node type": "expr_stmt", "line number": "(91, 43)", "node content": "<ExprStmt: _DTYPES_INTERN_TABLE = dtypes._INTERN_TABLE@91,0>", "related code": "_DTYPES_INTERN_TABLE = dtypes._INTERN_TABLE\n"}, {"node type": "expr_stmt", "line number": "(195, 28)", "node content": "<ExprStmt: _TENSOR_LIKE_TYPES = tuple()@195,0>", "related code": "_TENSOR_LIKE_TYPES = tuple()\n"}, {"node type": "expr_stmt", "line number": "(1038, 60)", "node content": "<ExprStmt: # This call creates an EagerTensor class, as a subclass of _EagerTensorBase, and # registers it with the current module. EagerTensor = c_api.TFE_Py_InitEagerTensor(_EagerTensorBase)@1038,0>", "related code": "EagerTensor = c_api.TFE_Py_InitEagerTensor(_EagerTensorBase)\n"}, {"node type": "decorator", "line number": "(1489, 0)", "node content": "<Decorator: @tf_export(\"Operation\")@1488,0>", "related code": "class Operation(object):\n"}, {"node type": "decorator", "line number": "(2256, 0)", "node content": "<Decorator: @tf_export(\"RegisterGradient\")@2255,0>", "related code": "class RegisterGradient(object):\n"}, {"node type": "expr_stmt", "line number": "(2323, 24)", "node content": "<ExprStmt: # Aliases for the old names, will be eventually removed. NoGradient = no_gradient@2323,0>", "related code": "NoGradient = no_gradient\n"}, {"node type": "expr_stmt", "line number": "(2344, 25)", "node content": "<ExprStmt: # These are set to common_shapes.call_cpp_shape_fn by op generated code # (generated by python_op_gen.cc). # It is set outside ops.py to avoid a circular dependency. _call_cpp_shape_fn = None@2344,0>", "related code": "_call_cpp_shape_fn = None\n"}, {"node type": "decorator", "line number": "(4673, 0)", "node content": "<Decorator: # TODO(agarwal): currently device directives in an outer eager scope will not # apply to inner graph mode code. Fix that.   @tf_export(v1=[\"device\"])@4672,0>", "related code": "def device(device_name_or_function):\n"}, {"node type": "decorator", "line number": "(4893, 0)", "node content": "<Decorator: @tf_export(v1=[\"get_default_session\"])@4892,0>", "related code": "def get_default_session():\n"}, {"node type": "decorators", "line number": "(5065, 0)", "node content": "PythonNode(decorators, [<Decorator: # pylint: disable=g-doc-return-or-yield,line-too-long @tf_export(\"init_scope\")@5063,0>, <Decorator: @tf_contextlib.contextmanager@5064,0>])", "related code": "def init_scope():\n"}, {"node type": "decorator", "line number": "(5480, 0)", "node content": "<Decorator: @tf_export(v1=[\"GraphKeys\"])@5479,0>", "related code": "class GraphKeys(object):\n"}, {"node type": "decorator", "line number": "(5639, 0)", "node content": "<Decorator: @tf_export(v1=[\"add_to_collection\"])@5638,0>", "related code": "def add_to_collection(name, value):\n"}, {"node type": "expr_stmt", "line number": "(5974, 63)", "node content": "<ExprStmt: _proto_function_registry = registry.Registry(\"proto functions\")@5974,0>", "related code": "_proto_function_registry = registry.Registry(\"proto functions\")\n"}, {"node type": "expr_stmt", "line number": "(6071, 54)", "node content": "<ExprStmt: IndexedSlicesValue = indexed_slices.IndexedSlicesValue@6071,0>", "related code": "IndexedSlicesValue = indexed_slices.IndexedSlicesValue\n"}, {"node type": "expr_stmt", "line number": "(6073, 54)", "node content": "<ExprStmt: convert_to_tensor_or_indexed_slices = \\     indexed_slices.convert_to_tensor_or_indexed_slices@6072,0>", "related code": "    indexed_slices.convert_to_tensor_or_indexed_slices\n"}, {"node type": "keyword", "line number": "(81, 17)", "node content": "<Keyword: True>", "related code": "_USE_C_API = True\n"}, {"node type": "keyword", "line number": "(82, 20)", "node content": "<Keyword: True>", "related code": "_USE_C_SHAPES = True\n"}, {"node type": "string", "line number": "(1488, 22)", "node content": "<String: \"Operation\">", "related code": "@tf_export(\"Operation\")\n"}, {"node type": "number", "line number": "(2534, 24)", "node content": "<Number: 0>", "related code": "_MUTATION_LOCK_GROUP = 0\n"}, {"node type": "number", "line number": "(2535, 27)", "node content": "<Number: 1>", "related code": "_SESSION_RUN_LOCK_GROUP = 1\n"}, {"node type": "string", "line number": "(2538, 18)", "node content": "<String: \"Graph\">", "related code": "@tf_export(\"Graph\")\n"}, {"node type": "decorator", "line number": "(5065, 0)", "node content": "<Decorator: @tf_contextlib.contextmanager@5064,0>", "related code": "def init_scope():\n"}, {"node type": "decorator", "line number": "(966, 0)", "node content": "<Decorator: @property@965,2>", "related code": "  def ndim(self):\n"}, {"node type": "keyword", "line number": "(1312, 56)", "node content": "<Keyword: False>", "related code": "                                            as_ref=False):\n"}, {"node type": "not_test", "line number": "(1366, 53)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@1366,9>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: values@1366,20>, <Operator: ,>, PythonNode(atom_expr, [<Name: collections_abc@1366,28>, PythonNode(trailer, [<Operator: .>, <Name: Sequence@1366,44>])])]), <Operator: )>])])])", "related code": "  if not isinstance(values, collections_abc.Sequence):\n"}, {"node type": "keyword", "line number": "(4744, 71)", "node content": "<Keyword: False>", "related code": "def _colocate_with_for_gradient(op, gradient_uid, ignore_existing=False):\n"}, {"node type": "string", "line number": "(5063, 23)", "node content": "<String: \"init_scope\">", "related code": "@tf_export(\"init_scope\")\n"}, {"node type": "and_test", "line number": "(5271, 74)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: config@5271,5>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@5271,32>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: config@5271,43>, <Operator: ,>, PythonNode(atom_expr, [<Name: config_pb2@5271,51>, PythonNode(trailer, [<Operator: .>, <Name: ConfigProto@5271,62>])])]), <Operator: )>])])])])", "related code": "  if config is not None and not isinstance(config, config_pb2.ConfigProto):\n"}, {"node type": "string", "line number": "(257, 39)", "node content": "<String: \"enable_tensor_equality\">", "related code": "@tf_export(v1=[\"enable_tensor_equality\"])\n"}, {"node type": "string", "line number": "(267, 40)", "node content": "<String: \"disable_tensor_equality\">", "related code": "@tf_export(v1=[\"disable_tensor_equality\"])\n"}, {"node type": "keyword", "line number": "(1366, 8)", "node content": "<Keyword: not>", "related code": "  if not isinstance(values, collections_abc.Sequence):\n"}, {"node type": "keyword", "line number": "(4924, 15)", "node content": "<Keyword: is>", "related code": "  if session is None:\n"}, {"node type": "keyword", "line number": "(4957, 15)", "node content": "<Keyword: is>", "related code": "  if session is None:\n"}, {"node type": "not_test", "line number": "(5271, 74)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@5271,32>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: config@5271,43>, <Operator: ,>, PythonNode(atom_expr, [<Name: config_pb2@5271,51>, PythonNode(trailer, [<Operator: .>, <Name: ConfigProto@5271,62>])])]), <Operator: )>])])])", "related code": "  if config is not None and not isinstance(config, config_pb2.ConfigProto):\n"}, {"node type": "operator", "line number": "(5285, 38)", "node content": "<Operator: ==>", "related code": "  if context.default_execution_mode == context.GRAPH_MODE:\n"}, {"node type": "string", "line number": "(5638, 34)", "node content": "<String: \"add_to_collection\">", "related code": "@tf_export(v1=[\"add_to_collection\"])\n"}, {"node type": "string", "line number": "(5974, 62)", "node content": "<String: \"proto functions\">", "related code": "_proto_function_registry = registry.Registry(\"proto functions\")\n"}, {"node type": "keyword", "line number": "(265, 29)", "node content": "<Keyword: True>", "related code": "  Tensor._USE_EQUALITY = True  # pylint: disable=protected-access\n"}, {"node type": "number", "line number": "(686, 26)", "node content": "<Number: 100>", "related code": "  __array_priority__ = 100\n"}, {"node type": "not_test", "line number": "(2490, 55)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@2490,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: statistic_type@2490,22>, <Operator: ,>, PythonNode(atom_expr, [<Name: six@2490,38>, PythonNode(trailer, [<Operator: .>, <Name: string_types@2490,42>])])]), <Operator: )>])])])", "related code": "    if not isinstance(statistic_type, six.string_types):\n"}, {"node type": "keyword", "line number": "(5271, 31)", "node content": "<Keyword: not>", "related code": "  if config is not None and not isinstance(config, config_pb2.ConfigProto):\n"}, {"node type": "keyword", "line number": "(5274, 22)", "node content": "<Keyword: not>", "related code": "  if device_policy not in (None, context.DEVICE_PLACEMENT_EXPLICIT,\n"}, {"node type": "keyword", "line number": "(5410, 31)", "node content": "<Keyword: not>", "related code": "  if original_item.graph is not item.graph:\n"}, {"node type": "string", "line number": "(5531, 37)", "node content": "<String: \"local_variables\">", "related code": "  LOCAL_VARIABLES = \"local_variables\"\n"}, {"node type": "string", "line number": "(5583, 27)", "node content": "<String: \"summary_op\">", "related code": "  SUMMARY_OP = \"summary_op\"\n"}, {"node type": "keyword", "line number": "(125, 35)", "node content": "<Keyword: is>", "related code": "    elif device_name_or_function is None:\n"}, {"node type": "keyword", "line number": "(156, 16)", "node content": "<Keyword: False>", "related code": "    return False  # False values do not suppress exceptions\n"}, {"node type": "not_test", "line number": "(633, 24)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@633,11>, PythonNode(trailer, [<Operator: .>, <Name: _op@633,16>]), PythonNode(trailer, [<Operator: .>, <Name: name@633,20>])])])", "related code": "    if not self._op.name:\n"}, {"node type": "not_test", "line number": "(1876, 37)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@1876,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: tensor@1876,22>, <Operator: ,>, <Name: Tensor@1876,30>]), <Operator: )>])])])", "related code": "    if not isinstance(tensor, Tensor):\n"}]
