[{"node type": "keyword", "line number": "(48, 24)", "node content": "<Keyword: False>", "related code": "set_trace_warned = False\n"}, {"node type": "keyword", "line number": "(42, 16)", "node content": "<Keyword: True>", "related code": "  no_root = True\n"}, {"node type": "expr_stmt", "line number": "(45, 28)", "node content": "<ExprStmt: self.context_name = None@45,4>", "related code": "    self.context_name = None\n"}, {"node type": "expr_stmt", "line number": "(75, 37)", "node content": "<ExprStmt: node.args = self.visit(node.args)@75,4>", "related code": "    node.args = self.visit(node.args)\n"}, {"node type": "expr_stmt", "line number": "(76, 43)", "node content": "<ExprStmt: node.body = self.visit_block(node.body)@76,4>", "related code": "    node.body = self.visit_block(node.body)\n"}, {"node type": "expr_stmt", "line number": "(98, 43)", "node content": "<ExprStmt: # Context manager calls (in node.items) are not converted.     node.body = self.visit_block(node.body)@98,4>", "related code": "    node.body = self.visit_block(node.body)\n"}, {"node type": "expr_stmt", "line number": "(102, 71)", "node content": "<ExprStmt: full_name = str(anno.getanno(node.func, anno.Basic.QN, default=''))@102,4>", "related code": "    full_name = str(anno.getanno(node.func, anno.Basic.QN, default=''))\n"}, {"node type": "expr_stmt", "line number": "(103, 62)", "node content": "<ExprStmt: function_context_name = self.state[_Function].context_name@103,4>", "related code": "    function_context_name = self.state[_Function].context_name\n"}, {"node type": "expr_stmt", "line number": "(104, 35)", "node content": "<ExprStmt: node = self.generic_visit(node)@104,4>", "related code": "    node = self.generic_visit(node)\n"}, {"node type": "expr_stmt", "line number": "(139, 20)", "node content": "<ExprStmt: func = node.func@139,4>", "related code": "    func = node.func\n"}, {"node type": "expr_stmt", "line number": "(141, 22)", "node content": "<ExprStmt: starred_arg = None@141,4>", "related code": "    starred_arg = None\n"}, {"node type": "expr_stmt", "line number": "(142, 20)", "node content": "<ExprStmt: normal_args = []@142,4>", "related code": "    normal_args = []\n"}, {"node type": "expr_stmt", "line number": "(157, 21)", "node content": "<ExprStmt: kwargs_arg = None@157,4>", "related code": "    kwargs_arg = None\n"}, {"node type": "expr_stmt", "line number": "(158, 24)", "node content": "<ExprStmt: normal_keywords = []@158,4>", "related code": "    normal_keywords = []\n"}, {"node type": "operator", "line number": "(78, 36)", "node content": "<Operator: <>", "related code": "    if self.state[_Function].level < 2:\n"}, {"node type": "number", "line number": "(78, 38)", "node content": "<Number: 2>", "related code": "    if self.state[_Function].level < 2:\n"}, {"node type": "keyword", "line number": "(122, 19)", "node content": "<Keyword: in>", "related code": "    if full_name in ('pdb.set_trace', 'ipdb.set_trace', 'breakpoint'):\n"}, {"node type": "keyword", "line number": "(149, 21)", "node content": "<Keyword: is>", "related code": "    if starred_arg is None:\n"}, {"node type": "keyword", "line number": "(165, 20)", "node content": "<Keyword: is>", "related code": "    if kwargs_arg is None:\n"}, {"node type": "expr_stmt", "line number": "(82, 30)", "node content": "<ExprStmt: # Top-level functions lose their decorator because the conversion is       # always just-in-time and by the time it happens the decorators are       # already set to be applied.       node.decorator_list = []@82,6>", "related code": "      node.decorator_list = []\n"}, {"node type": "string", "line number": "(110, 35)", "node content": "<String: 'ag__.'>", "related code": "    if full_name.startswith('ag__.'):\n"}, {"node type": "not_test", "line number": "(124, 29)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: set_trace_warned@124,13>])", "related code": "      if not set_trace_warned:\n"}, {"node type": "expr_stmt", "line number": "(150, 73)", "node content": "<ExprStmt: args = templates.replace_as_expression('(args,)', args=normal_args)@150,6>", "related code": "      args = templates.replace_as_expression('(args,)', args=normal_args)\n"}, {"node type": "not_test", "line number": "(166, 28)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: normal_keywords@166,13>])", "related code": "      if not normal_keywords:\n"}, {"node type": "operator", "line number": "(115, 51)", "node content": "<Operator: +>", "related code": "    if full_name.startswith(function_context_name + '.'):\n"}, {"node type": "string", "line number": "(115, 55)", "node content": "<String: '.'>", "related code": "    if full_name.startswith(function_context_name + '.'):\n"}, {"node type": "string", "line number": "(122, 36)", "node content": "<String: 'pdb.set_trace'>", "related code": "    if full_name in ('pdb.set_trace', 'ipdb.set_trace', 'breakpoint'):\n"}, {"node type": "string", "line number": "(122, 54)", "node content": "<String: 'ipdb.set_trace'>", "related code": "    if full_name in ('pdb.set_trace', 'ipdb.set_trace', 'breakpoint'):\n"}, {"node type": "string", "line number": "(122, 68)", "node content": "<String: 'breakpoint'>", "related code": "    if full_name in ('pdb.set_trace', 'ipdb.set_trace', 'breakpoint'):\n"}, {"node type": "keyword", "line number": "(124, 12)", "node content": "<Keyword: not>", "related code": "      if not set_trace_warned:\n"}, {"node type": "operator", "line number": "(135, 20)", "node content": "<Operator: ==>", "related code": "    if (full_name == 'print' and\n"}, {"node type": "string", "line number": "(135, 28)", "node content": "<String: 'print'>", "related code": "    if (full_name == 'print' and\n"}, {"node type": "keyword", "line number": "(160, 17)", "node content": "<Keyword: is>", "related code": "      if k.arg is None:\n"}, {"node type": "keyword", "line number": "(166, 12)", "node content": "<Keyword: not>", "related code": "      if not normal_keywords:\n"}, {"node type": "string", "line number": "(71, 53)", "node content": "<String: 'function_context_name'>", "related code": "    assert anno.hasanno(node, 'function_context_name'), (\n"}, {"node type": "keyword", "line number": "(132, 31)", "node content": "<Keyword: True>", "related code": "        set_trace_warned = True\n"}, {"node type": "string", "line number": "(145, 74)", "node content": "<String: 'Multiple *args should be impossible.'>", "related code": "        assert starred_arg is None, 'Multiple *args should be impossible.'\n"}, {"node type": "string", "line number": "(161, 76)", "node content": "<String: 'Multiple **kwargs should be impossible.'>", "related code": "        assert kwargs_arg is None, 'Multiple **kwargs should be impossible.'\n"}, {"node type": "keyword", "line number": "(145, 29)", "node content": "<Keyword: is>", "related code": "        assert starred_arg is None, 'Multiple *args should be impossible.'\n"}, {"node type": "string", "line number": "(150, 54)", "node content": "<String: '(args,)'>", "related code": "      args = templates.replace_as_expression('(args,)', args=normal_args)\n"}, {"node type": "keyword", "line number": "(161, 28)", "node content": "<Keyword: is>", "related code": "        assert kwargs_arg is None, 'Multiple **kwargs should be impossible.'\n"}, {"node type": "string", "line number": "(102, 69)", "node content": "<String: ''>", "related code": "    full_name = str(anno.getanno(node.func, anno.Basic.QN, default=''))\n"}, {"node type": "string", "line number": "(167, 47)", "node content": "<String: 'None'>", "related code": "        kwargs = parser.parse_expression('None')\n"}]
