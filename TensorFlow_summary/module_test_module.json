[{"node type": "decorator", "line number": "(33, 0)", "node content": "<Decorator: @tf_export(\"Module\")@32,0>", "related code": "class Module(tracking.AutoTrackable):\n"}, {"node type": "expr_stmt", "line number": "(308, 75)", "node content": "<ExprStmt: _CAMEL_TO_SNAKE_R = re.compile(r\"((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))\")@308,0>", "related code": "_CAMEL_TO_SNAKE_R = re.compile(r\"((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))\")\n"}, {"node type": "expr_stmt", "line number": "(309, 61)", "node content": "<ExprStmt: _VALID_IDENTIFIER = re.compile(r\"^[a-zA-Z_]([a-zA-Z0-9_])*$\")@309,0>", "related code": "_VALID_IDENTIFIER = re.compile(r\"^[a-zA-Z_]([a-zA-Z0-9_])*$\")\n"}, {"node type": "string", "line number": "(32, 19)", "node content": "<String: \"Module\">", "related code": "@tf_export(\"Module\")\n"}, {"node type": "expr_stmt", "line number": "(332, 28)", "node content": "<ExprStmt: module_dict = vars(module)@332,2>", "related code": "  module_dict = vars(module)\n"}, {"node type": "expr_stmt", "line number": "(333, 17)", "node content": "<ExprStmt: submodules = []@333,2>", "related code": "  submodules = []\n"}, {"node type": "and_test", "line number": "(302, 63)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: _is_variable@302,9>, PythonNode(trailer, [<Operator: (>, <Name: obj@302,22>, <Operator: )>])]), <Keyword: and>, PythonNode(atom_expr, [<Name: getattr@302,31>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: obj@302,39>, <Operator: ,>, <String: \"trainable\">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])])", "related code": "  return _is_variable(obj) and getattr(obj, \"trainable\", False)\n"}, {"node type": "string", "line number": "(308, 74)", "node content": "<String: r\"((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))\">", "related code": "_CAMEL_TO_SNAKE_R = re.compile(r\"((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))\")\n"}, {"node type": "string", "line number": "(309, 60)", "node content": "<String: r\"^[a-zA-Z_]([a-zA-Z0-9_])*$\">", "related code": "_VALID_IDENTIFIER = re.compile(r\"^[a-zA-Z_]([a-zA-Z0-9_])*$\")\n"}, {"node type": "keyword", "line number": "(329, 12)", "node content": "<Keyword: is>", "related code": "  if seen is None:\n"}, {"node type": "expr_stmt", "line number": "(330, 28)", "node content": "<ExprStmt: seen = set([id(module)])@330,4>", "related code": "    seen = set([id(module)])\n"}, {"node type": "expr_stmt", "line number": "(116, 21)", "node content": "<ExprStmt: self._name = name@116,4>", "related code": "    self._name = name\n"}, {"node type": "keyword", "line number": "(336, 13)", "node content": "<Keyword: in>", "related code": "    if key in attributes_to_ignore:\n"}, {"node type": "keyword", "line number": "(108, 14)", "node content": "<Keyword: is>", "related code": "    if name is None:\n"}, {"node type": "keyword", "line number": "(249, 19)", "node content": "<Keyword: is>", "related code": "    if predicate is None:\n"}, {"node type": "string", "line number": "(317, 37)", "node content": "<String: r\"_\\1\">", "related code": "  return _CAMEL_TO_SNAKE_R.sub(r\"_\\1\", value).lower()\n"}, {"node type": "keyword", "line number": "(337, 14)", "node content": "<Keyword: continue>", "related code": "      continue\n"}, {"node type": "expr_stmt", "line number": "(340, 36)", "node content": "<ExprStmt: leaf_path = (key,) + leaf_path@340,6>", "related code": "      leaf_path = (key,) + leaf_path\n"}, {"node type": "not_test", "line number": "(343, 22)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: with_path@343,13>])", "related code": "      if not with_path:\n"}, {"node type": "and_test", "line number": "(355, 39)", "node content": "PythonNode(and_test, [<Name: recursive@355,9>, <Keyword: and>, PythonNode(atom_expr, [<Name: _is_module@355,23>, PythonNode(trailer, [<Operator: (>, <Name: leaf@355,34>, <Operator: )>])])])", "related code": "      if recursive and _is_module(leaf):\n"}, {"node type": "expr_stmt", "line number": "(109, 48)", "node content": "<ExprStmt: name = camel_to_snake(type(self).__name__)@109,6>", "related code": "      name = camel_to_snake(type(self).__name__)\n"}, {"node type": "not_test", "line number": "(111, 35)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: valid_identifier@111,13>, PythonNode(trailer, [<Operator: (>, <Name: name@111,30>, <Operator: )>])])])", "related code": "      if not valid_identifier(name):\n"}, {"node type": "string", "line number": "(302, 55)", "node content": "<String: \"trainable\">", "related code": "  return _is_variable(obj) and getattr(obj, \"trainable\", False)\n"}, {"node type": "keyword", "line number": "(302, 62)", "node content": "<Keyword: False>", "related code": "  return _is_variable(obj) and getattr(obj, \"trainable\", False)\n"}, {"node type": "keyword", "line number": "(343, 12)", "node content": "<Keyword: not>", "related code": "      if not with_path:\n"}, {"node type": "keyword", "line number": "(111, 12)", "node content": "<Keyword: not>", "related code": "      if not valid_identifier(name):\n"}, {"node type": "operator", "line number": "(340, 26)", "node content": "<Operator: +>", "related code": "      leaf_path = (key,) + leaf_path\n"}, {"node type": "expr_stmt", "line number": "(344, 26)", "node content": "<ExprStmt: leaf_id = id(leaf)@344,8>", "related code": "        leaf_id = id(leaf)\n"}, {"node type": "expr_stmt", "line number": "(122, 37)", "node content": "<ExprStmt: self._scope_name = scope_name@122,8>", "related code": "        self._scope_name = scope_name\n"}, {"node type": "keyword", "line number": "(345, 21)", "node content": "<Keyword: in>", "related code": "        if leaf_id in seen:\n"}, {"node type": "keyword", "line number": "(346, 18)", "node content": "<Keyword: continue>", "related code": "          continue\n"}, {"node type": "operator", "line number": "(351, 29)", "node content": "<Operator: +>", "related code": "          yield module_path + leaf_path, leaf\n"}, {"node type": "operator", "line number": "(357, 40)", "node content": "<Operator: +>", "related code": "        submodules.append((module_path + leaf_path, leaf))\n"}]
