[{"node type": "decorator", "line number": "(38, 0)", "node content": "<Decorator: @tf_export(v1=[\"train.queue_runner.QueueRunner\", \"train.QueueRunner\"])@37,0>", "related code": "class QueueRunner(object):\n"}, {"node type": "decorators", "line number": "(396, 0)", "node content": "PythonNode(decorators, [<Decorator: @tf_export(v1=[\"train.queue_runner.add_queue_runner\", \"train.add_queue_runner\"])@394,0>, <Decorator: @deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)@395,0>])", "related code": "def add_queue_runner(qr, collection=ops.GraphKeys.QUEUE_RUNNERS):\n"}, {"node type": "decorators", "line number": "(417, 0)", "node content": "PythonNode(decorators, [<Decorator: @tf_export(v1=[\"train.queue_runner.start_queue_runners\",                \"train.start_queue_runners\"])@414,0>, <Decorator: @deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)@416,0>])", "related code": "def start_queue_runners(sess=None, coord=None, daemon=True, start=True,\n"}, {"node type": "decorator", "line number": "(395, 0)", "node content": "<Decorator: @tf_export(v1=[\"train.queue_runner.add_queue_runner\", \"train.add_queue_runner\"])@394,0>", "related code": "@deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)\n"}, {"node type": "decorator", "line number": "(396, 0)", "node content": "<Decorator: @deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)@395,0>", "related code": "def add_queue_runner(qr, collection=ops.GraphKeys.QUEUE_RUNNERS):\n"}, {"node type": "decorator", "line number": "(416, 0)", "node content": "<Decorator: @tf_export(v1=[\"train.queue_runner.start_queue_runners\",                \"train.start_queue_runners\"])@414,0>", "related code": "@deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)\n"}, {"node type": "decorator", "line number": "(417, 0)", "node content": "<Decorator: @deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)@416,0>", "related code": "def start_queue_runners(sess=None, coord=None, daemon=True, start=True,\n"}, {"node type": "decorator", "line number": "(61, 0)", "node content": "<Decorator: @deprecation.deprecated(None, _DEPRECATION_INSTRUCTION)@60,2>", "related code": "  def __init__(self, queue=None, enqueue_ops=None, close_op=None,\n"}, {"node type": "decorator", "line number": "(388, 0)", "node content": "<Decorator: @staticmethod@387,2>", "related code": "  def from_proto(queue_runner_def, import_scope=None):\n"}, {"node type": "keyword", "line number": "(417, 58)", "node content": "<Keyword: True>", "related code": "def start_queue_runners(sess=None, coord=None, daemon=True, start=True,\n"}, {"node type": "keyword", "line number": "(417, 70)", "node content": "<Keyword: True>", "related code": "def start_queue_runners(sess=None, coord=None, daemon=True, start=True,\n"}, {"node type": "not_test", "line number": "(460, 51)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@460,9>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: sess@460,20>, <Operator: ,>, PythonNode(atom_expr, [<Name: session@460,26>, PythonNode(trailer, [<Operator: .>, <Name: SessionInterface@460,34>])])]), <Operator: )>])])])", "related code": "  if not isinstance(sess, session.SessionInterface):\n"}, {"node type": "expr_stmt", "line number": "(468, 48)", "node content": "<ExprStmt: queue_runners = ops.get_collection(collection)@468,2>", "related code": "  queue_runners = ops.get_collection(collection)\n"}, {"node type": "not_test", "line number": "(469, 22)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: queue_runners@469,9>])", "related code": "  if not queue_runners:\n"}, {"node type": "string", "line number": "(37, 47)", "node content": "<String: \"train.queue_runner.QueueRunner\">", "related code": "@tf_export(v1=[\"train.queue_runner.QueueRunner\", \"train.QueueRunner\"])\n"}, {"node type": "string", "line number": "(37, 68)", "node content": "<String: \"train.QueueRunner\">", "related code": "@tf_export(v1=[\"train.queue_runner.QueueRunner\", \"train.QueueRunner\"])\n"}, {"node type": "keyword", "line number": "(453, 12)", "node content": "<Keyword: is>", "related code": "  if sess is None:\n"}, {"node type": "keyword", "line number": "(460, 8)", "node content": "<Keyword: not>", "related code": "  if not isinstance(sess, session.SessionInterface):\n"}, {"node type": "keyword", "line number": "(469, 8)", "node content": "<Keyword: not>", "related code": "  if not queue_runners:\n"}, {"node type": "or_test", "line number": "(138, 35)", "node content": "PythonNode(or_test, [PythonNode(not_test, [<Keyword: not>, <Name: queue@138,11>]), <Keyword: or>, PythonNode(not_test, [<Keyword: not>, <Name: enqueue_ops@138,24>])])", "related code": "    if not queue or not enqueue_ops:\n"}, {"node type": "expr_stmt", "line number": "(140, 23)", "node content": "<ExprStmt: self._queue = queue@140,4>", "related code": "    self._queue = queue\n"}, {"node type": "expr_stmt", "line number": "(141, 35)", "node content": "<ExprStmt: self._enqueue_ops = enqueue_ops@141,4>", "related code": "    self._enqueue_ops = enqueue_ops\n"}, {"node type": "expr_stmt", "line number": "(142, 29)", "node content": "<ExprStmt: self._close_op = close_op@142,4>", "related code": "    self._close_op = close_op\n"}, {"node type": "expr_stmt", "line number": "(143, 31)", "node content": "<ExprStmt: self._cancel_op = cancel_op@143,4>", "related code": "    self._cancel_op = cancel_op\n"}, {"node type": "expr_stmt", "line number": "(153, 69)", "node content": "<ExprStmt: self._queue_closed_exception_types = queue_closed_exception_types@153,4>", "related code": "    self._queue_closed_exception_types = queue_closed_exception_types\n"}, {"node type": "not_test", "line number": "(162, 45)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@162,11>, PythonNode(trailer, [<Operator: .>, <Name: _queue_closed_exception_types@162,16>])])])", "related code": "    if not self._queue_closed_exception_types:\n"}, {"node type": "expr_stmt", "line number": "(176, 31)", "node content": "<ExprStmt: g = ops.get_default_graph()@176,4>", "related code": "    g = ops.get_default_graph()\n"}, {"node type": "not_test", "line number": "(191, 45)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@191,11>, PythonNode(trailer, [<Operator: .>, <Name: _queue_closed_exception_types@191,16>])])])", "related code": "    if not self._queue_closed_exception_types:\n"}, {"node type": "keyword", "line number": "(301, 57)", "node content": "<Keyword: False>", "related code": "  def create_threads(self, sess, coord=None, daemon=False, start=False):\n"}, {"node type": "keyword", "line number": "(301, 70)", "node content": "<Keyword: False>", "related code": "  def create_threads(self, sess, coord=None, daemon=False, start=False):\n"}, {"node type": "expr_stmt", "line number": "(338, 20)", "node content": "<ExprStmt: ret_threads = []@338,4>", "related code": "    ret_threads = []\n"}, {"node type": "string", "line number": "(394, 52)", "node content": "<String: \"train.queue_runner.add_queue_runner\">", "related code": "@tf_export(v1=[\"train.queue_runner.add_queue_runner\", \"train.add_queue_runner\"])\n"}, {"node type": "string", "line number": "(394, 78)", "node content": "<String: \"train.add_queue_runner\">", "related code": "@tf_export(v1=[\"train.queue_runner.add_queue_runner\", \"train.add_queue_runner\"])\n"}, {"node type": "string", "line number": "(414, 55)", "node content": "<String: \"train.queue_runner.start_queue_runners\">", "related code": "@tf_export(v1=[\"train.queue_runner.start_queue_runners\",\n"}, {"node type": "expr_stmt", "line number": "(476, 16)", "node content": "<ExprStmt: threads = []@476,4>", "related code": "    threads = []\n"}, {"node type": "expr_stmt", "line number": "(113, 33)", "node content": "<ExprStmt: # Protect the count of runs to wait for.     self._lock = threading.Lock()@113,4>", "related code": "    self._lock = threading.Lock()\n"}, {"node type": "expr_stmt", "line number": "(116, 56)", "node content": "<ExprStmt: # A map from a session object to the number of outstanding queue runner     # threads for that session.     self._runs_per_session = weakref.WeakKeyDictionary()@116,4>", "related code": "    self._runs_per_session = weakref.WeakKeyDictionary()\n"}, {"node type": "expr_stmt", "line number": "(118, 32)", "node content": "<ExprStmt: # List of exceptions raised by the running threads.     self._exceptions_raised = []@118,4>", "related code": "    self._exceptions_raised = []\n"}, {"node type": "not_test", "line number": "(138, 16)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: queue@138,11>])", "related code": "    if not queue or not enqueue_ops:\n"}, {"node type": "not_test", "line number": "(138, 35)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: enqueue_ops@138,24>])", "related code": "    if not queue or not enqueue_ops:\n"}, {"node type": "keyword", "line number": "(156, 24)", "node content": "<Keyword: is>", "related code": "    if self._close_op is None:\n"}, {"node type": "keyword", "line number": "(160, 25)", "node content": "<Keyword: is>", "related code": "    if self._cancel_op is None:\n"}, {"node type": "keyword", "line number": "(162, 10)", "node content": "<Keyword: not>", "related code": "    if not self._queue_closed_exception_types:\n"}, {"node type": "keyword", "line number": "(191, 10)", "node content": "<Keyword: not>", "related code": "    if not self._queue_closed_exception_types:\n"}, {"node type": "keyword", "line number": "(248, 23)", "node content": "<Keyword: False>", "related code": "    decremented = False\n"}, {"node type": "keyword", "line number": "(462, 33)", "node content": "<Keyword: in>", "related code": "    if sess.__class__.__name__ in [\n"}, {"node type": "keyword", "line number": "(138, 10)", "node content": "<Keyword: not>", "related code": "    if not queue or not enqueue_ops:\n"}, {"node type": "keyword", "line number": "(138, 23)", "node content": "<Keyword: not>", "related code": "    if not queue or not enqueue_ops:\n"}, {"node type": "keyword", "line number": "(144, 42)", "node content": "<Keyword: not>", "related code": "    if queue_closed_exception_types is not None:\n"}, {"node type": "expr_stmt", "line number": "(157, 42)", "node content": "<ExprStmt: self._close_op = self._queue.close()@157,6>", "related code": "      self._close_op = self._queue.close()\n"}]
