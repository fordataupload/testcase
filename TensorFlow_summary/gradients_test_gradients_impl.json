[{"node type": "decorator", "line number": "(44, 0)", "node content": "<Decorator: @tf_export(v1=[\"gradients\"])@43,0>", "related code": "def gradients(ys,\n"}, {"node type": "decorator", "line number": "(163, 0)", "node content": "<Decorator: # pylint: enable=protected-access   @tf_export(\"gradients\", v1=[])@162,0>", "related code": "def gradients_v2(ys,  # pylint: disable=invalid-name\n"}, {"node type": "decorator", "line number": "(333, 0)", "node content": "<Decorator: @tf_export(v1=[\"hessians\"])@332,0>", "related code": "def hessians(ys,\n"}, {"node type": "decorator", "line number": "(400, 0)", "node content": "<Decorator: @tf_export(\"hessians\", v1=[])@399,0>", "related code": "def HessiansV2(ys,\n"}, {"node type": "expr_stmt", "line number": "(409, 37)", "node content": "<ExprStmt: HessiansV2.__doc__ = hessians.__doc__@409,0>", "related code": "HessiansV2.__doc__ = hessians.__doc__\n"}, {"node type": "string", "line number": "(162, 22)", "node content": "<String: \"gradients\">", "related code": "@tf_export(\"gradients\", v1=[])\n"}, {"node type": "expr_stmt", "line number": "(314, 18)", "node content": "<ExprStmt: # Validate the input   length = len(xs)@314,2>", "related code": "  length = len(xs)\n"}, {"node type": "expr_stmt", "line number": "(319, 27)", "node content": "<ExprStmt: # First backprop   grads = gradients(ys, xs)@319,2>", "related code": "  grads = gradients(ys, xs)\n"}, {"node type": "string", "line number": "(399, 21)", "node content": "<String: \"hessians\">", "related code": "@tf_export(\"hessians\", v1=[])\n"}, {"node type": "string", "line number": "(43, 26)", "node content": "<String: \"gradients\">", "related code": "@tf_export(v1=[\"gradients\"])\n"}, {"node type": "operator", "line number": "(315, 14)", "node content": "<Operator: !=>", "related code": "  if len(v) != length:\n"}, {"node type": "string", "line number": "(332, 25)", "node content": "<String: \"hessians\">", "related code": "@tf_export(v1=[\"hessians\"])\n"}, {"node type": "expr_stmt", "line number": "(364, 33)", "node content": "<ExprStmt: xs = gradients_util._AsList(xs)@364,2>", "related code": "  xs = gradients_util._AsList(xs)  # pylint: disable=protected-access\n"}, {"node type": "expr_stmt", "line number": "(371, 15)", "node content": "<ExprStmt: # Compute first-order derivatives and iterate for each x in xs.   hessians = []@371,2>", "related code": "  hessians = []\n"}, {"node type": "expr_stmt", "line number": "(372, 42)", "node content": "<ExprStmt: _gradients = gradients(ys, xs, **kwargs)@372,2>", "related code": "  _gradients = gradients(ys, xs, **kwargs)\n"}, {"node type": "operator", "line number": "(321, 22)", "node content": "<Operator: ==>", "related code": "  assert len(grads) == length\n"}, {"node type": "expr_stmt", "line number": "(375, 48)", "node content": "<ExprStmt: # change shape to one-dimension without graph branching     gradient = array_ops.reshape(gradient, [-1])@375,4>", "related code": "    gradient = array_ops.reshape(gradient, [-1])\n"}, {"node type": "expr_stmt", "line number": "(378, 25)", "node content": "<ExprStmt: # Declare an iterator and tensor array loop variables for the gradients.     n = array_ops.size(x)@378,4>", "related code": "    n = array_ops.size(x)\n"}, {"node type": "expr_stmt", "line number": "(392, 31)", "node content": "<ExprStmt: _shape = array_ops.shape(x)@392,4>", "related code": "    _shape = array_ops.shape(x)\n"}, {"node type": "operator", "line number": "(375, 45)", "node content": "<Operator: ->", "related code": "    gradient = array_ops.reshape(gradient, [-1])\n"}, {"node type": "number", "line number": "(375, 46)", "node content": "<Number: 1>", "related code": "    gradient = array_ops.reshape(gradient, [-1])\n"}]
