[{"node type": "decorator", "line number": "(32, 0)", "node content": "<Decorator: @tf_export(v1=[\"train.AdagradOptimizer\"])@31,0>", "related code": "class AdagradOptimizer(optimizer.Optimizer):\n"}, {"node type": "string", "line number": "(31, 39)", "node content": "<String: \"train.AdagradOptimizer\">", "related code": "@tf_export(v1=[\"train.AdagradOptimizer\"])\n"}, {"node type": "number", "line number": "(40, 65)", "node content": "<Number: 0.1>", "related code": "  def __init__(self, learning_rate, initial_accumulator_value=0.1,\n"}, {"node type": "expr_stmt", "line number": "(66, 39)", "node content": "<ExprStmt: self._learning_rate = learning_rate@66,4>", "related code": "    self._learning_rate = learning_rate\n"}, {"node type": "expr_stmt", "line number": "(67, 63)", "node content": "<ExprStmt: self._initial_accumulator_value = initial_accumulator_value@67,4>", "related code": "    self._initial_accumulator_value = initial_accumulator_value\n"}, {"node type": "expr_stmt", "line number": "(69, 37)", "node content": "<ExprStmt: # Created in Initialize.     self._learning_rate_tensor = None@69,4>", "related code": "    self._learning_rate_tensor = None\n"}, {"node type": "expr_stmt", "line number": "(92, 63)", "node content": "<ExprStmt: learning_rate = self._call_if_callable(self._learning_rate)@92,4>", "related code": "    learning_rate = self._call_if_callable(self._learning_rate)\n"}, {"node type": "expr_stmt", "line number": "(97, 43)", "node content": "<ExprStmt: acc = self.get_slot(var, \"accumulator\")@97,4>", "related code": "    acc = self.get_slot(var, \"accumulator\")\n"}, {"node type": "expr_stmt", "line number": "(106, 43)", "node content": "<ExprStmt: acc = self.get_slot(var, \"accumulator\")@106,4>", "related code": "    acc = self.get_slot(var, \"accumulator\")\n"}, {"node type": "expr_stmt", "line number": "(125, 43)", "node content": "<ExprStmt: acc = self.get_slot(var, \"accumulator\")@125,4>", "related code": "    acc = self.get_slot(var, \"accumulator\")\n"}, {"node type": "operator", "line number": "(62, 35)", "node content": "<Operator: <=>", "related code": "    if initial_accumulator_value <= 0.0:\n"}, {"node type": "number", "line number": "(62, 39)", "node content": "<Number: 0.0>", "related code": "    if initial_accumulator_value <= 0.0:\n"}, {"node type": "expr_stmt", "line number": "(73, 32)", "node content": "<ExprStmt: dtype = v.dtype.base_dtype@73,6>", "related code": "      dtype = v.dtype.base_dtype\n"}, {"node type": "expr_stmt", "line number": "(78, 47)", "node content": "<ExprStmt: init = self._init_constant_op(v, dtype)@78,8>", "related code": "        init = self._init_constant_op(v, dtype)\n"}, {"node type": "string", "line number": "(97, 42)", "node content": "<String: \"accumulator\">", "related code": "    acc = self.get_slot(var, \"accumulator\")\n"}, {"node type": "string", "line number": "(106, 42)", "node content": "<String: \"accumulator\">", "related code": "    acc = self.get_slot(var, \"accumulator\")\n"}, {"node type": "string", "line number": "(125, 42)", "node content": "<String: \"accumulator\">", "related code": "    acc = self.get_slot(var, \"accumulator\")\n"}]
