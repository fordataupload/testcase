2020-10-04 18:15:53.821818: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\utils
plugins: flaky-3.7.0
collected 1 item

layer_utils_test.py F                                                    [100%]

================================== FAILURES ===================================
____________________________ test_convert_weights _____________________________

    def test_convert_weights():
        def get_model(shape, data_format):
            model = Sequential()
            model.add(Conv2D(filters=2,
                             kernel_size=(4, 3),
                             input_shape=shape,
                             data_format=data_format))
            model.add(Flatten())
            model.add(Dense(5))
            return model
    
        for data_format in ['channels_first', 'channels_last']:
            if data_format == 'channels_first':
                shape = (3, 5, 5)
                target_shape = (5, 5, 3)
                prev_shape = (2, 3, 2)
                flip = lambda x: np.flip(np.flip(x, axis=2), axis=3)
                transpose = lambda x: np.transpose(x, (0, 2, 3, 1))
                target_data_format = 'channels_last'
            elif data_format == 'channels_last':
                shape = (5, 5, 3)
                target_shape = (3, 5, 5)
                prev_shape = (2, 2, 3)
                flip = lambda x: np.flip(np.flip(x, axis=1), axis=2)
                transpose = lambda x: np.transpose(x, (0, 3, 1, 2))
                target_data_format = 'channels_first'
    
            model1 = get_model(shape, data_format)
            model2 = get_model(target_shape, target_data_format)
            conv = K.function([model1.input], [model1.layers[0].output])
    
            x = np.random.random((1,) + shape)
    
            # Test equivalence of convert_all_kernels_in_model
            convout1 = conv([x])[0]
            layer_utils.convert_all_kernels_in_model(model1)
            convout2 = flip(conv([flip(x)])[0])
    
            assert_allclose(convout1, convout2, atol=1e-5)
    
            # Test equivalence of convert_dense_weights_data_format
            out1 = model1.predict(x)
            layer_utils.convert_dense_weights_data_format(
                model1.layers[2], prev_shape, target_data_format)
            for (src, dst) in zip(model1.layers, model2.layers):
                dst.set_weights(src.get_weights())
            out2 = model2.predict(transpose(x))
    
>           assert_allclose(out1, out2, atol=1e-5)

layer_utils_test.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

x = array([[ 0.27961972,  0.18217285, -0.1124293 , -0.0130823 , -2.8565578 ]],
      dtype=float32)
y = array([[nan, nan, nan, nan, nan]], dtype=float32), func = <ufunc 'isnan'>
hasval = 'nan'

    def func_assert_same_pos(x, y, func=isnan, hasval='nan'):
        """Handling nan/inf.
    
        Combine results of running func on x and y, checking that they are True
        at the same locations.
    
        """
        x_id = func(x)
        y_id = func(y)
        # We include work-arounds here to handle three types of slightly
        # pathological ndarray subclasses:
        # (1) all() on `masked` array scalars can return masked arrays, so we
        #     use != True
        # (2) __eq__ on some ndarray subclasses returns Python booleans
        #     instead of element-wise comparisons, so we cast to bool_() and
        #     use isinstance(..., bool) checks
        # (3) subclasses with bare-bones __array_function__ implementations may
        #     not implement np.all(), so favor using the .all() method
        # We are not committed to supporting such subclasses, but it's nice to
        # support them if possible.
        if bool_(x_id == y_id).all() != True:
            msg = build_err_msg([x, y],
                                err_msg + '\nx and y %s location mismatch:'
                                % (hasval), verbose=verbose, header=header,
                                names=('x', 'y'), precision=precision)
>           raise AssertionError(msg)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           x and y nan location mismatch:
E            x: array([[ 0.27962 ,  0.182173, -0.112429, -0.013082, -2.856558]],
E                 dtype=float32)
E            y: array([[nan, nan, nan, nan, nan]], dtype=float32)

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\numpy\testing\_private\utils.py:746: AssertionError
---------------------------- Captured stderr call -----------------------------
Using TensorFlow backend.
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
2020-10-04 18:15:57.705754: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-10-04 18:15:57.824504: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-04 18:15:57.825832: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-04 18:15:57.829441: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-04 18:15:57.832851: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-04 18:15:57.834501: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-04 18:15:57.839235: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-04 18:15:57.842422: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-04 18:15:57.851544: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 18:15:57.852754: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-04 18:15:57.853348: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-10-04 18:15:57.866688: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-04 18:15:57.867271: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-04 18:15:57.867620: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-04 18:15:57.867963: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-04 18:15:57.868304: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-04 18:15:57.868652: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-04 18:15:57.868996: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-04 18:15:57.869342: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 18:15:57.870142: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-04 18:15:58.827927: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-04 18:15:58.828343: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-04 18:15:58.828578: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-04 18:15:58.829339: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.

2020-10-04 18:15:59.442598: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 18:16:01.538386: W tensorflow/stream_executor/cuda/redzone_allocator.cc:312] Internal: Invoking ptxas not supported on Windows
Relying on driver to perform ptx compilation. This message will be only logged once.
2020-10-04 18:16:01.564046: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
------------------------------ Captured log call ------------------------------
WARNING  tensorflow:deprecation.py:506 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
WARNING  tensorflow:module_wrapper.py:139 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.
=========================== short test summary info ===========================
FAILED layer_utils_test.py::test_convert_weights - AssertionError: 
============================== 1 failed in 5.91s ==============================
