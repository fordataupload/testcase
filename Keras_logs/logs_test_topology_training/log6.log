2020-10-05 15:46:45.553503: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-05 15:46:48.298249: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-10-05 15:46:48.441139: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-05 15:46:48.447876: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-05 15:46:48.457924: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-05 15:46:48.463490: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-05 15:46:48.465379: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-05 15:46:48.472175: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-05 15:46:48.476775: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-05 15:46:48.490341: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-05 15:46:48.491556: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-05 15:46:48.492513: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-10-05 15:46:48.506314: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-05 15:46:48.506877: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-05 15:46:48.507259: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-05 15:46:48.507628: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-05 15:46:48.507990: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-05 15:46:48.508330: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-05 15:46:48.508675: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-05 15:46:48.509021: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-05 15:46:48.509870: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-05 15:46:49.610698: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-05 15:46:49.611111: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-05 15:46:49.611332: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-05 15:46:49.612154: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\engine
plugins: flaky-3.7.0
collected 31 items

test_topology.py ..........F..................F.                         [100%]

================================== FAILURES ===================================
_______________________________ test_recursion ________________________________

    def test_recursion():
        ####################################################
        # test recursion
    
        a = Input(shape=(32,), name='input_a')
        b = Input(shape=(32,), name='input_b')
    
        dense = Dense(16, name='dense_1')
        a_2 = dense(a)
        b_2 = dense(b)
        merged = layers.concatenate([a_2, b_2], name='merge')
        c = Dense(64, name='dense_2')(merged)
        d = Dense(5, name='dense_3')(c)
    
        model = Model(inputs=[a, b], outputs=[c, d], name='model')
    
        e = Input(shape=(32,), name='input_e')
        f = Input(shape=(32,), name='input_f')
        g, h = model([e, f])
    
        # g2, h2 = model([e, f])
    
        assert g._keras_shape == c._keras_shape
        assert h._keras_shape == d._keras_shape
    
        # test separate manipulation of different layer outputs
        i = Dense(7, name='dense_4')(h)
    
        final_model = Model(inputs=[e, f], outputs=[i, g], name='final')
        assert len(final_model.inputs) == 2
        assert len(final_model.outputs) == 2
        assert len(final_model.layers) == 4
    
        # we don't check names of first 2 layers (inputs) because
        # ordering of same-level layers is not fixed
        expected_shapes = [(10, 7), (10, 64)]
        assert [layer.name for layer in final_model.layers][2:] == ['model', 'dense_4']
        assert model.compute_mask([e, f], [None, None]) == [None, None]
        assert final_model.compute_output_shape([(10, 32), (10, 32)]) == expected_shapes
    
        # run recursive model
        fn = K.function(final_model.inputs, final_model.outputs)
        input_a_np = np.random.random((10, 32))
        input_b_np = np.random.random((10, 32))
        fn_outputs = fn([input_a_np, input_b_np])
        assert [x.shape for x in fn_outputs] == [(10, 7), (10, 64)]
    
        # test serialization
        model_config = final_model.get_config()
        print(json.dumps(model_config, indent=4))
        recreated_model = Model.from_config(model_config)
    
        fn = K.function(recreated_model.inputs, recreated_model.outputs)
        input_a_np = np.random.random((10, 32))
        input_b_np = np.random.random((10, 32))
        fn_outputs = fn([input_a_np, input_b_np])
        assert [x.shape for x in fn_outputs] == [(10, 7), (10, 64)]
    
        ####################################################
        # test multi-input multi-output
    
        j = Input(shape=(32,), name='input_j')
        k = Input(shape=(32,), name='input_k')
        m, n = model([j, k])
    
        o = Input(shape=(32,), name='input_o')
        p = Input(shape=(32,), name='input_p')
        q, r = model([o, p])
    
        assert n._keras_shape == (None, 5)
        assert q._keras_shape == (None, 64)
        s = layers.concatenate([n, q], name='merge_nq')
        assert s._keras_shape == (None, 64 + 5)
    
        # test with single output as 1-elem list
        multi_io_model = Model([j, k, o, p], [s])
    
        fn = K.function(multi_io_model.inputs, multi_io_model.outputs)
        fn_outputs = fn([np.random.random((10, 32)), np.random.random((10, 32)),
                         np.random.random((10, 32)), np.random.random((10, 32))])
        assert [x.shape for x in fn_outputs] == [(10, 69)]
    
        # test with single output as tensor
        multi_io_model = Model([j, k, o, p], s)
    
        fn = K.function(multi_io_model.inputs, multi_io_model.outputs)
        fn_outputs = fn([np.random.random((10, 32)), np.random.random((10, 32)),
                         np.random.random((10, 32)), np.random.random((10, 32))])
        # note that the output of the K.function will still be a 1-elem list
        assert [x.shape for x in fn_outputs] == [(10, 69)]
    
        # test serialization
        model_config = multi_io_model.get_config()
        recreated_model = Model.from_config(model_config)
    
        fn = K.function(recreated_model.inputs, recreated_model.outputs)
        fn_outputs = fn([np.random.random((10, 32)), np.random.random((10, 32)),
                         np.random.random((10, 32)), np.random.random((10, 32))])
        # note that the output of the K.function will still be a 1-elem list
        assert [x.shape for x in fn_outputs] == [(10, 69)]
    
        config = model.get_config()
        Model.from_config(config)
    
>       model.summary()

test_topology.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\network.py:1328: in summary
    print_fn=print_fn)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\layer_utils.py:179: in print_summary
    model._check_trainable_weights_consistency()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001651AC4C400>

    def _check_trainable_weights_consistency(self):
        """Check trainable weights count consistency.
    
        This will raise a warning if `trainable_weights` and
        `_collected_trainable_weights` are inconsistent (i.e. have different
        number of parameters).
        Inconsistency will typically arise when one modifies `model.trainable`
        without calling `model.compile` again.
        """
        if hasattr(self, '_collected_trainable_weights'):
            return
    
        if (len(self.trainable_weights) !=
>               len(self._collected_trainable_weights)):
E               AttributeError: 'Model' object has no attribute '_collected_trainable_weights'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:295: AttributeError
---------------------------- Captured stdout call -----------------------------
{
    "name": "final",
    "layers": [
        {
            "name": "input_e",
            "class_name": "InputLayer",
            "config": {
                "batch_input_shape": [
                    null,
                    32
                ],
                "dtype": "float32",
                "sparse": false,
                "name": "input_e"
            },
            "inbound_nodes": []
        },
        {
            "name": "input_f",
            "class_name": "InputLayer",
            "config": {
                "batch_input_shape": [
                    null,
                    32
                ],
                "dtype": "float32",
                "sparse": false,
                "name": "input_f"
            },
            "inbound_nodes": []
        },
        {
            "name": "model",
            "class_name": "Model",
            "config": {
                "name": "model",
                "layers": [
                    {
                        "name": "input_a",
                        "class_name": "InputLayer",
                        "config": {
                            "batch_input_shape": [
                                null,
                                32
                            ],
                            "dtype": "float32",
                            "sparse": false,
                            "name": "input_a"
                        },
                        "inbound_nodes": []
                    },
                    {
                        "name": "input_b",
                        "class_name": "InputLayer",
                        "config": {
                            "batch_input_shape": [
                                null,
                                32
                            ],
                            "dtype": "float32",
                            "sparse": false,
                            "name": "input_b"
                        },
                        "inbound_nodes": []
                    },
                    {
                        "name": "dense_1",
                        "class_name": "Dense",
                        "config": {
                            "name": "dense_1",
                            "trainable": true,
                            "dtype": "float32",
                            "units": 16,
                            "activation": "linear",
                            "use_bias": true,
                            "kernel_initializer": {
                                "class_name": "VarianceScaling",
                                "config": {
                                    "scale": 1.0,
                                    "mode": "fan_avg",
                                    "distribution": "uniform",
                                    "seed": null
                                }
                            },
                            "bias_initializer": {
                                "class_name": "Zeros",
                                "config": {}
                            },
                            "kernel_regularizer": null,
                            "bias_regularizer": null,
                            "activity_regularizer": null,
                            "kernel_constraint": null,
                            "bias_constraint": null
                        },
                        "inbound_nodes": [
                            [
                                [
                                    "input_a",
                                    0,
                                    0,
                                    {}
                                ]
                            ],
                            [
                                [
                                    "input_b",
                                    0,
                                    0,
                                    {}
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "merge",
                        "class_name": "Concatenate",
                        "config": {
                            "name": "merge",
                            "trainable": true,
                            "dtype": "float32",
                            "axis": -1
                        },
                        "inbound_nodes": [
                            [
                                [
                                    "dense_1",
                                    0,
                                    0,
                                    {}
                                ],
                                [
                                    "dense_1",
                                    1,
                                    0,
                                    {}
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "dense_2",
                        "class_name": "Dense",
                        "config": {
                            "name": "dense_2",
                            "trainable": true,
                            "dtype": "float32",
                            "units": 64,
                            "activation": "linear",
                            "use_bias": true,
                            "kernel_initializer": {
                                "class_name": "VarianceScaling",
                                "config": {
                                    "scale": 1.0,
                                    "mode": "fan_avg",
                                    "distribution": "uniform",
                                    "seed": null
                                }
                            },
                            "bias_initializer": {
                                "class_name": "Zeros",
                                "config": {}
                            },
                            "kernel_regularizer": null,
                            "bias_regularizer": null,
                            "activity_regularizer": null,
                            "kernel_constraint": null,
                            "bias_constraint": null
                        },
                        "inbound_nodes": [
                            [
                                [
                                    "merge",
                                    0,
                                    0,
                                    {}
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "dense_3",
                        "class_name": "Dense",
                        "config": {
                            "name": "dense_3",
                            "trainable": true,
                            "dtype": "float32",
                            "units": 5,
                            "activation": "linear",
                            "use_bias": true,
                            "kernel_initializer": {
                                "class_name": "VarianceScaling",
                                "config": {
                                    "scale": 1.0,
                                    "mode": "fan_avg",
                                    "distribution": "uniform",
                                    "seed": null
                                }
                            },
                            "bias_initializer": {
                                "class_name": "Zeros",
                                "config": {}
                            },
                            "kernel_regularizer": null,
                            "bias_regularizer": null,
                            "activity_regularizer": null,
                            "kernel_constraint": null,
                            "bias_constraint": null
                        },
                        "inbound_nodes": [
                            [
                                [
                                    "dense_2",
                                    0,
                                    0,
                                    {}
                                ]
                            ]
                        ]
                    }
                ],
                "input_layers": [
                    [
                        "input_a",
                        0,
                        0
                    ],
                    [
                        "input_b",
                        0,
                        0
                    ]
                ],
                "output_layers": [
                    [
                        "dense_2",
                        0,
                        0
                    ],
                    [
                        "dense_3",
                        0,
                        0
                    ]
                ]
            },
            "inbound_nodes": [
                [
                    [
                        "input_e",
                        0,
                        0,
                        {}
                    ],
                    [
                        "input_f",
                        0,
                        0,
                        {}
                    ]
                ]
            ]
        },
        {
            "name": "dense_4",
            "class_name": "Dense",
            "config": {
                "name": "dense_4",
                "trainable": true,
                "dtype": "float32",
                "units": 7,
                "activation": "linear",
                "use_bias": true,
                "kernel_initializer": {
                    "class_name": "VarianceScaling",
                    "config": {
                        "scale": 1.0,
                        "mode": "fan_avg",
                        "distribution": "uniform",
                        "seed": null
                    }
                },
                "bias_initializer": {
                    "class_name": "Zeros",
                    "config": {}
                },
                "kernel_regularizer": null,
                "bias_regularizer": null,
                "activity_regularizer": null,
                "kernel_constraint": null,
                "bias_constraint": null
            },
            "inbound_nodes": [
                [
                    [
                        "model",
                        1,
                        1,
                        {}
                    ]
                ]
            ]
        }
    ],
    "input_layers": [
        [
            "input_e",
            0,
            0
        ],
        [
            "input_f",
            0,
            0
        ]
    ],
    "output_layers": [
        [
            "dense_4",
            0,
            0
        ],
        [
            "model",
            1,
            0
        ]
    ]
}
Model: "model"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_a (InputLayer)            (None, 32)           0                                            
__________________________________________________________________________________________________
input_b (InputLayer)            (None, 32)           0                                            
__________________________________________________________________________________________________
dense_1 (Dense)                 (None, 16)           528         input_a[0][0]                    
                                                                 input_b[0][0]                    
__________________________________________________________________________________________________
merge (Concatenate)             (None, 32)           0           dense_1[0][0]                    
                                                                 dense_1[1][0]                    
__________________________________________________________________________________________________
dense_2 (Dense)                 (None, 64)           2112        merge[0][0]                      
__________________________________________________________________________________________________
dense_3 (Dense)                 (None, 5)            325         dense_2[0][0]                    
==================================================================================================
---------------------------- Captured stderr call -----------------------------
2020-10-05 15:46:51.458459: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-05 15:46:51.459092: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-05 15:46:51.459454: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-05 15:46:51.459803: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-05 15:46:51.460140: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-05 15:46:51.460482: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-05 15:46:51.460832: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-05 15:46:51.461182: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-05 15:46:51.461771: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-05 15:46:51.462095: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-05 15:46:51.462455: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-05 15:46:51.462679: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-05 15:46:51.463201: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
____________________ test_constant_initializer_with_numpy _____________________

    def test_constant_initializer_with_numpy():
        model = Sequential()
        model.add(Dense(2, input_shape=(3,),
                        kernel_initializer=Constant(1.)))
        model.add(Dense(3))
        model.compile(loss='mse', optimizer='sgd', metrics=['acc'])
    
        json_str = model.to_json()
>       model_from_json(json_str).summary()

test_topology.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\network.py:1328: in summary
    print_fn=print_fn)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\layer_utils.py:179: in print_summary
    model._check_trainable_weights_consistency()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.sequential.Sequential object at 0x00000167B662A9B0>

    def _check_trainable_weights_consistency(self):
        """Check trainable weights count consistency.
    
        This will raise a warning if `trainable_weights` and
        `_collected_trainable_weights` are inconsistent (i.e. have different
        number of parameters).
        Inconsistency will typically arise when one modifies `model.trainable`
        without calling `model.compile` again.
        """
        if hasattr(self, '_collected_trainable_weights'):
            return
    
        if (len(self.trainable_weights) !=
>               len(self._collected_trainable_weights)):
E               AttributeError: 'Sequential' object has no attribute '_collected_trainable_weights'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:295: AttributeError
---------------------------- Captured stdout call -----------------------------
Model: "sequential_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_1 (Dense)              (None, 2)                 8         
_________________________________________________________________
dense_2 (Dense)              (None, 3)                 9         
=================================================================
============================== warnings summary ===============================
test_topology.py::test_activity_regularization_with_model_composition
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output model_1 missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to model_1.
    'be expecting any data to be passed to {0}.'.format(name))

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED test_topology.py::test_recursion - AttributeError: 'Model' object has ...
FAILED test_topology.py::test_constant_initializer_with_numpy - AttributeErro...
=================== 2 failed, 29 passed, 1 warning in 7.86s ===================
