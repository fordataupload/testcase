2020-10-03 19:01:04.115882: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\engine
plugins: flaky-3.7.0
collected 34 items

test_training.py ...FFFFs.....F.......FF..FF.F.FFFF                      [100%]

================================== FAILURES ===================================
_____________________________ test_model_methods ______________________________

    @flaky(rerun_filter=lambda err, *args: issubclass(err[0], AssertionError))
    def test_model_methods():
        model = get_model(num_outputs=2)
    
        optimizer = 'rmsprop'
        loss = 'mse'
        loss_weights = [1., 0.5]
    
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_a_np = np.random.random((10, 4))
        output_b_np = np.random.random((10, 3))
    
        # training/testing doesn't work before compiling.
        with pytest.raises(RuntimeError):
            model.train_on_batch([input_a_np, input_b_np],
                                 [output_a_np, output_b_np])
    
        model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,
                      sample_weight_mode=None)
    
        # test train_on_batch
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np])
        out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},
                                   [output_a_np, output_b_np])
        out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},
                                   {'dense_1': output_a_np, 'dropout': output_b_np})
    
        # test fit
        out = model.fit([input_a_np, input_b_np],
>                       [output_a_np, output_b_np], epochs=1, batch_size=4)

test_training.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D5238ED320>
batch_size = 4, steps = None
x = [array([[0.03045887, 0.66822452, 0.66943648],
       [0.94754797, 0.01238421, 0.69829905],
       [0.56876038, 0.37313...3, 0.28215025, 0.58228403],
       [0.16790481, 0.22178711, 0.25684594],
       [0.86559899, 0.93747574, 0.74035084]])]

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
---------------------------- Captured stderr call -----------------------------
Using TensorFlow backend.
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
2020-10-03 19:01:06.517253: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-10-03 19:01:06.637577: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 19:01:06.638744: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 19:01:06.642299: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 19:01:06.645910: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 19:01:06.647531: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 19:01:06.652258: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 19:01:06.655377: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 19:01:06.664769: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 19:01:06.665735: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 19:01:06.666354: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-10-03 19:01:06.681140: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 19:01:06.681677: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 19:01:06.682040: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 19:01:06.682387: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 19:01:06.682727: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 19:01:06.683066: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 19:01:06.683408: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 19:01:06.683751: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 19:01:06.684599: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 19:01:07.623349: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 19:01:07.623757: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 19:01:07.623974: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 19:01:07.624740: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.

2020-10-03 19:01:08.208458: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
------------------------------ Captured log call ------------------------------
WARNING  tensorflow:deprecation.py:506 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
WARNING  tensorflow:module_wrapper.py:139 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.
_____________________________ test_fit_generator ______________________________

    @flaky(rerun_filter=lambda err, *args: issubclass(err[0], AssertionError))
    def test_fit_generator():
        model = get_model(num_outputs=2)
        optimizer = 'rmsprop'
        loss = 'mse'
        loss_weights = [1., 0.5]
    
        model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,
                      sample_weight_mode=None)
        tracker_cb = TrackerCallback()
        val_seq = RandomSequence(4)
        out = model.fit_generator(generator=RandomSequence(3),
                                  steps_per_epoch=3,
                                  epochs=5,
                                  initial_epoch=0,
                                  validation_data=val_seq,
                                  validation_steps=3,
                                  max_queue_size=1,
                                  callbacks=[tracker_cb])
        assert tracker_cb.trained_epochs == [0, 1, 2, 3, 4]
        assert tracker_cb.trained_batches == list(range(3)) * 5
        assert len(val_seq.logs) <= 4 * 5
    
        tracker_cb = TrackerCallback()
        val_seq = RandomSequence(4)
        out = model.fit(RandomSequence(3),
                        steps_per_epoch=3,
                        epochs=5,
                        initial_epoch=0,
                        validation_data=val_seq,
                        validation_steps=3,
                        max_queue_size=1,
>                       callbacks=[tracker_cb])

test_training.py:504: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7ACA9F630>
batch_size = None, steps = 3
x = <test_training.RandomSequence object at 0x000001D7ACA34128>

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
---------------------------- Captured stdout call -----------------------------
Epoch 1/5

1/3 [=========>....................] - ETA: 0s - loss: 0.4670 - dense_1_loss: 0.2818 - dropout_loss: 0.3705
3/3 [==============================] - 0s 42ms/step - loss: 0.4705 - dense_1_loss: 0.3104 - dropout_loss: 0.3200 - val_loss: 0.3137 - val_dense_1_loss: 0.1997 - val_dropout_loss: 0.1895
Epoch 2/5

1/3 [=========>....................] - ETA: 0s - loss: 0.8753 - dense_1_loss: 0.4102 - dropout_loss: 0.9302
3/3 [==============================] - 0s 10ms/step - loss: 0.5985 - dense_1_loss: 0.2583 - dropout_loss: 0.6803 - val_loss: 0.2219 - val_dense_1_loss: 0.2194 - val_dropout_loss: 0.1619
Epoch 3/5

1/3 [=========>....................] - ETA: 0s - loss: 0.6234 - dense_1_loss: 0.2842 - dropout_loss: 0.6783
3/3 [==============================] - 0s 16ms/step - loss: 0.4858 - dense_1_loss: 0.2382 - dropout_loss: 0.4952 - val_loss: 0.2589 - val_dense_1_loss: 0.2394 - val_dropout_loss: 0.1910
Epoch 4/5

1/3 [=========>....................] - ETA: 0s - loss: 0.8004 - dense_1_loss: 0.4042 - dropout_loss: 0.7924
3/3 [==============================] - 0s 10ms/step - loss: 0.6706 - dense_1_loss: 0.3574 - dropout_loss: 0.6264 - val_loss: 0.2603 - val_dense_1_loss: 0.2473 - val_dropout_loss: 0.1992
Epoch 5/5

1/3 [=========>....................] - ETA: 0s - loss: 0.4142 - dense_1_loss: 0.0850 - dropout_loss: 0.6584
3/3 [==============================] - 0s 42ms/step - loss: 0.4127 - dense_1_loss: 0.0822 - dropout_loss: 0.6609 - val_loss: 0.2813 - val_dense_1_loss: 0.1726 - val_dropout_loss: 0.1061
---------------------------- Captured stderr call -----------------------------
2020-10-03 19:01:09.897853: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 19:01:09.898458: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 19:01:09.898820: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 19:01:09.899172: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 19:01:09.899509: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 19:01:09.899853: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 19:01:09.900197: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 19:01:09.900541: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 19:01:09.901123: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 19:01:09.901442: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 19:01:09.901801: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 19:01:09.902034: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 19:01:09.902598: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
__________________________ test_fit_generator_shape ___________________________

    def test_fit_generator_shape():
        # predict_generator output shape behavior should be consistent
        def expected_shape(batch_size, n_batches):
            return (batch_size * n_batches, 4), (batch_size * n_batches, 3)
    
        model = get_model(num_outputs=2)
        optimizer = 'rmsprop'
        loss = 'mse'
    
        # Multiple outputs and one step.
        batch_size = 5
        sequence_length = 1
        shape_0, shape_1 = expected_shape(batch_size, sequence_length)
        out = model.predict_generator(
            RandomSequence(batch_size, sequence_length=sequence_length))
        assert np.shape(out[0]) == shape_0 and np.shape(out[1]) == shape_1
    
        out = model.predict(
>           RandomSequence(batch_size, sequence_length=sequence_length))

test_training.py:627: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1422: in predict
    batch_size = self._validate_or_infer_batch_size(batch_size, steps, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7AC9E96D8>
batch_size = None, steps = None
x = <test_training.RandomSequence object at 0x000001D7ACBE8390>

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
---------------------------- Captured stderr call -----------------------------
2020-10-03 19:01:10.530994: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 19:01:10.531594: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 19:01:10.531942: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 19:01:10.532283: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 19:01:10.532624: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 19:01:10.533054: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 19:01:10.533483: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 19:01:10.533931: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 19:01:10.534592: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 19:01:10.534939: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 19:01:10.535296: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 19:01:10.535520: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 19:01:10.536042: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
______________________ test_training_with_loss_instance _______________________

    def test_training_with_loss_instance():
        a = Input(shape=(3,), name='input_a')
        b = Input(shape=(3,), name='input_b')
    
        dense = Dense(4, name='dense')
        c = dense(a)
        d = dense(b)
        e = Dropout(0.5, name='dropout')(c)
    
        model = Model([a, b], [d, e])
        loss_weights = [1., 0.5]
        model.compile(
            'sgd',
            loss=losses.MeanSquaredError(),
            metrics=['mae'],
            loss_weights=loss_weights)
    
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_d_np = np.random.random((10, 4))
        output_e_np = np.random.random((10, 4))
    
        model.fit([input_a_np, input_b_np], [output_d_np, output_e_np],
                  epochs=1,
>                 batch_size=5)

test_training.py:697: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7ACBEA748>
batch_size = 5, steps = None
x = [array([[0.76038579, 0.8887148 , 0.10137812],
       [0.29500224, 0.55494639, 0.943747  ],
       [0.22572597, 0.94127...6, 0.84092362, 0.28507978],
       [0.94042974, 0.49485873, 0.67880129],
       [0.57016283, 0.92785993, 0.41257097]])]

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
______________________ test_model_with_input_feed_tensor ______________________

    @pytest.mark.skipif(K.backend() != 'tensorflow',
                        reason='Requires TensorFlow backend')
    def test_model_with_input_feed_tensor():
        """We test building a model with a TF variable as input.
        We should be able to call fit, evaluate, predict,
        by only passing them data for the placeholder inputs
        in the model.
        """
        import tensorflow as tf
    
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_a_np = np.random.random((10, 4))
        output_b_np = np.random.random((10, 3))
    
        a = Input(tensor=tf.Variable(input_a_np, dtype=tf.float32))
        b = Input(shape=(3,), name='input_b')
    
        a_2 = Dense(4, name='dense_1')(a)
        dp = Dropout(0.5, name='dropout')
        b_2 = dp(b)
    
        model = Model([a, b], [a_2, b_2])
        model.summary()
    
        optimizer = 'rmsprop'
        loss = 'mse'
        loss_weights = [1., 0.5]
        model.compile(optimizer, loss, metrics=['mean_squared_error'],
                      loss_weights=loss_weights,
                      sample_weight_mode=None)
    
        # test train_on_batch
        out = model.train_on_batch(input_b_np,
                                   [output_a_np, output_b_np])
        out = model.train_on_batch({'input_b': input_b_np},
                                   [output_a_np, output_b_np])
        out = model.test_on_batch({'input_b': input_b_np},
                                  [output_a_np, output_b_np])
        out = model.predict_on_batch({'input_b': input_b_np})
    
        # test fit
        out = model.fit({'input_b': input_b_np},
>                       [output_a_np, output_b_np], epochs=1, batch_size=10)

test_training.py:880: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7AC9CEFD0>
batch_size = 10, steps = None
x = {'input_b': array([[0.42242149, 0.10525666, 0.29269733],
       [0.79510348, 0.72264268, 0.47209208],
       [0.117631...2, 0.21287258, 0.82595294],
       [0.55079294, 0.7199799 , 0.33280629],
       [0.4243105 , 0.25863834, 0.48487131]])}

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
---------------------------- Captured stdout call -----------------------------
Model: "model_1"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_1 (InputLayer)            (10, 3)              0                                            
__________________________________________________________________________________________________
input_b (InputLayer)            (None, 3)            0                                            
__________________________________________________________________________________________________
dense_1 (Dense)                 (10, 4)              16          input_1[0][0]                    
__________________________________________________________________________________________________
dropout (Dropout)               (None, 3)            0           input_b[0][0]                    
==================================================================================================
Total params: 16
Trainable params: 16
Non-trainable params: 0
__________________________________________________________________________________________________
---------------------------- Captured stderr call -----------------------------
2020-10-03 19:01:11.536291: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 19:01:11.536895: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 19:01:11.537261: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 19:01:11.537606: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 19:01:11.537944: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 19:01:11.538292: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 19:01:11.538636: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 19:01:11.538980: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 19:01:11.539578: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 19:01:11.539896: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 19:01:11.540268: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 19:01:11.540490: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 19:01:11.541054: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:431: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.

WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:438: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.

------------------------------ Captured log call ------------------------------
WARNING  tensorflow:module_wrapper.py:139 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:431: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.

WARNING  tensorflow:module_wrapper.py:139 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:438: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.
_________ test_training_and_eval_methods_on_symbolic_tensors_multi_io _________

    @pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TensorFlow')
    def test_training_and_eval_methods_on_symbolic_tensors_multi_io():
        a = keras.layers.Input(shape=(3,), name='input_a')
        b = keras.layers.Input(shape=(3,), name='input_b')
    
        dense = keras.layers.Dense(4, name='dense')
        c = dense(a)
        d = dense(b)
        e = keras.layers.Dropout(0.5, name='dropout')(c)
    
        model = keras.models.Model([a, b], [d, e])
    
        optimizer = 'rmsprop'
        loss = 'mse'
        loss_weights = [1., 0.5]
        metrics = ['mae']
        model.compile(optimizer, loss, metrics=metrics, loss_weights=loss_weights)
    
        input_a_tf = keras.backend.zeros(shape=(10, 3))
        input_b_tf = keras.backend.zeros(shape=(10, 3))
    
        output_d_tf = keras.backend.zeros(shape=(10, 4))
        output_e_tf = keras.backend.zeros(shape=(10, 4))
    
        model.fit(
            [input_a_tf, input_b_tf], [output_d_tf, output_e_tf],
            epochs=1,
            steps_per_epoch=2,
            verbose=0)
        with pytest.raises(ValueError,
                           match='should specify the `steps_per_epoch`'):
            model.fit(
                [input_a_tf, input_b_tf], [output_d_tf, output_e_tf],
                epochs=1,
                batch_size=5,
>               verbose=0)

test_training.py:1495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7B56F0978>
x = [<tf.Variable 'Variable:0' shape=(10, 3) dtype=float32>, <tf.Variable 'Variable_1:0' shape=(10, 3) dtype=float32>]
y = [<tf.Variable 'Variable_2:0' shape=(10, 4) dtype=float32>, <tf.Variable 'Variable_3:0' shape=(10, 4) dtype=float32>]
batch_size = 5, epochs = 1, verbose = 0, callbacks = None
validation_split = 0.0, validation_data = None, shuffle = True
class_weight = None, sample_weight = None, initial_epoch = 0
steps_per_epoch = None, validation_steps = None, validation_freq = 1
max_queue_size = 10, workers = 1, use_multiprocessing = False, kwargs = {}

    def fit(self,
            x=None,
            y=None,
            batch_size=None,
            epochs=1,
            verbose=1,
            callbacks=None,
            validation_split=0.,
            validation_data=None,
            shuffle=True,
            class_weight=None,
            sample_weight=None,
            initial_epoch=0,
            steps_per_epoch=None,
            validation_steps=None,
            validation_freq=1,
            max_queue_size=10,
            workers=1,
            use_multiprocessing=False,
            **kwargs):
        """Trains the model for a fixed number of epochs (iterations on a dataset).
    
        # Arguments
            x: Input data. It could be:
                - A Numpy array (or array-like), or a list of arrays
                  (in case the model has multiple inputs).
                - A dict mapping input names to the corresponding
                  array/tensors, if the model has named inputs.
                - A generator or `keras.utils.Sequence` returning
                  `(inputs, targets)` or `(inputs, targets, sample weights)`.
                - None (default) if feeding from framework-native
                  tensors (e.g. TensorFlow data tensors).
            y: Target data. Like the input data `x`,
                it could be either Numpy array(s), framework-native tensor(s),
                list of Numpy arrays (if the model has multiple outputs) or
                None (default) if feeding from framework-native tensors
                (e.g. TensorFlow data tensors).
                If output layers in the model are named, you can also pass a
                dictionary mapping output names to Numpy arrays.
                If `x` is a generator, or `keras.utils.Sequence` instance,
                `y` should not be specified (since targets will be obtained
                from `x`).
            batch_size: Integer or `None`.
                Number of samples per gradient update.
                If unspecified, `batch_size` will default to 32.
                Do not specify the `batch_size` if your data is in the
                form of symbolic tensors, generators, or `Sequence` instances
                (since they generate batches).
            epochs: Integer. Number of epochs to train the model.
                An epoch is an iteration over the entire `x` and `y`
                data provided.
                Note that in conjunction with `initial_epoch`,
                `epochs` is to be understood as "final epoch".
                The model is not trained for a number of iterations
                given by `epochs`, but merely until the epoch
                of index `epochs` is reached.
            verbose: Integer. 0, 1, or 2. Verbosity mode.
                0 = silent, 1 = progress bar, 2 = one line per epoch.
            callbacks: List of `keras.callbacks.Callback` instances.
                List of callbacks to apply during training and validation
                (if ).
                See [callbacks](/callbacks).
            validation_split: Float between 0 and 1.
                Fraction of the training data to be used as validation data.
                The model will set apart this fraction of the training data,
                will not train on it, and will evaluate
                the loss and any model metrics
                on this data at the end of each epoch.
                The validation data is selected from the last samples
                in the `x` and `y` data provided, before shuffling.
                This argument is not supported when `x` is a generator or
                `Sequence` instance.
            validation_data: Data on which to evaluate
                the loss and any model metrics at the end of each epoch.
                The model will not be trained on this data.
                `validation_data` will override `validation_split`.
                `validation_data` could be:
                    - tuple `(x_val, y_val)` of Numpy arrays or tensors
                    - tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
                    - dataset or a dataset iterator
                For the first two cases, `batch_size` must be provided.
                For the last case, `validation_steps` must be provided.
            shuffle: Boolean (whether to shuffle the training data
                before each epoch) or str (for 'batch').
                'batch' is a special option for dealing with the
                limitations of HDF5 data; it shuffles in batch-sized chunks.
                Has no effect when `steps_per_epoch` is not `None`.
            class_weight: Optional dictionary mapping class indices (integers)
                to a weight (float) value, used for weighting the loss function
                (during training only).
                This can be useful to tell the model to
                "pay more attention" to samples from
                an under-represented class.
            sample_weight: Optional Numpy array of weights for
                the training samples, used for weighting the loss function
                (during training only). You can either pass a flat (1D)
                Numpy array with the same length as the input samples
                (1:1 mapping between weights and samples),
                or in the case of temporal data,
                you can pass a 2D array with shape
                `(samples, sequence_length)`,
                to apply a different weight to every timestep of every sample.
                In this case you should make sure to specify
                `sample_weight_mode="temporal"` in `compile()`. This argument
                is not supported when `x` generator, or `Sequence` instance,
                instead provide the sample_weights as the third element of `x`.
            initial_epoch: Integer.
                Epoch at which to start training
                (useful for resuming a previous training run).
            steps_per_epoch: Integer or `None`.
                Total number of steps (batches of samples)
                before declaring one epoch finished and starting the
                next epoch. When training with input tensors such as
                TensorFlow data tensors, the default `None` is equal to
                the number of samples in your dataset divided by
                the batch size, or 1 if that cannot be determined.
            validation_steps: Only relevant if `steps_per_epoch`
                is specified. Total number of steps (batches of samples)
                to validate before stopping.
            validation_steps: Only relevant if `validation_data` is provided
                and is a generator. Total number of steps (batches of samples)
                to draw before stopping when performing validation at the end
                of every epoch.
            validation_freq: Only relevant if validation data is provided. Integer
                or list/tuple/set. If an integer, specifies how many training
                epochs to run before a new validation run is performed, e.g.
                `validation_freq=2` runs validation every 2 epochs. If a list,
                tuple, or set, specifies the epochs on which to run validation,
                e.g. `validation_freq=[1, 2, 10]` runs validation at the end
                of the 1st, 2nd, and 10th epochs.
            max_queue_size: Integer. Used for generator or `keras.utils.Sequence`
                input only. Maximum size for the generator queue.
                If unspecified, `max_queue_size` will default to 10.
            workers: Integer. Used for generator or `keras.utils.Sequence` input
                only. Maximum number of processes to spin up
                when using process-based threading. If unspecified, `workers`
                will default to 1. If 0, will execute the generator on the main
                thread.
            use_multiprocessing: Boolean. Used for generator or
                `keras.utils.Sequence` input only. If `True`, use process-based
                threading. If unspecified, `use_multiprocessing` will default to
                `False`. Note that because this implementation relies on
                multiprocessing, you should not pass non-picklable arguments to
                the generator as they can't be passed easily to children processes.
            **kwargs: Used for backwards compatibility.
    
        # Returns
            A `History` object. Its `History.history` attribute is
            a record of training loss values and metrics values
            at successive epochs, as well as validation loss values
            and validation metrics values (if applicable).
    
        # Raises
            RuntimeError: If the model was never compiled.
            ValueError: In case of mismatch between the provided input data
                and what the model expects.
        """
        # Legacy support
        if 'nb_epoch' in kwargs:
            warnings.warn('The `nb_epoch` argument in `fit` '
                          'has been renamed `epochs`.', stacklevel=2)
            epochs = kwargs.pop('nb_epoch')
        if kwargs:
            raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))
    
        if x is None and y is None and steps_per_epoch is None:
            raise ValueError('If fitting from data tensors, '
                             'you should specify the `steps_per_epoch` '
                             'argument.')
    
        batch_size = self._validate_or_infer_batch_size(
>           batch_size, steps_per_epoch, x)

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7B56F0978>
batch_size = 5, steps = None
x = [<tf.Variable 'Variable:0' shape=(10, 3) dtype=float32>, <tf.Variable 'Variable_1:0' shape=(10, 3) dtype=float32>]

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError

During handling of the above exception, another exception occurred:

    @pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TensorFlow')
    def test_training_and_eval_methods_on_symbolic_tensors_multi_io():
        a = keras.layers.Input(shape=(3,), name='input_a')
        b = keras.layers.Input(shape=(3,), name='input_b')
    
        dense = keras.layers.Dense(4, name='dense')
        c = dense(a)
        d = dense(b)
        e = keras.layers.Dropout(0.5, name='dropout')(c)
    
        model = keras.models.Model([a, b], [d, e])
    
        optimizer = 'rmsprop'
        loss = 'mse'
        loss_weights = [1., 0.5]
        metrics = ['mae']
        model.compile(optimizer, loss, metrics=metrics, loss_weights=loss_weights)
    
        input_a_tf = keras.backend.zeros(shape=(10, 3))
        input_b_tf = keras.backend.zeros(shape=(10, 3))
    
        output_d_tf = keras.backend.zeros(shape=(10, 4))
        output_e_tf = keras.backend.zeros(shape=(10, 4))
    
        model.fit(
            [input_a_tf, input_b_tf], [output_d_tf, output_e_tf],
            epochs=1,
            steps_per_epoch=2,
            verbose=0)
        with pytest.raises(ValueError,
                           match='should specify the `steps_per_epoch`'):
            model.fit(
                [input_a_tf, input_b_tf], [output_d_tf, output_e_tf],
                epochs=1,
                batch_size=5,
>               verbose=0)
E           AssertionError: Regex pattern 'should specify the `steps_per_epoch`' does not match 'The `batch_size` argument must not be specified when using a generator or Sequence as an input.'.

test_training.py:1495: AssertionError
---------------------------- Captured stderr call -----------------------------
2020-10-03 19:01:20.246864: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 19:01:20.247472: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 19:01:20.247818: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 19:01:20.248163: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 19:01:20.248500: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 19:01:20.248840: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 19:01:20.249183: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 19:01:20.249530: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 19:01:20.250179: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 19:01:20.250513: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 19:01:20.250887: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 19:01:20.251107: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 19:01:20.251622: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
_____________ test_model_with_crossentropy_losses_channels_first ______________

    def test_model_with_crossentropy_losses_channels_first():
        """Tests use of all crossentropy losses with `channels_first`.
    
        Tests `sparse_categorical_crossentropy`, `categorical_crossentropy`,
        and `binary_crossentropy`.
        Verifies that evaluate gives the same result with either
        `channels_first` or `channels_last` image_data_format.
        Tests PR #9715.
        """
    
        def prepare_simple_model(input_tensor, loss_name, target):
            axis = 1 if K.image_data_format() == 'channels_first' else -1
            if loss_name == 'sparse_categorical_crossentropy':
                loss = lambda y_true, y_pred: K.sparse_categorical_crossentropy(
                    y_true, y_pred, axis=axis)
                num_channels = np.amax(target) + 1
                activation = 'softmax'
            elif loss_name == 'categorical_crossentropy':
                loss = lambda y_true, y_pred: K.categorical_crossentropy(
                    y_true, y_pred, axis=axis)
                num_channels = target.shape[axis]
                activation = 'softmax'
            elif loss_name == 'binary_crossentropy':
                loss = lambda y_true, y_pred: K.binary_crossentropy(y_true, y_pred)
                num_channels = target.shape[axis]
                activation = 'sigmoid'
            predictions = Conv2D(num_channels, 1, activation=activation,
                                 kernel_initializer='ones',
                                 bias_initializer='ones')(input_tensor)
            simple_model = Model(inputs=input_tensor, outputs=predictions)
            simple_model.compile(optimizer='rmsprop', loss=loss)
            return simple_model
    
        losses_to_test = ['sparse_categorical_crossentropy',
                          'categorical_crossentropy', 'binary_crossentropy']
    
        data_channels_first = np.array([[[[8., 7.1, 0.], [4.5, 2.6, 0.55],
                                          [0.9, 4.2, 11.2]]]], dtype=np.float32)
        # Labels for testing 4-class sparse_categorical_crossentropy, 4-class
        # categorical_crossentropy, and 2-class binary_crossentropy:
        labels_channels_first = [np.array([[[[0, 1, 3], [2, 1, 0], [2, 2, 1]]]]),
                                 np.array([[[[0, 1, 0], [0, 1, 0], [0, 0, 0]],
                                            [[1, 0, 0], [0, 0, 1], [0, 1, 0]],
                                            [[0, 0, 0], [1, 0, 0], [0, 0, 1]],
                                            [[0, 0, 1], [0, 0, 0], [1, 0, 0]]]]),
                                 np.array([[[[0, 1, 0], [0, 1, 0], [0, 0, 1]],
                                            [[1, 0, 1], [1, 0, 1], [1, 1, 0]]]])]
        # Compute one loss for each loss function in the list `losses_to_test`:
        loss_channels_last = [0., 0., 0.]
        loss_channels_first = [0., 0., 0.]
    
        old_data_format = K.image_data_format()
    
        # Evaluate a simple network with channels last, with all three loss
        # functions:
        K.set_image_data_format('channels_last')
        data = np.moveaxis(data_channels_first, 1, -1)
        for index, loss_function in enumerate(losses_to_test):
            labels = np.moveaxis(labels_channels_first[index], 1, -1)
            inputs = Input(shape=(3, 3, 1))
            model = prepare_simple_model(inputs, loss_function, labels)
            loss_channels_last[index] = model.evaluate(x=data, y=labels,
>                                                      batch_size=1, verbose=0)

test_training.py:1616: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1326: in evaluate
    batch_size = self._validate_or_infer_batch_size(batch_size, steps, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7B7BAACF8>
batch_size = 1, steps = None
x = array([[[[ 8.  ],
         [ 7.1 ],
         [ 0.  ]],

        [[ 4.5 ],
         [ 2.6 ],
         [ 0.55]],

        [[ 0.9 ],
         [ 4.2 ],
         [11.2 ]]]], dtype=float32)

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
____________________________ test_validation_freq _____________________________

    def test_validation_freq():
        model = Sequential([Dense(1)])
        model.compile('sgd', 'mse')
    
        def _gen():
            while True:
                yield np.ones((2, 10)), np.ones((2, 1))
    
        x, y = np.ones((10, 10)), np.ones((10, 1))
    
        class ValCounter(Callback):
    
            def __init__(self):
                self.val_runs = 0
    
            def on_test_begin(self, logs=None):
                self.val_runs += 1
    
        # Test in training_arrays.py
        val_counter = ValCounter()
        model.fit(
            x,
            y,
            batch_size=2,
            epochs=4,
            validation_data=(x, y),
            validation_freq=2,
>           callbacks=[val_counter])

test_training.py:1720: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.sequential.Sequential object at 0x000001D7ACA7FC88>
batch_size = 2, steps = None
x = array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., ...1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
____________________________ test_loss_correctness ____________________________

    def test_loss_correctness():
        class Bias(Layer):
    
            def build(self, input_shape):
                self.bias = self.add_weight('bias', (1,), initializer='zeros')
    
            def call(self, inputs):
                return inputs + self.bias
    
        inp = Input(shape=(1,))
        out = Bias()(inp)
        model = Model(inp, out)
        model.compile(
            keras.optimizers.SGD(lr=0.1),
            loss=keras.losses.MeanAbsoluteError())
    
        x = np.array([[0.], [1.], [2.]])
        y = np.array([[0.5], [2.], [3.5]])
>       history = model.fit(x, y, batch_size=3, epochs=5)

test_training.py:1753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7ACA72B70>
batch_size = 3, steps = None, x = array([[0.],
       [1.],
       [2.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
_______________________ test_model_metrics_list_in_call _______________________

    def test_model_metrics_list_in_call():
    
        class TestModel(Model):
    
            def __init__(self):
                super(TestModel, self).__init__(name='test_model')
                self.dense1 = keras.layers.Dense(2)
    
            def call(self, x):
                self.add_metric(K.sum(x), name='metric_2')
                return self.dense1(x)
    
        model = TestModel()
        model.compile(
            loss='mse',
            optimizer='adam',
            metrics=[metrics.MeanSquaredError('metric_1')])
        x = np.ones(shape=(10, 1))
        y = np.ones(shape=(10, 2))
>       model.fit(x, y, epochs=2, batch_size=5, validation_data=(x, y))

test_training.py:1822: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_training.test_model_metrics_list_in_call.<locals>.TestModel object at 0x000001D7B7AD7320>
batch_size = 5, steps = None
x = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
__________________________ test_add_metric_on_model ___________________________

    def test_add_metric_on_model():
        x = Input(shape=(1,))
        y = Dense(1, kernel_initializer='ones', trainable=False)(x)
        model = Model(x, y)
        model.add_metric(K.sum(y), name='metric_1')
        model.add_metric(metrics.Mean(name='metric_2')(y))
        model.compile('sgd', loss='mse', metrics=['mse'])
    
        inputs = np.ones(shape=(10, 1))
        targets = np.zeros(shape=(10, 1))
        history = model.fit(
            inputs,
            targets,
            epochs=2,
            batch_size=5,
>           validation_data=(inputs, targets))

test_training.py:1873: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7B7AAF358>
batch_size = 5, steps = None
x = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
________________________ test_add_metric_in_model_call ________________________

    def test_add_metric_in_model_call():
    
        class TestModel(Model):
    
            def __init__(self):
                super(TestModel, self).__init__(name='test_model')
                self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
                self.mean = metrics.Mean(name='metric_1')
    
            def call(self, x):
                self.add_metric(K.sum(x), name='metric_2')
                # Provide same name as in the instance created in __init__
                # for eager mode
                self.add_metric(self.mean(x), name='metric_1')
                return self.dense1(x)
    
        model = TestModel()
        model.compile(loss='mse', optimizer='sgd')
    
        x = np.ones(shape=(10, 1))
        y = np.ones(shape=(10, 2))
>       history = model.fit(x, y, epochs=2, batch_size=5, validation_data=(x, y))

test_training.py:1910: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_training.test_add_metric_in_model_call.<locals>.TestModel object at 0x000001D7ACC7BEF0>
batch_size = 5, steps = None
x = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
_______________________ test_multiple_add_metric_calls ________________________

    def test_multiple_add_metric_calls():
    
        class TestModel(Model):
    
            def __init__(self):
                super(TestModel, self).__init__(name='test_model')
                self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
                self.mean1 = metrics.Mean(name='metric_1')
                self.mean2 = metrics.Mean(name='metric_2')
    
            def call(self, x):
                self.add_metric(self.mean2(x), name='metric_2')
                self.add_metric(self.mean1(x), name='metric_1')
                self.add_metric(K.sum(x), name='metric_3')
                return self.dense1(x)
    
        model = TestModel()
        model.compile(loss='mse', optimizer='sgd')
    
        x = np.ones(shape=(10, 1))
        y = np.ones(shape=(10, 2))
>       history = model.fit(x, y, epochs=2, batch_size=5, validation_data=(x, y))

test_training.py:1946: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_training.test_multiple_add_metric_calls.<locals>.TestModel object at 0x000001D7ACB1C2B0>
batch_size = 5, steps = None
x = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
________________________ test_add_metric_in_layer_call ________________________

    def test_add_metric_in_layer_call():
    
        class TestLayer(Layer):
    
            def build(self, input_shape):
                self.a = self.add_weight(
                    'a', (1, 1), initializer='ones', trainable=False)
                self.built = True
    
            def call(self, inputs):
                self.add_metric(K.sum(inputs), name='metric_1')
                return inputs + 1
    
        inp = Input(shape=(1,))
        x = TestLayer(input_shape=(1,))(inp)
        x = keras.layers.Dense(2, kernel_initializer='ones')(x)
    
        model = Model(inp, x)
        model.compile('adam', loss='mse')
    
        x = np.ones(shape=(10, 1))
        y = np.ones(shape=(10, 2))
>       history = model.fit(x, y, epochs=2, batch_size=5, validation_data=(x, y))

test_training.py:1981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126: in fit
    batch_size, steps_per_epoch, x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.engine.training.Model object at 0x000001D7B7A77668>
batch_size = 5, steps = None
x = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])

    def _validate_or_infer_batch_size(self, batch_size, steps, x):
        """Validates that the `batch_size` provided is consistent with InputLayer.
    
        It's possible that the user specified a static batch size in their
        InputLayer. If so, this method checks the provided `batch_size` and `x`
        arguments are consistent with this static batch size. Also, if
        `batch_size` is `None`, this method will attempt to infer the batch size
        from the static batch size of the InputLayer. Lastly, ValueError will be
        raised if `x` is a generator or `Sequence` instance and `batch_size` is
        specified as we expect users to provide batched datasets.
    
        # Arguments
            batch_size: The batch_size provided as an argument to
                fit/evaluate/predict.
            steps: The steps provided as an argument to fit/evaluate/predict.
            x: The data passed as `x` to fit/evaluate/predict.
    
        # Returns
            The validated batch_size, auto-inferred from the first layer if
            not provided.
    
        # Raises
            ValueError: if a batch size is specified and a generator/Sequence
                is passed, or if the specified batch size does not match the
                exepected size defined in the Input Layer.
        """
        if batch_size is not None or training_utils.is_generator_or_sequence(x):
>           raise ValueError('The `batch_size` argument must not be specified when'
                             ' using a generator or Sequence as an input.')
E           ValueError: The `batch_size` argument must not be specified when using a generator or Sequence as an input.

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912: ValueError
============================== warnings summary ===============================
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\_pytest\config\__init__.py:1040
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\_pytest\config\__init__.py:1040: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: flaky
    self._mark_plugins_for_rewrite(hook)

test_training.py::test_model_with_partial_loss
test_training.py::test_model_with_external_loss
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output dense_1 missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to dense_1.
    'be expecting any data to be passed to {0}.'.format(name))

test_training.py::test_model_with_external_loss
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output dropout missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to dropout.
    'be expecting any data to be passed to {0}.'.format(name))

test_training.py::test_model_with_external_loss
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output dense_2 missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to dense_2.
    'be expecting any data to be passed to {0}.'.format(name))

-- Docs: https://docs.pytest.org/en/stable/warnings.html
===Flaky Test Report===

test_model_methods failed and was not selected for rerun.
	<class 'ValueError'>
	The `batch_size` argument must not be specified when using a generator or Sequence as an input.
	[<TracebackEntry C:\Users\mutation\Desktop\testcase\tests\keras\engine\test_training.py:195>, <TracebackEntry C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126>, <TracebackEntry C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912>]
test_fit_generator failed and was not selected for rerun.
	<class 'ValueError'>
	The `batch_size` argument must not be specified when using a generator or Sequence as an input.
	[<TracebackEntry C:\Users\mutation\Desktop\testcase\tests\keras\engine\test_training.py:504>, <TracebackEntry C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:1126>, <TracebackEntry C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training.py:912>]

===End Flaky Test Report===
=========================== short test summary info ===========================
FAILED test_training.py::test_model_methods - ValueError: The `batch_size` ar...
FAILED test_training.py::test_fit_generator - ValueError: The `batch_size` ar...
FAILED test_training.py::test_fit_generator_shape - ValueError: The `batch_si...
FAILED test_training.py::test_training_with_loss_instance - ValueError: The `...
FAILED test_training.py::test_model_with_input_feed_tensor - ValueError: The ...
FAILED test_training.py::test_training_and_eval_methods_on_symbolic_tensors_multi_io
FAILED test_training.py::test_model_with_crossentropy_losses_channels_first
FAILED test_training.py::test_validation_freq - ValueError: The `batch_size` ...
FAILED test_training.py::test_loss_correctness - ValueError: The `batch_size`...
FAILED test_training.py::test_model_metrics_list_in_call - ValueError: The `b...
FAILED test_training.py::test_add_metric_on_model - ValueError: The `batch_si...
FAILED test_training.py::test_add_metric_in_model_call - ValueError: The `bat...
FAILED test_training.py::test_multiple_add_metric_calls - ValueError: The `ba...
FAILED test_training.py::test_add_metric_in_layer_call - ValueError: The `bat...
============ 14 failed, 19 passed, 1 skipped, 5 warnings in 15.65s ============
