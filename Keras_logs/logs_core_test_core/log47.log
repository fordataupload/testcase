2020-10-03 15:20:53.670841: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\layers
plugins: flaky-3.7.0
collected 15 items

core_test.py ...FFF.........                                             [100%]

================================== FAILURES ===================================
__________________ test_reshape[target_shape0-input_shape0] ___________________

target_shape = (8, 1), input_shape = (3, 2, 4)

    @pytest.mark.parametrize('target_shape,input_shape',
                             [((8, 1), (3, 2, 4)),
                              ((-1, 1), (3, 2, 4)),
                              ((1, -1), (3, 2, 4)),
                              ((-1, 1), (None, None, 4))])
    def test_reshape(target_shape, input_shape):
        layer_test(layers.Reshape,
                   kwargs={'target_shape': target_shape},
>                  input_shape=input_shape)

core_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:399: in compute_output_shape
    input_shape[1:], self.target_shape)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.layers.core.Reshape object at 0x000001E856DFB358>
input_shape = (2, 4), output_shape = [8, 1]

    def _fix_unknown_dimension(self, input_shape, output_shape):
        """Finds and replaces a missing dimension in an output shape.
    
        This is a near direct port of the internal Numpy function
        `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`
    
        # Arguments
            input_shape: original shape of array being reshaped
            output_shape: target shape of the array, with at most
                a single -1 which indicates a dimension that should be
                derived from the input shape.
    
        # Returns
            The new output shape with a `-1` replaced with its computed value.
    
        # Raises
            ValueError: if `input_shape` and `output_shape` do not match.
        """
        output_shape = list(output_shape)
        msg = 'total size of new array must be unchanged'
    
        known, unknown = 2, None
        for index, dim in enumerate(output_shape):
            if dim < 0:
                if unknown is None:
                    unknown = index
                else:
                    raise ValueError('Can only specify one unknown dimension.')
            else:
                known *= dim
    
        original = np.prod(input_shape, dtype=int)
        if unknown is not None:
            if known == 0 or original % known != 0:
                raise ValueError(msg)
            output_shape[unknown] = original // known
        elif original != known:
>           raise ValueError(msg)
E           ValueError: total size of new array must be unchanged

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:387: ValueError
__________________ test_reshape[target_shape1-input_shape1] ___________________

target_shape = (-1, 1), input_shape = (3, 2, 4)

    @pytest.mark.parametrize('target_shape,input_shape',
                             [((8, 1), (3, 2, 4)),
                              ((-1, 1), (3, 2, 4)),
                              ((1, -1), (3, 2, 4)),
                              ((-1, 1), (None, None, 4))])
    def test_reshape(target_shape, input_shape):
        layer_test(layers.Reshape,
                   kwargs={'target_shape': target_shape},
>                  input_shape=input_shape)

core_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

layer_cls = <class 'keras.layers.core.Reshape'>
kwargs = {'target_shape': (-1, 1)}, input_shape = (3, 2, 4)
input_dtype = 'float32'
input_data = array([[[9.317814 , 1.1026106, 6.2113943, 8.8789015],
        [8.4923725, 8.974716 , 0.6400439, 4.4119396]],

       [...  [[7.0037313, 4.2237873, 4.1857324, 8.603602 ],
        [0.8053387, 8.336822 , 0.7631888, 4.5534263]]], dtype=float32)
expected_output = None, expected_output_dtype = 'float32'
fixed_batch_size = False

    def layer_test(layer_cls, kwargs={}, input_shape=None, input_dtype=None,
                   input_data=None, expected_output=None,
                   expected_output_dtype=None, fixed_batch_size=False):
        """Test routine for a layer with a single input tensor
        and single output tensor.
        """
        # generate input data
        if input_data is None:
            assert input_shape
            if not input_dtype:
                input_dtype = K.floatx()
            input_data_shape = list(input_shape)
            for i, e in enumerate(input_data_shape):
                if e is None:
                    input_data_shape[i] = np.random.randint(1, 4)
            input_data = (10 * np.random.random(input_data_shape))
            input_data = input_data.astype(input_dtype)
        else:
            if input_shape is None:
                input_shape = input_data.shape
            if input_dtype is None:
                input_dtype = input_data.dtype
        if expected_output_dtype is None:
            expected_output_dtype = input_dtype
    
        # instantiation
        layer = layer_cls(**kwargs)
    
        # test get_weights , set_weights at layer level
        weights = layer.get_weights()
        layer.set_weights(weights)
    
        expected_output_shape = layer.compute_output_shape(input_shape)
    
        # test in functional API
        if fixed_batch_size:
            x = Input(batch_shape=input_shape, dtype=input_dtype)
        else:
            x = Input(shape=input_shape[1:], dtype=input_dtype)
        y = layer(x)
        assert K.dtype(y) == expected_output_dtype
    
        # check with the functional API
        model = Model(x, y)
    
        actual_output = model.predict(input_data)
        actual_output_shape = actual_output.shape
        for expected_dim, actual_dim in zip(expected_output_shape,
                                            actual_output_shape):
            if expected_dim is not None:
>               assert expected_dim == actual_dim
E               AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:105: AssertionError
---------------------------- Captured stderr call -----------------------------
2020-10-03 15:21:02.481185: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 15:21:02.481771: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 15:21:02.482116: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 15:21:02.482462: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 15:21:02.482798: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 15:21:02.483139: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 15:21:02.483490: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 15:21:02.483836: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 15:21:02.484391: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 15:21:02.484703: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 15:21:02.485049: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 15:21:02.485265: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 15:21:02.485743: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
__________________ test_reshape[target_shape2-input_shape2] ___________________

target_shape = (1, -1), input_shape = (3, 2, 4)

    @pytest.mark.parametrize('target_shape,input_shape',
                             [((8, 1), (3, 2, 4)),
                              ((-1, 1), (3, 2, 4)),
                              ((1, -1), (3, 2, 4)),
                              ((-1, 1), (None, None, 4))])
    def test_reshape(target_shape, input_shape):
        layer_test(layers.Reshape,
                   kwargs={'target_shape': target_shape},
>                  input_shape=input_shape)

core_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

layer_cls = <class 'keras.layers.core.Reshape'>
kwargs = {'target_shape': (1, -1)}, input_shape = (3, 2, 4)
input_dtype = 'float32'
input_data = array([[[2.449707  , 0.1788802 , 9.031093  , 8.209971  ],
        [7.7728662 , 3.195807  , 8.578303  , 2.8766036 ]],

...25524 , 5.6442804 , 3.605507  , 7.5198655 ],
        [1.9875798 , 4.827008  , 0.30271113, 3.8890653 ]]], dtype=float32)
expected_output = None, expected_output_dtype = 'float32'
fixed_batch_size = False

    def layer_test(layer_cls, kwargs={}, input_shape=None, input_dtype=None,
                   input_data=None, expected_output=None,
                   expected_output_dtype=None, fixed_batch_size=False):
        """Test routine for a layer with a single input tensor
        and single output tensor.
        """
        # generate input data
        if input_data is None:
            assert input_shape
            if not input_dtype:
                input_dtype = K.floatx()
            input_data_shape = list(input_shape)
            for i, e in enumerate(input_data_shape):
                if e is None:
                    input_data_shape[i] = np.random.randint(1, 4)
            input_data = (10 * np.random.random(input_data_shape))
            input_data = input_data.astype(input_dtype)
        else:
            if input_shape is None:
                input_shape = input_data.shape
            if input_dtype is None:
                input_dtype = input_data.dtype
        if expected_output_dtype is None:
            expected_output_dtype = input_dtype
    
        # instantiation
        layer = layer_cls(**kwargs)
    
        # test get_weights , set_weights at layer level
        weights = layer.get_weights()
        layer.set_weights(weights)
    
        expected_output_shape = layer.compute_output_shape(input_shape)
    
        # test in functional API
        if fixed_batch_size:
            x = Input(batch_shape=input_shape, dtype=input_dtype)
        else:
            x = Input(shape=input_shape[1:], dtype=input_dtype)
        y = layer(x)
        assert K.dtype(y) == expected_output_dtype
    
        # check with the functional API
        model = Model(x, y)
    
        actual_output = model.predict(input_data)
        actual_output_shape = actual_output.shape
        for expected_dim, actual_dim in zip(expected_output_shape,
                                            actual_output_shape):
            if expected_dim is not None:
>               assert expected_dim == actual_dim
E               AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:105: AssertionError
---------------------------- Captured stderr call -----------------------------
2020-10-03 15:21:02.541848: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 15:21:02.542431: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 15:21:02.542779: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 15:21:02.543121: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 15:21:02.543459: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 15:21:02.543797: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 15:21:02.544146: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 15:21:02.544522: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 15:21:02.545120: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 15:21:02.545453: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 15:21:02.545829: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 15:21:02.546064: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 15:21:02.546583: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
=========================== short test summary info ===========================
FAILED core_test.py::test_reshape[target_shape0-input_shape0] - ValueError: t...
FAILED core_test.py::test_reshape[target_shape1-input_shape1] - AssertionError
FAILED core_test.py::test_reshape[target_shape2-input_shape2] - AssertionError
======================== 3 failed, 12 passed in 7.14s =========================
