2020-10-03 17:03:18.701053: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\layers
plugins: flaky-3.7.0
collected 110 items

convolutional_test.py FFFFFFFFFFFFF.FFFFFFFFF.FFFFFFFFFFF.FFFFFFFFFFFFF. [ 45%]
FFFFFFFFFFFFF.FFFFFFFFFFFFFFFFFFF........................FFF             [100%]

================================== FAILURES ===================================
_________ test_causal_dilated_conv[layer_kwargs0-4-expected_output0] __________

layer_kwargs = {'dilation_rate': 1, 'filters': 1, 'kernel_initializer': 'ones', 'kernel_size': 2, ...}
input_length = 4, expected_output = [[[0], [1], [3], [5]]]

    @pytest.mark.skipif((K.backend() == 'cntk' and load_backend.dev.type() == 0),
                        reason='cntk only support dilated conv on GPU')
    @pytest.mark.parametrize(
        'layer_kwargs,input_length,expected_output',
        [
            # Causal
            ({'filters': 1, 'kernel_size': 2, 'dilation_rate': 1, 'padding': 'causal',
              'kernel_initializer': 'ones', 'use_bias': False},
             4, [[[0], [1], [3], [5]]]),
            # Non-causal
            ({'filters': 1, 'kernel_size': 2, 'dilation_rate': 1, 'padding': 'valid',
              'kernel_initializer': 'ones', 'use_bias': False},
             4, [[[1], [3], [5]]]),
            # Causal dilated with larger kernel size
            ({'filters': 1, 'kernel_size': 3, 'dilation_rate': 2, 'padding': 'causal',
              'kernel_initializer': 'ones', 'use_bias': False},
             10, np.float32([[[0], [1], [2], [4], [6], [9], [12], [15], [18], [21]]])),
        ]
    )
    def test_causal_dilated_conv(layer_kwargs, input_length, expected_output):
        input_data = np.reshape(np.arange(input_length, dtype='float32'),
                                (1, input_length, 1))
        layer_test(convolutional.Conv1D, input_data=input_data,
>                  kwargs=layer_kwargs, expected_output=expected_output)

convolutional_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 4, filter_size = 2, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_________ test_causal_dilated_conv[layer_kwargs1-4-expected_output1] __________

layer_kwargs = {'dilation_rate': 1, 'filters': 1, 'kernel_initializer': 'ones', 'kernel_size': 2, ...}
input_length = 4, expected_output = [[[1], [3], [5]]]

    @pytest.mark.skipif((K.backend() == 'cntk' and load_backend.dev.type() == 0),
                        reason='cntk only support dilated conv on GPU')
    @pytest.mark.parametrize(
        'layer_kwargs,input_length,expected_output',
        [
            # Causal
            ({'filters': 1, 'kernel_size': 2, 'dilation_rate': 1, 'padding': 'causal',
              'kernel_initializer': 'ones', 'use_bias': False},
             4, [[[0], [1], [3], [5]]]),
            # Non-causal
            ({'filters': 1, 'kernel_size': 2, 'dilation_rate': 1, 'padding': 'valid',
              'kernel_initializer': 'ones', 'use_bias': False},
             4, [[[1], [3], [5]]]),
            # Causal dilated with larger kernel size
            ({'filters': 1, 'kernel_size': 3, 'dilation_rate': 2, 'padding': 'causal',
              'kernel_initializer': 'ones', 'use_bias': False},
             10, np.float32([[[0], [1], [2], [4], [6], [9], [12], [15], [18], [21]]])),
        ]
    )
    def test_causal_dilated_conv(layer_kwargs, input_length, expected_output):
        input_data = np.reshape(np.arange(input_length, dtype='float32'),
                                (1, input_length, 1))
        layer_test(convolutional.Conv1D, input_data=input_data,
>                  kwargs=layer_kwargs, expected_output=expected_output)

convolutional_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 4, filter_size = 2, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_________ test_causal_dilated_conv[layer_kwargs2-10-expected_output2] _________

layer_kwargs = {'dilation_rate': 2, 'filters': 1, 'kernel_initializer': 'ones', 'kernel_size': 3, ...}
input_length = 10
expected_output = array([[[ 0.],
        [ 1.],
        [ 2.],
        [ 4.],
        [ 6.],
        [ 9.],
        [12.],
        [15.],
        [18.],
        [21.]]], dtype=float32)

    @pytest.mark.skipif((K.backend() == 'cntk' and load_backend.dev.type() == 0),
                        reason='cntk only support dilated conv on GPU')
    @pytest.mark.parametrize(
        'layer_kwargs,input_length,expected_output',
        [
            # Causal
            ({'filters': 1, 'kernel_size': 2, 'dilation_rate': 1, 'padding': 'causal',
              'kernel_initializer': 'ones', 'use_bias': False},
             4, [[[0], [1], [3], [5]]]),
            # Non-causal
            ({'filters': 1, 'kernel_size': 2, 'dilation_rate': 1, 'padding': 'valid',
              'kernel_initializer': 'ones', 'use_bias': False},
             4, [[[1], [3], [5]]]),
            # Causal dilated with larger kernel size
            ({'filters': 1, 'kernel_size': 3, 'dilation_rate': 2, 'padding': 'causal',
              'kernel_initializer': 'ones', 'use_bias': False},
             10, np.float32([[[0], [1], [2], [4], [6], [9], [12], [15], [18], [21]]])),
        ]
    )
    def test_causal_dilated_conv(layer_kwargs, input_length, expected_output):
        input_data = np.reshape(np.arange(input_length, dtype='float32'),
                                (1, input_length, 1))
        layer_test(convolutional.Conv1D, input_data=input_data,
>                  kwargs=layer_kwargs, expected_output=expected_output)

convolutional_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 10, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
____________________________ test_conv_1d[valid-1] ____________________________

padding = 'valid', strides = 1

    @pytest.mark.parametrize(
        'padding,strides',
        [(padding, strides)
         for padding in _convolution_paddings
         for strides in [1, 2]
         if not (padding == 'same' and strides != 1)]
    )
    def test_conv_1d(padding, strides):
        batch_size = 2
        steps = 8
        input_dim = 2
        kernel_size = 3
        filters = 3
    
        layer_test(convolutional.Conv1D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'strides': strides},
>                  input_shape=(batch_size, steps, input_dim))

convolutional_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 8, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
____________________________ test_conv_1d[valid-2] ____________________________

padding = 'valid', strides = 2

    @pytest.mark.parametrize(
        'padding,strides',
        [(padding, strides)
         for padding in _convolution_paddings
         for strides in [1, 2]
         if not (padding == 'same' and strides != 1)]
    )
    def test_conv_1d(padding, strides):
        batch_size = 2
        steps = 8
        input_dim = 2
        kernel_size = 3
        filters = 3
    
        layer_test(convolutional.Conv1D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'strides': strides},
>                  input_shape=(batch_size, steps, input_dim))

convolutional_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 8, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
____________________________ test_conv_1d[same-1] _____________________________

padding = 'same', strides = 1

    @pytest.mark.parametrize(
        'padding,strides',
        [(padding, strides)
         for padding in _convolution_paddings
         for strides in [1, 2]
         if not (padding == 'same' and strides != 1)]
    )
    def test_conv_1d(padding, strides):
        batch_size = 2
        steps = 8
        input_dim = 2
        kernel_size = 3
        filters = 3
    
        layer_test(convolutional.Conv1D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'strides': strides},
>                  input_shape=(batch_size, steps, input_dim))

convolutional_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 8, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
____________________________ test_conv_1d_dilation ____________________________

    @pytest.mark.skipif((K.backend() == 'cntk' and load_backend.dev.type() == 0),
                        reason='cntk only support dilated conv on GPU')
    def test_conv_1d_dilation():
        batch_size = 2
        steps = 8
        input_dim = 2
        kernel_size = 3
        filters = 3
        padding = _convolution_paddings[-1]
    
        layer_test(convolutional.Conv1D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'dilation_rate': 2},
>                  input_shape=(batch_size, steps, input_dim))

convolutional_test.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 8, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_________________________ test_conv_1d_channels_first _________________________

    def test_conv_1d_channels_first():
        batch_size = 2
        steps = 8
        input_dim = 2
        kernel_size = 3
        filters = 3
    
        layer_test(convolutional.Conv1D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'data_format': 'channels_first'},
>                  input_shape=(batch_size, input_dim, steps))

convolutional_test.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 8, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_2d[strides0-valid] _____________________

strides = (1, 1), padding = 'valid'

    @pytest.mark.parametrize(
        'strides,padding',
        [(strides, padding)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         if not (padding == 'same' and strides != (1, 1))]
    )
    def test_convolution_2d(strides, padding):
        num_samples = 2
        filters = 2
        stack_size = 3
        kernel_size = (3, 2)
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.Conv2D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'strides': strides,
                           'data_format': 'channels_first'},
>                  input_shape=(num_samples, stack_size, num_row, num_col))

convolutional_test.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_2d[strides1-valid] _____________________

strides = (2, 2), padding = 'valid'

    @pytest.mark.parametrize(
        'strides,padding',
        [(strides, padding)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         if not (padding == 'same' and strides != (1, 1))]
    )
    def test_convolution_2d(strides, padding):
        num_samples = 2
        filters = 2
        stack_size = 3
        kernel_size = (3, 2)
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.Conv2D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'strides': strides,
                           'data_format': 'channels_first'},
>                  input_shape=(num_samples, stack_size, num_row, num_col))

convolutional_test.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_2d[strides2-same] ______________________

strides = (1, 1), padding = 'same'

    @pytest.mark.parametrize(
        'strides,padding',
        [(strides, padding)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         if not (padding == 'same' and strides != (1, 1))]
    )
    def test_convolution_2d(strides, padding):
        num_samples = 2
        filters = 2
        stack_size = 3
        kernel_size = (3, 2)
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.Conv2D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'strides': strides,
                           'data_format': 'channels_first'},
>                  input_shape=(num_samples, stack_size, num_row, num_col))

convolutional_test.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
______________________ test_convolution_2d_channels_last ______________________

    def test_convolution_2d_channels_last():
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 7
        num_col = 6
        padding = 'valid'
        strides = (2, 2)
    
        layer_test(convolutional.Conv2D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'data_format': 'channels_last',
                           'activation': None,
                           'kernel_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'kernel_constraint': 'max_norm',
                           'bias_constraint': 'max_norm',
                           'strides': strides},
>                  input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
________________________ test_convolution_2d_dilation _________________________

    @pytest.mark.skipif((K.backend() == 'cntk' and load_backend.dev.type() == 0),
                        reason='cntk only supports dilated conv on GPU')
    def test_convolution_2d_dilation():
        num_samples = 2
        filters = 2
        stack_size = 3
        kernel_size = (3, 2)
        num_row = 7
        num_col = 6
        padding = 'valid'
    
        layer_test(convolutional.Conv2D,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': padding,
                           'dilation_rate': (2, 2)},
>                  input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_________________ test_conv2d_transpose[valid-None-strides0] __________________

padding = 'valid', out_padding = None, strides = (1, 1)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_________________ test_conv2d_transpose[valid-None-strides1] __________________

padding = 'valid', out_padding = None, strides = (2, 2)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_____________ test_conv2d_transpose[valid-out_padding2-strides2] ______________

padding = 'valid', out_padding = (0, 0), strides = (1, 1)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_____________ test_conv2d_transpose[valid-out_padding3-strides3] ______________

padding = 'valid', out_padding = (0, 0), strides = (2, 2)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_____________ test_conv2d_transpose[valid-out_padding4-strides4] ______________

padding = 'valid', out_padding = (1, 1), strides = (2, 2)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = 1, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
__________________ test_conv2d_transpose[same-None-strides5] __________________

padding = 'same', out_padding = None, strides = (1, 1)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______________ test_conv2d_transpose[same-out_padding6-strides6] ______________

padding = 'same', out_padding = (0, 0), strides = (1, 1)

    @pytest.mark.parametrize(
        'padding,out_padding,strides',
        [(padding, out_padding, strides)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0), (1, 1)]
         for strides in [(1, 1), (2, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not(strides == (1, 1) and out_padding == (1, 1)))]
    )
    def test_conv2d_transpose(padding, out_padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'output_padding': out_padding,
                           'strides': strides,
                           'data_format': 'channels_last'},
                   input_shape=(num_samples, num_row, num_col, stack_size),
>                  fixed_batch_size=True)

convolutional_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_______________________ test_conv2d_transpose_dilation ________________________

    @pytest.mark.skipif((K.backend() == 'cntk' and load_backend.dev.type() == 0),
                        reason='cntk only supports dilated conv transpose on GPU')
    def test_conv2d_transpose_dilation():
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': 2,
                           'kernel_size': 3,
                           'padding': 'same',
                           'data_format': 'channels_last',
                           'dilation_rate': (2, 2)},
>                  input_shape=(2, 5, 6, 3))

convolutional_test.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 2

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
____________________ test_conv2d_transpose_channels_first _____________________

    def test_conv2d_transpose_channels_first():
        num_samples = 2
        filters = 2
        stack_size = 3
        num_row = 5
        num_col = 6
        padding = 'valid'
        strides = (2, 2)
    
        layer_test(convolutional.Conv2DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'data_format': 'channels_first',
                           'activation': None,
                           'kernel_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'kernel_constraint': 'max_norm',
                           'bias_constraint': 'max_norm',
                           'strides': strides},
                   input_shape=(num_samples, stack_size, num_row, num_col),
>                  fixed_batch_size=True)

convolutional_test.py:268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:879: in compute_output_shape
    self.dilation_rate[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_____________________ test_separable_conv_1d[valid-1-1-1] _____________________

padding = 'valid', strides = 1, multiplier = 1, dilation_rate = 1

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[valid-1-1-2] _____________________

padding = 'valid', strides = 1, multiplier = 1, dilation_rate = 2

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[valid-1-2-1] _____________________

padding = 'valid', strides = 1, multiplier = 2, dilation_rate = 1

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[valid-1-2-2] _____________________

padding = 'valid', strides = 1, multiplier = 2, dilation_rate = 2

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[valid-2-1-1] _____________________

padding = 'valid', strides = 2, multiplier = 1, dilation_rate = 1

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[valid-2-2-1] _____________________

padding = 'valid', strides = 2, multiplier = 2, dilation_rate = 1

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[same-1-1-1] ______________________

padding = 'same', strides = 1, multiplier = 1, dilation_rate = 1

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[same-1-1-2] ______________________

padding = 'same', strides = 1, multiplier = 1, dilation_rate = 2

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[same-1-2-1] ______________________

padding = 'same', strides = 1, multiplier = 2, dilation_rate = 1

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_separable_conv_1d[same-1-2-2] ______________________

padding = 'same', strides = 1, multiplier = 2, dilation_rate = 2

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [1, 2]
         for multiplier in [1, 2]
         for dilation_rate in [1, 2]
         if (not (padding == 'same' and strides != 1)
             and not (dilation_rate != 1 and strides != 1)
             and not (dilation_rate != 1 and K.backend() == 'cntk'))]
    )
    def test_separable_conv_1d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
>                  input_shape=(num_samples, num_step, stack_size))

convolutional_test.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________________ test_separable_conv_1d_additional_args ____________________

    def test_separable_conv_1d_additional_args():
        num_samples = 2
        filters = 6
        stack_size = 3
        num_step = 9
        padding = 'valid'
        multiplier = 2
    
        layer_test(convolutional.SeparableConv1D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'data_format': 'channels_first',
                           'activation': None,
                           'depthwise_regularizer': 'l2',
                           'pointwise_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'pointwise_constraint': 'unit_norm',
                           'depthwise_constraint': 'unit_norm',
                           'strides': 1,
                           'use_bias': True,
                           'depth_multiplier': multiplier},
>                  input_shape=(num_samples, stack_size, num_step))

convolutional_test.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides0-1-dilation_rate0] ___________

padding = 'valid', strides = (1, 1), multiplier = 1, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides1-1-dilation_rate1] ___________

padding = 'valid', strides = (1, 1), multiplier = 1, dilation_rate = (2, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides2-1-dilation_rate2] ___________

padding = 'valid', strides = (1, 1), multiplier = 1, dilation_rate = (2, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides3-2-dilation_rate3] ___________

padding = 'valid', strides = (1, 1), multiplier = 2, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides4-2-dilation_rate4] ___________

padding = 'valid', strides = (1, 1), multiplier = 2, dilation_rate = (1, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides5-1-dilation_rate5] ___________

padding = 'valid', strides = (2, 2), multiplier = 1, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[valid-strides6-2-dilation_rate6] ___________

padding = 'valid', strides = (2, 2), multiplier = 2, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[same-strides7-1-dilation_rate7] ____________

padding = 'same', strides = (1, 1), multiplier = 1, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[same-strides8-1-dilation_rate8] ____________

padding = 'same', strides = (1, 1), multiplier = 1, dilation_rate = (2, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_separable_conv_2d[same-strides9-1-dilation_rate9] ____________

padding = 'same', strides = (1, 1), multiplier = 1, dilation_rate = (2, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
__________ test_separable_conv_2d[same-strides10-2-dilation_rate10] ___________

padding = 'same', strides = (1, 1), multiplier = 2, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
__________ test_separable_conv_2d[same-strides11-2-dilation_rate11] ___________

padding = 'same', strides = (1, 1), multiplier = 2, dilation_rate = (1, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_separable_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(
            convolutional.SeparableConv2D,
            kwargs={'filters': filters,
                    'kernel_size': (3, 3),
                    'padding': padding,
                    'strides': strides,
                    'depth_multiplier': multiplier,
                    'dilation_rate': dilation_rate},
>           input_shape=(num_samples, num_row, num_col, stack_size))

convolutional_test.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________________ test_separable_conv_2d_additional_args ____________________

    def test_separable_conv_2d_additional_args():
        num_samples = 2
        filters = 6
        stack_size = 3
        num_row = 7
        num_col = 6
        padding = 'valid'
        strides = (2, 2)
        multiplier = 2
    
        layer_test(convolutional.SeparableConv2D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'data_format': 'channels_first',
                           'activation': None,
                           'depthwise_regularizer': 'l2',
                           'pointwise_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'pointwise_constraint': 'unit_norm',
                           'depthwise_constraint': 'unit_norm',
                           'strides': strides,
                           'depth_multiplier': multiplier},
>                  input_shape=(num_samples, stack_size, num_row, num_col))

convolutional_test.py:423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides0-1-dilation_rate0] ___________

padding = 'valid', strides = (1, 1), multiplier = 1, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides1-1-dilation_rate1] ___________

padding = 'valid', strides = (1, 1), multiplier = 1, dilation_rate = (2, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides2-1-dilation_rate2] ___________

padding = 'valid', strides = (1, 1), multiplier = 1, dilation_rate = (2, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides3-2-dilation_rate3] ___________

padding = 'valid', strides = (1, 1), multiplier = 2, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides4-2-dilation_rate4] ___________

padding = 'valid', strides = (1, 1), multiplier = 2, dilation_rate = (1, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides5-1-dilation_rate5] ___________

padding = 'valid', strides = (2, 2), multiplier = 1, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[valid-strides6-2-dilation_rate6] ___________

padding = 'valid', strides = (2, 2), multiplier = 2, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[same-strides7-1-dilation_rate7] ____________

padding = 'same', strides = (1, 1), multiplier = 1, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[same-strides8-1-dilation_rate8] ____________

padding = 'same', strides = (1, 1), multiplier = 1, dilation_rate = (2, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________ test_depthwise_conv_2d[same-strides9-1-dilation_rate9] ____________

padding = 'same', strides = (1, 1), multiplier = 1, dilation_rate = (2, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 2

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
__________ test_depthwise_conv_2d[same-strides10-2-dilation_rate10] ___________

padding = 'same', strides = (1, 1), multiplier = 2, dilation_rate = (1, 1)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
__________ test_depthwise_conv_2d[same-strides11-2-dilation_rate11] ___________

padding = 'same', strides = (1, 1), multiplier = 2, dilation_rate = (1, 2)

    @pytest.mark.parametrize(
        'padding,strides,multiplier,dilation_rate',
        [(padding, strides, multiplier, dilation_rate)
         for padding in _convolution_paddings
         for strides in [(1, 1), (2, 2)]
         for multiplier in [1, 2]
         for dilation_rate in [(1, 1), (2, 2), (2, 1), (1, 2)]
         if (not (padding == 'same' and strides != (1, 1))
             and not (dilation_rate != (1, 1) and strides != (1, 1))
             and not (dilation_rate != (1, 1) and multiplier == dilation_rate[0])
             and not (dilation_rate != (1, 1) and K.backend() == 'cntk'))]
    )
    def test_depthwise_conv_2d(padding, strides, multiplier, dilation_rate):
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': (3, 3),
                           'padding': padding,
                           'strides': strides,
                           'depth_multiplier': multiplier,
                           'dilation_rate': dilation_rate},
                   input_shape=(num_samples,
                                num_row,
                                num_col,
>                               stack_size))

convolutional_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________________ test_depthwise_conv_2d_additional_args ____________________

    def test_depthwise_conv_2d_additional_args():
        num_samples = 2
        stack_size = 3
        num_row = 7
        num_col = 6
        padding = 'valid'
        strides = (2, 2)
        multiplier = 2
    
        layer_test(convolutional.DepthwiseConv2D,
                   kwargs={'kernel_size': 3,
                           'padding': padding,
                           'data_format': 'channels_first',
                           'activation': None,
                           'depthwise_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'depthwise_constraint': 'unit_norm',
                           'use_bias': True,
                           'strides': strides,
                           'depth_multiplier': multiplier},
>                  input_shape=(num_samples, stack_size, num_row, num_col))

convolutional_test.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1877: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 7, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_3d[valid-strides0] _____________________

padding = 'valid', strides = (1, 1, 1)

    @pytest.mark.parametrize(
        'padding,strides',
        [(padding, strides)
         for padding in _convolution_paddings
         for strides in [(1, 1, 1), (2, 2, 2)]
         if not (padding == 'same' and strides != (1, 1, 1))]
    )
    def test_convolution_3d(padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
    
        input_len_dim1 = 9
        input_len_dim2 = 8
        input_len_dim3 = 8
    
        layer_test(convolutional.Convolution3D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides},
                   input_shape=(num_samples,
                                input_len_dim1, input_len_dim2, input_len_dim3,
>                               stack_size))

convolutional_test.py:521: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_3d[valid-strides1] _____________________

padding = 'valid', strides = (2, 2, 2)

    @pytest.mark.parametrize(
        'padding,strides',
        [(padding, strides)
         for padding in _convolution_paddings
         for strides in [(1, 1, 1), (2, 2, 2)]
         if not (padding == 'same' and strides != (1, 1, 1))]
    )
    def test_convolution_3d(padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
    
        input_len_dim1 = 9
        input_len_dim2 = 8
        input_len_dim3 = 8
    
        layer_test(convolutional.Convolution3D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides},
                   input_shape=(num_samples,
                                input_len_dim1, input_len_dim2, input_len_dim3,
>                               stack_size))

convolutional_test.py:521: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_3d[same-strides2] ______________________

padding = 'same', strides = (1, 1, 1)

    @pytest.mark.parametrize(
        'padding,strides',
        [(padding, strides)
         for padding in _convolution_paddings
         for strides in [(1, 1, 1), (2, 2, 2)]
         if not (padding == 'same' and strides != (1, 1, 1))]
    )
    def test_convolution_3d(padding, strides):
        num_samples = 2
        filters = 2
        stack_size = 3
    
        input_len_dim1 = 9
        input_len_dim2 = 8
        input_len_dim3 = 8
    
        layer_test(convolutional.Convolution3D,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'strides': strides},
                   input_shape=(num_samples,
                                input_len_dim1, input_len_dim2, input_len_dim3,
>                               stack_size))

convolutional_test.py:521: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
_____________________ test_convolution_3d_additional_args _____________________

    def test_convolution_3d_additional_args():
        num_samples = 2
        filters = 2
        stack_size = 3
        padding = 'valid'
        strides = (2, 2, 2)
    
        input_len_dim1 = 9
        input_len_dim2 = 8
        input_len_dim3 = 8
    
        layer_test(convolutional.Convolution3D,
                   kwargs={'filters': filters,
                           'kernel_size': (1, 2, 3),
                           'padding': padding,
                           'activation': None,
                           'kernel_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'kernel_constraint': 'max_norm',
                           'bias_constraint': 'max_norm',
                           'strides': strides},
                   input_shape=(num_samples,
                                input_len_dim1, input_len_dim2, input_len_dim3,
>                               stack_size))

convolutional_test.py:548: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 9, filter_size = 1, padding = None, stride = 2, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
__________ test_conv3d_transpose[valid-None-strides0-channels_first] __________

padding = 'valid', out_padding = None, strides = (1, 1, 1)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
__________ test_conv3d_transpose[valid-None-strides1-channels_last] ___________

padding = 'valid', out_padding = None, strides = (1, 1, 1)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
__________ test_conv3d_transpose[valid-None-strides2-channels_first] __________

padding = 'valid', out_padding = None, strides = (2, 2, 2)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
__________ test_conv3d_transpose[valid-None-strides3-channels_last] ___________

padding = 'valid', out_padding = None, strides = (2, 2, 2)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 2, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[valid-out_padding4-strides4-channels_first] ______

padding = 'valid', out_padding = (0, 0, 0), strides = (1, 1, 1)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[valid-out_padding5-strides5-channels_last] _______

padding = 'valid', out_padding = (0, 0, 0), strides = (1, 1, 1)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 1, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[valid-out_padding6-strides6-channels_first] ______

padding = 'valid', out_padding = (0, 0, 0), strides = (2, 2, 2)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[valid-out_padding7-strides7-channels_last] _______

padding = 'valid', out_padding = (0, 0, 0), strides = (2, 2, 2)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 2, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[valid-out_padding8-strides8-channels_first] ______

padding = 'valid', out_padding = (1, 1, 1), strides = (2, 2, 2)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 2, kernel_size = 3, padding = None
output_padding = 1, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[valid-out_padding9-strides9-channels_last] _______

padding = 'valid', out_padding = (1, 1, 1), strides = (2, 2, 2)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 2, kernel_size = 3, padding = None
output_padding = 1, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
__________ test_conv3d_transpose[same-None-strides10-channels_first] __________

padding = 'same', out_padding = None, strides = (1, 1, 1)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
__________ test_conv3d_transpose[same-None-strides11-channels_last] ___________

padding = 'same', out_padding = None, strides = (1, 1, 1)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 1, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
_____ test_conv3d_transpose[same-out_padding12-strides12-channels_first] ______

padding = 'same', out_padding = (0, 0, 0), strides = (1, 1, 1)
data_format = 'channels_first'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 5, stride_size = 1, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
______ test_conv3d_transpose[same-out_padding13-strides13-channels_last] ______

padding = 'same', out_padding = (0, 0, 0), strides = (1, 1, 1)
data_format = 'channels_last'

    @pytest.mark.parametrize(
        'padding,out_padding,strides,data_format',
        [(padding, out_padding, strides, data_format)
         for padding in _convolution_paddings
         for out_padding in [None, (0, 0, 0), (1, 1, 1)]
         for strides in [(1, 1, 1), (2, 2, 2)]
         for data_format in ['channels_first', 'channels_last']
         if (not (padding == 'same' and strides != (1, 1, 1))
             and not (strides == (1, 1, 1) and out_padding == (1, 1, 1)))]
    )
    def test_conv3d_transpose(padding, out_padding, strides, data_format):
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
    
        layer_test(
            convolutional.Conv3DTranspose,
            kwargs={'filters': filters,
                    'kernel_size': 3,
                    'padding': padding,
                    'output_padding': out_padding,
                    'strides': strides,
                    'data_format': data_format},
            input_shape=(None, num_depth, num_row, num_col, stack_size),
>           fixed_batch_size=True)

convolutional_test.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 1, kernel_size = 3, padding = None
output_padding = 0, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
____________________ test_conv3d_transpose_additional_args ____________________

    def test_conv3d_transpose_additional_args():
        filters = 2
        stack_size = 3
        num_depth = 7
        num_row = 5
        num_col = 6
        padding = 'valid'
        strides = (2, 2, 2)
    
        layer_test(convolutional.Conv3DTranspose,
                   kwargs={'filters': filters,
                           'kernel_size': 3,
                           'padding': padding,
                           'data_format': 'channels_first',
                           'activation': None,
                           'kernel_regularizer': 'l2',
                           'bias_regularizer': 'l2',
                           'activity_regularizer': 'l2',
                           'kernel_constraint': 'max_norm',
                           'bias_constraint': 'max_norm',
                           'use_bias': True,
                           'strides': strides},
                   input_shape=(None, stack_size, num_depth, num_row, num_col),
>                  fixed_batch_size=True)

convolutional_test.py:603: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1156: in compute_output_shape
    out_pad_d)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dim_size = 7, stride_size = 2, kernel_size = 3, padding = None
output_padding = None, dilation = 1

    def deconv_length(dim_size, stride_size, kernel_size, padding,
                      output_padding, dilation=1):
        """Determines output length of a transposed convolution given input length.
    
        # Arguments
            dim_size: Integer, the input length.
            stride_size: Integer, the stride along the dimension of `dim_size`.
            kernel_size: Integer, the kernel size along the dimension of
                `dim_size`.
            padding: One of `"same"`, `"valid"`, `"full"`.
            output_padding: Integer, amount of padding along the output dimension,
                Can be set to `None` in which case the output length is inferred.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
>       assert padding in {'same', 'valid', 'full'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:155: AssertionError
___________________ test_conv_float64[input_shape0-Conv1D] ____________________

input_shape = (2, 4, 2)
conv_class = <class 'keras.layers.convolutional.Conv1D'>

    @pytest.mark.skipif((K.backend() == 'cntk'),
                        reason='CNTK does not support float64')
    @pytest.mark.parametrize(
        'input_shape,conv_class',
        [((2, 4, 2), convolutional.Conv1D),
         ((2, 4, 4, 2), convolutional.Conv2D),
         ((2, 4, 4, 4, 2), convolutional.Conv3D)]
    )
    def test_conv_float64(input_shape, conv_class):
        kernel_size = 3
        strides = 1
        filters = 3
        K.set_floatx('float64')
        layer_test(conv_class,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': 'valid',
                           'strides': strides},
>                  input_shape=input_shape)

convolutional_test.py:1138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 4, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________________ test_conv_float64[input_shape1-Conv2D] ____________________

input_shape = (2, 4, 4, 2)
conv_class = <class 'keras.layers.convolutional.Conv2D'>

    @pytest.mark.skipif((K.backend() == 'cntk'),
                        reason='CNTK does not support float64')
    @pytest.mark.parametrize(
        'input_shape,conv_class',
        [((2, 4, 2), convolutional.Conv1D),
         ((2, 4, 4, 2), convolutional.Conv2D),
         ((2, 4, 4, 4, 2), convolutional.Conv3D)]
    )
    def test_conv_float64(input_shape, conv_class):
        kernel_size = 3
        strides = 1
        filters = 3
        K.set_floatx('float64')
        layer_test(conv_class,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': 'valid',
                           'strides': strides},
>                  input_shape=input_shape)

convolutional_test.py:1138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 4, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
___________________ test_conv_float64[input_shape2-Conv3D] ____________________

input_shape = (2, 4, 4, 4, 2)
conv_class = <class 'keras.layers.convolutional.Conv3D'>

    @pytest.mark.skipif((K.backend() == 'cntk'),
                        reason='CNTK does not support float64')
    @pytest.mark.parametrize(
        'input_shape,conv_class',
        [((2, 4, 2), convolutional.Conv1D),
         ((2, 4, 4, 2), convolutional.Conv2D),
         ((2, 4, 4, 4, 2), convolutional.Conv3D)]
    )
    def test_conv_float64(input_shape, conv_class):
        kernel_size = 3
        strides = 1
        filters = 3
        K.set_floatx('float64')
        layer_test(conv_class,
                   kwargs={'filters': filters,
                           'kernel_size': kernel_size,
                           'padding': 'valid',
                           'strides': strides},
>                  input_shape=input_shape)

convolutional_test.py:1138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\test_utils.py:87: in layer_test
    expected_output_shape = layer.compute_output_shape(input_shape)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:203: in compute_output_shape
    dilation=self.dilation_rate[i])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_length = 4, filter_size = 3, padding = None, stride = 1, dilation = 1

    def conv_output_length(input_length, filter_size,
                           padding, stride, dilation=1):
        """Determines output length of a convolution given input length.
    
        # Arguments
            input_length: integer.
            filter_size: integer.
            padding: one of `"same"`, `"valid"`, `"full"`.
            stride: integer.
            dilation: dilation rate, integer.
    
        # Returns
            The output length (integer).
        """
        if input_length is None:
            return None
>       assert padding in {'same', 'valid', 'full', 'causal'}
E       AssertionError

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\conv_utils.py:101: AssertionError
=========================== short test summary info ===========================
FAILED convolutional_test.py::test_causal_dilated_conv[layer_kwargs0-4-expected_output0]
FAILED convolutional_test.py::test_causal_dilated_conv[layer_kwargs1-4-expected_output1]
FAILED convolutional_test.py::test_causal_dilated_conv[layer_kwargs2-10-expected_output2]
FAILED convolutional_test.py::test_conv_1d[valid-1] - AssertionError
FAILED convolutional_test.py::test_conv_1d[valid-2] - AssertionError
FAILED convolutional_test.py::test_conv_1d[same-1] - AssertionError
FAILED convolutional_test.py::test_conv_1d_dilation - AssertionError
FAILED convolutional_test.py::test_conv_1d_channels_first - AssertionError
FAILED convolutional_test.py::test_convolution_2d[strides0-valid] - Assertion...
FAILED convolutional_test.py::test_convolution_2d[strides1-valid] - Assertion...
FAILED convolutional_test.py::test_convolution_2d[strides2-same] - AssertionE...
FAILED convolutional_test.py::test_convolution_2d_channels_last - AssertionError
FAILED convolutional_test.py::test_convolution_2d_dilation - AssertionError
FAILED convolutional_test.py::test_conv2d_transpose[valid-None-strides0] - As...
FAILED convolutional_test.py::test_conv2d_transpose[valid-None-strides1] - As...
FAILED convolutional_test.py::test_conv2d_transpose[valid-out_padding2-strides2]
FAILED convolutional_test.py::test_conv2d_transpose[valid-out_padding3-strides3]
FAILED convolutional_test.py::test_conv2d_transpose[valid-out_padding4-strides4]
FAILED convolutional_test.py::test_conv2d_transpose[same-None-strides5] - Ass...
FAILED convolutional_test.py::test_conv2d_transpose[same-out_padding6-strides6]
FAILED convolutional_test.py::test_conv2d_transpose_dilation - AssertionError
FAILED convolutional_test.py::test_conv2d_transpose_channels_first - Assertio...
FAILED convolutional_test.py::test_separable_conv_1d[valid-1-1-1] - Assertion...
FAILED convolutional_test.py::test_separable_conv_1d[valid-1-1-2] - Assertion...
FAILED convolutional_test.py::test_separable_conv_1d[valid-1-2-1] - Assertion...
FAILED convolutional_test.py::test_separable_conv_1d[valid-1-2-2] - Assertion...
FAILED convolutional_test.py::test_separable_conv_1d[valid-2-1-1] - Assertion...
FAILED convolutional_test.py::test_separable_conv_1d[valid-2-2-1] - Assertion...
FAILED convolutional_test.py::test_separable_conv_1d[same-1-1-1] - AssertionE...
FAILED convolutional_test.py::test_separable_conv_1d[same-1-1-2] - AssertionE...
FAILED convolutional_test.py::test_separable_conv_1d[same-1-2-1] - AssertionE...
FAILED convolutional_test.py::test_separable_conv_1d[same-1-2-2] - AssertionE...
FAILED convolutional_test.py::test_separable_conv_1d_additional_args - Assert...
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides0-1-dilation_rate0]
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides1-1-dilation_rate1]
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides2-1-dilation_rate2]
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides3-2-dilation_rate3]
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides4-2-dilation_rate4]
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides5-1-dilation_rate5]
FAILED convolutional_test.py::test_separable_conv_2d[valid-strides6-2-dilation_rate6]
FAILED convolutional_test.py::test_separable_conv_2d[same-strides7-1-dilation_rate7]
FAILED convolutional_test.py::test_separable_conv_2d[same-strides8-1-dilation_rate8]
FAILED convolutional_test.py::test_separable_conv_2d[same-strides9-1-dilation_rate9]
FAILED convolutional_test.py::test_separable_conv_2d[same-strides10-2-dilation_rate10]
FAILED convolutional_test.py::test_separable_conv_2d[same-strides11-2-dilation_rate11]
FAILED convolutional_test.py::test_separable_conv_2d_additional_args - Assert...
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides0-1-dilation_rate0]
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides1-1-dilation_rate1]
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides2-1-dilation_rate2]
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides3-2-dilation_rate3]
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides4-2-dilation_rate4]
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides5-1-dilation_rate5]
FAILED convolutional_test.py::test_depthwise_conv_2d[valid-strides6-2-dilation_rate6]
FAILED convolutional_test.py::test_depthwise_conv_2d[same-strides7-1-dilation_rate7]
FAILED convolutional_test.py::test_depthwise_conv_2d[same-strides8-1-dilation_rate8]
FAILED convolutional_test.py::test_depthwise_conv_2d[same-strides9-1-dilation_rate9]
FAILED convolutional_test.py::test_depthwise_conv_2d[same-strides10-2-dilation_rate10]
FAILED convolutional_test.py::test_depthwise_conv_2d[same-strides11-2-dilation_rate11]
FAILED convolutional_test.py::test_depthwise_conv_2d_additional_args - Assert...
FAILED convolutional_test.py::test_convolution_3d[valid-strides0] - Assertion...
FAILED convolutional_test.py::test_convolution_3d[valid-strides1] - Assertion...
FAILED convolutional_test.py::test_convolution_3d[same-strides2] - AssertionE...
FAILED convolutional_test.py::test_convolution_3d_additional_args - Assertion...
FAILED convolutional_test.py::test_conv3d_transpose[valid-None-strides0-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[valid-None-strides1-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose[valid-None-strides2-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[valid-None-strides3-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose[valid-out_padding4-strides4-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[valid-out_padding5-strides5-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose[valid-out_padding6-strides6-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[valid-out_padding7-strides7-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose[valid-out_padding8-strides8-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[valid-out_padding9-strides9-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose[same-None-strides10-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[same-None-strides11-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose[same-out_padding12-strides12-channels_first]
FAILED convolutional_test.py::test_conv3d_transpose[same-out_padding13-strides13-channels_last]
FAILED convolutional_test.py::test_conv3d_transpose_additional_args - Asserti...
FAILED convolutional_test.py::test_conv_float64[input_shape0-Conv1D] - Assert...
FAILED convolutional_test.py::test_conv_float64[input_shape1-Conv2D] - Assert...
FAILED convolutional_test.py::test_conv_float64[input_shape2-Conv3D] - Assert...
======================= 81 failed, 29 passed in 11.26s ========================
