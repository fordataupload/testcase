2020-10-04 19:45:50.662700: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\engine
plugins: flaky-3.7.0
collected 34 items

test_training.py .......s..............F....F.FFFFF                      [100%]

================================== FAILURES ===================================
_____________ test_model_with_crossentropy_losses_channels_first ______________

    def test_model_with_crossentropy_losses_channels_first():
        """Tests use of all crossentropy losses with `channels_first`.
    
        Tests `sparse_categorical_crossentropy`, `categorical_crossentropy`,
        and `binary_crossentropy`.
        Verifies that evaluate gives the same result with either
        `channels_first` or `channels_last` image_data_format.
        Tests PR #9715.
        """
    
        def prepare_simple_model(input_tensor, loss_name, target):
            axis = 1 if K.image_data_format() == 'channels_first' else -1
            if loss_name == 'sparse_categorical_crossentropy':
                loss = lambda y_true, y_pred: K.sparse_categorical_crossentropy(
                    y_true, y_pred, axis=axis)
                num_channels = np.amax(target) + 1
                activation = 'softmax'
            elif loss_name == 'categorical_crossentropy':
                loss = lambda y_true, y_pred: K.categorical_crossentropy(
                    y_true, y_pred, axis=axis)
                num_channels = target.shape[axis]
                activation = 'softmax'
            elif loss_name == 'binary_crossentropy':
                loss = lambda y_true, y_pred: K.binary_crossentropy(y_true, y_pred)
                num_channels = target.shape[axis]
                activation = 'sigmoid'
            predictions = Conv2D(num_channels, 1, activation=activation,
                                 kernel_initializer='ones',
                                 bias_initializer='ones')(input_tensor)
            simple_model = Model(inputs=input_tensor, outputs=predictions)
            simple_model.compile(optimizer='rmsprop', loss=loss)
            return simple_model
    
        losses_to_test = ['sparse_categorical_crossentropy',
                          'categorical_crossentropy', 'binary_crossentropy']
    
        data_channels_first = np.array([[[[8., 7.1, 0.], [4.5, 2.6, 0.55],
                                          [0.9, 4.2, 11.2]]]], dtype=np.float32)
        # Labels for testing 4-class sparse_categorical_crossentropy, 4-class
        # categorical_crossentropy, and 2-class binary_crossentropy:
        labels_channels_first = [np.array([[[[0, 1, 3], [2, 1, 0], [2, 2, 1]]]]),
                                 np.array([[[[0, 1, 0], [0, 1, 0], [0, 0, 0]],
                                            [[1, 0, 0], [0, 0, 1], [0, 1, 0]],
                                            [[0, 0, 0], [1, 0, 0], [0, 0, 1]],
                                            [[0, 0, 1], [0, 0, 0], [1, 0, 0]]]]),
                                 np.array([[[[0, 1, 0], [0, 1, 0], [0, 0, 1]],
                                            [[1, 0, 1], [1, 0, 1], [1, 1, 0]]]])]
        # Compute one loss for each loss function in the list `losses_to_test`:
        loss_channels_last = [0., 0., 0.]
        loss_channels_first = [0., 0., 0.]
    
        old_data_format = K.image_data_format()
    
        # Evaluate a simple network with channels last, with all three loss
        # functions:
        K.set_image_data_format('channels_last')
        data = np.moveaxis(data_channels_first, 1, -1)
        for index, loss_function in enumerate(losses_to_test):
            labels = np.moveaxis(labels_channels_first[index], 1, -1)
            inputs = Input(shape=(3, 3, 1))
>           model = prepare_simple_model(inputs, loss_function, labels)

test_training.py:1614: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_training.py:1582: in prepare_simple_model
    bias_initializer='ones')(input_tensor)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:484: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:117: in __init__
    self.kernel_initializer = initializers.get(kernel_initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
___________________________ test_model_metrics_list ___________________________

    def test_model_metrics_list():
    
        class LayerWithAddMetric(Layer):
    
            def __init__(self):
                super(LayerWithAddMetric, self).__init__()
                self.dense = keras.layers.Dense(1, kernel_initializer='ones')
    
            def __call__(self, inputs):
                outputs = self.dense(inputs)
                return outputs
    
        class LayerWithNestedAddMetricLayer(Layer):
    
            def __init__(self):
                super(LayerWithNestedAddMetricLayer, self).__init__()
                self.layer = LayerWithAddMetric()
    
            def call(self, inputs):
                outputs = self.layer(inputs)
                self.add_metric(K.sum(outputs), name='metric_4')
                return outputs
    
        x = Input(shape=(1,))
>       y = LayerWithNestedAddMetricLayer()(x)

test_training.py:1781: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_training.py:1773: in __init__
    self.layer = LayerWithAddMetric()
test_training.py:1763: in __init__
    self.dense = keras.layers.Dense(1, kernel_initializer='ones')
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:877: in __init__
    self.kernel_initializer = initializers.get(kernel_initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
__________________ test_duplicate_metric_name_in_add_metric ___________________

    def test_duplicate_metric_name_in_add_metric():
    
        class TestModel(Model):
    
            def __init__(self):
                super(TestModel, self).__init__(name='test_model')
                self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
                self.mean = metrics.Mean(name='metric_1')
                self.mean2 = metrics.Mean(name='metric_1')
    
            def call(self, x):
                self.add_metric(self.mean(x), name='metric_1')
                return self.dense1(x)
    
>       model = TestModel()

test_training.py:1849: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_training.py:1841: in __init__
    self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:877: in __init__
    self.kernel_initializer = initializers.get(kernel_initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
__________________________ test_add_metric_on_model ___________________________

    def test_add_metric_on_model():
        x = Input(shape=(1,))
>       y = Dense(1, kernel_initializer='ones', trainable=False)(x)

test_training.py:1860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:877: in __init__
    self.kernel_initializer = initializers.get(kernel_initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
________________________ test_add_metric_in_model_call ________________________

    def test_add_metric_in_model_call():
    
        class TestModel(Model):
    
            def __init__(self):
                super(TestModel, self).__init__(name='test_model')
                self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
                self.mean = metrics.Mean(name='metric_1')
    
            def call(self, x):
                self.add_metric(K.sum(x), name='metric_2')
                # Provide same name as in the instance created in __init__
                # for eager mode
                self.add_metric(self.mean(x), name='metric_1')
                return self.dense1(x)
    
>       model = TestModel()

test_training.py:1905: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_training.py:1895: in __init__
    self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:877: in __init__
    self.kernel_initializer = initializers.get(kernel_initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
_______________________ test_multiple_add_metric_calls ________________________

    def test_multiple_add_metric_calls():
    
        class TestModel(Model):
    
            def __init__(self):
                super(TestModel, self).__init__(name='test_model')
                self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
                self.mean1 = metrics.Mean(name='metric_1')
                self.mean2 = metrics.Mean(name='metric_2')
    
            def call(self, x):
                self.add_metric(self.mean2(x), name='metric_2')
                self.add_metric(self.mean1(x), name='metric_1')
                self.add_metric(K.sum(x), name='metric_3')
                return self.dense1(x)
    
>       model = TestModel()

test_training.py:1941: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_training.py:1931: in __init__
    self.dense1 = keras.layers.Dense(2, kernel_initializer='ones')
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:877: in __init__
    self.kernel_initializer = initializers.get(kernel_initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
________________________ test_add_metric_in_layer_call ________________________

    def test_add_metric_in_layer_call():
    
        class TestLayer(Layer):
    
            def build(self, input_shape):
                self.a = self.add_weight(
                    'a', (1, 1), initializer='ones', trainable=False)
                self.built = True
    
            def call(self, inputs):
                self.add_metric(K.sum(inputs), name='metric_1')
                return inputs + 1
    
        inp = Input(shape=(1,))
>       x = TestLayer(input_shape=(1,))(inp)

test_training.py:1973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\base_layer.py:463: in __call__
    self.build(unpack_singleton(input_shapes))
test_training.py:1965: in build
    'a', (1, 1), initializer='ones', trainable=False)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\base_layer.py:276: in add_weight
    initializer = initializers.get(initializer)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:518: in get
    return deserialize(config)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:510: in deserialize
    printable_module_name='initializer')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = {'class_name': 'ones', 'config': {}}
module_objects = {'Constant': <class 'keras.initializers.Constant'>, 'Identity': <class 'keras.initializers.Identity'>, 'Initializer': ... 'keras.backend' from 'C:\\ProgramData\\Anaconda3\\envs\\keras\\lib\\site-packages\\keras\\backend\\__init__.py'>, ...}
custom_objects = None, printable_module_name = 'initializer'

    def deserialize_keras_object(identifier, module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
        if identifier is None:
            return None
        if isinstance(identifier, dict):
            # In this case we are dealing with a Keras config dictionary.
            config = identifier
            if 'class_name' not in config or 'config' not in config:
                raise ValueError('Improper config format: ' + str(config))
            class_name = config['class_name']
            if custom_objects and class_name in custom_objects:
                cls = custom_objects[class_name]
            elif class_name in _GLOBAL_CUSTOM_OBJECTS:
                cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
            else:
                module_objects = module_objects or {}
                cls = module_objects.get(class_name)
                if cls is None:
                    raise ValueError('Unknown ' + printable_module_name +
>                                    ': ' + class_name)
E                   ValueError: Unknown initializer: ones

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\utils\generic_utils.py:140: ValueError
============================== warnings summary ===============================
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\_pytest\config\__init__.py:1040
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\_pytest\config\__init__.py:1040: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: flaky
    self._mark_plugins_for_rewrite(hook)

test_training.py::test_model_methods
test_training.py::test_model_with_partial_loss
test_training.py::test_model_with_external_loss
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output dense_1 missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to dense_1.
    'be expecting any data to be passed to {0}.'.format(name))

test_training.py::test_model_methods
test_training.py::test_model_with_external_loss
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output dropout missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to dropout.
    'be expecting any data to be passed to {0}.'.format(name))

test_training.py::test_model_with_external_loss
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\engine\training_utils.py:819: UserWarning: Output dense_2 missing from loss dictionary. We assume this was done on purpose. The fit and evaluate APIs will not be expecting any data to be passed to dense_2.
    'be expecting any data to be passed to {0}.'.format(name))

-- Docs: https://docs.pytest.org/en/stable/warnings.html
===Flaky Test Report===

test_model_methods passed 1 out of the required 1 times. Success!
test_fit_generator passed 1 out of the required 1 times. Success!

===End Flaky Test Report===
=========================== short test summary info ===========================
FAILED test_training.py::test_model_with_crossentropy_losses_channels_first
FAILED test_training.py::test_model_metrics_list - ValueError: Unknown initia...
FAILED test_training.py::test_duplicate_metric_name_in_add_metric - ValueErro...
FAILED test_training.py::test_add_metric_on_model - ValueError: Unknown initi...
FAILED test_training.py::test_add_metric_in_model_call - ValueError: Unknown ...
FAILED test_training.py::test_multiple_add_metric_calls - ValueError: Unknown...
FAILED test_training.py::test_add_metric_in_layer_call - ValueError: Unknown ...
============ 7 failed, 26 passed, 1 skipped, 7 warnings in 26.52s =============
