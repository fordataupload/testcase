2020-10-03 14:53:01.335417: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras
plugins: flaky-3.7.0
collected 111 items

losses_test.py ..........................F..F........................... [ 51%]
......................................................                   [100%]

================================== FAILURES ===================================
_____________________ TestLossFunctions.test_cce_one_hot ______________________

self = <losses_test.TestLossFunctions object at 0x000001CB96ADF4A8>

    def test_cce_one_hot(self):
        y_a = K.variable(np.random.randint(0, 7, (5, 6)))
        y_b = K.variable(np.random.random((5, 6, 7)))
>       objective_output = losses.sparse_categorical_crossentropy(y_a, y_b)

losses_test.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\losses.py:696: in sparse_categorical_crossentropy
    y_true, y_pred, from_logits=from_logits, axis=axis)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:3409: in sparse_categorical_crossentropy
    target, output, from_logits=from_logits, axis=axis)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\keras\backend.py:4442: in sparse_categorical_crossentropy
    labels=target, logits=output)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\nn_ops.py:3477: in sparse_softmax_cross_entropy_with_logits_v2
    labels=labels, logits=logits, name=name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

_sentinel = None, labels = <tf.Tensor 'Cast:0' shape=(5, 6) dtype=int64>
logits = <tf.Tensor 'transpose:0' shape=(5, 7, 6) dtype=float32>, name = None

    @tf_export(v1=["nn.sparse_softmax_cross_entropy_with_logits"])
    def sparse_softmax_cross_entropy_with_logits(
        _sentinel=None,  # pylint: disable=invalid-name
        labels=None,
        logits=None,
        name=None):
      """Computes sparse softmax cross entropy between `logits` and `labels`.
    
      Measures the probability error in discrete classification tasks in which the
      classes are mutually exclusive (each entry is in exactly one class).  For
      example, each CIFAR-10 image is labeled with one and only one label: an image
      can be a dog or a truck, but not both.
    
      **NOTE:**  For this operation, the probability of a given label is considered
      exclusive.  That is, soft classes are not allowed, and the `labels` vector
      must provide a single specific index for the true class for each row of
      `logits` (each minibatch entry).  For soft softmax classification with
      a probability distribution for each entry, see
      `softmax_cross_entropy_with_logits_v2`.
    
      **WARNING:** This op expects unscaled logits, since it performs a `softmax`
      on `logits` internally for efficiency.  Do not call this op with the
      output of `softmax`, as it will produce incorrect results.
    
      A common use case is to have logits of shape
      `[batch_size, num_classes]` and have labels of shape
      `[batch_size]`, but higher dimensions are supported, in which
      case the `dim`-th dimension is assumed to be of size `num_classes`.
      `logits` must have the dtype of `float16`, `float32`, or `float64`, and
      `labels` must have the dtype of `int32` or `int64`.
    
      **Note that to avoid confusion, it is required to pass only named arguments to
      this function.**
    
      Args:
        _sentinel: Used to prevent positional parameters. Internal, do not use.
        labels: `Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of
          `labels` and result) and dtype `int32` or `int64`. Each entry in `labels`
          must be an index in `[0, num_classes)`. Other values will raise an
          exception when this op is run on CPU, and return `NaN` for corresponding
          loss and gradient rows on GPU.
        logits: Per-label activations (typically a linear output) of shape
          `[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or
          `float64`. These activation energies are interpreted as unnormalized log
          probabilities.
        name: A name for the operation (optional).
    
      Returns:
        A `Tensor` of the same shape as `labels` and of the same type as `logits`
        with the softmax cross entropy loss.
    
      Raises:
        ValueError: If logits are scalars (need to have rank >= 1) or if the rank
          of the labels is not equal to the rank of the logits minus one.
      """
      _ensure_xent_args("sparse_softmax_cross_entropy_with_logits", _sentinel,
                        labels, logits)
    
      # TODO(pcmurray) Raise an error when the label is not an index in
      # [0, num_classes). Note: This could break users who call this with bad
      # labels, but disregard the bad results.
    
      # Reshape logits and labels to rank 2.
      with ops.name_scope(name, "SparseSoftmaxCrossEntropyWithLogits",
                          [labels, logits]):
        labels = ops.convert_to_tensor(labels)
        logits = ops.convert_to_tensor(logits)
        precise_logits = math_ops.cast(logits, dtypes.float32) if (dtypes.as_dtype(
            logits.dtype) == dtypes.float16) else logits
    
        # Store label shape for result later.
        labels_static_shape = labels.get_shape()
        labels_shape = array_ops.shape(labels)
        static_shapes_fully_defined = (
            labels_static_shape.is_fully_defined() and
            logits.get_shape()[:-1].is_fully_defined())
        if logits.get_shape().ndims is not None and logits.get_shape().ndims == 0:
          raise ValueError(
              "Logits cannot be scalars - received shape %s." % logits.get_shape())
        if logits.get_shape().ndims is not None and (
            labels_static_shape.ndims is not None and
            labels_static_shape.ndims != logits.get_shape().ndims - 1):
          raise ValueError("Rank mismatch: Rank of labels (received %s) should "
                           "equal rank of logits minus 1 (received %s)." %
                           (labels_static_shape.ndims, logits.get_shape().ndims))
        if (static_shapes_fully_defined and
            labels_static_shape != logits.get_shape()[:-1]):
          raise ValueError("Shape mismatch: The shape of labels (received %s) "
                           "should equal the shape of logits except for the last "
                           "dimension (received %s)." % (labels_static_shape,
>                                                        logits.get_shape()))
E         ValueError: Shape mismatch: The shape of labels (received (5, 6)) should equal the shape of logits except for the last dimension (received (5, 7, 6)).

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\nn_ops.py:3393: ValueError
__________ TestLossFunctions.test_sparse_categorical_crossentropy_4d __________

self = <losses_test.TestLossFunctions object at 0x000001CB9CDEE3C8>

    def test_sparse_categorical_crossentropy_4d(self):
        y_pred = K.variable(np.array([[[[0.7, 0.1, 0.2],
                                        [0.0, 0.3, 0.7],
                                        [0.1, 0.1, 0.8]],
                                       [[0.3, 0.7, 0.0],
                                        [0.3, 0.4, 0.3],
                                        [0.2, 0.5, 0.3]],
                                       [[0.8, 0.1, 0.1],
                                        [1.0, 0.0, 0.0],
                                        [0.4, 0.3, 0.3]]]]))
        y_true = K.variable(np.array([[[0, 1, 0],
                                       [2, 1, 0],
                                       [2, 2, 1]]]))
        expected_loss = - (np.log(0.7) + np.log(0.3) + np.log(0.1) +
                           np.log(K.epsilon()) + np.log(0.4) + np.log(0.2) +
                           np.log(0.1) + np.log(K.epsilon()) + np.log(0.3)) / 9
        loss = K.eval(losses.sparse_categorical_crossentropy(y_true, y_pred))
>       assert np.isclose(expected_loss, np.mean(loss))
E       assert False
E        +  where False = <function isclose at 0x000001CBFE7C12F0>(4.6813011872004, 0.66428554)
E        +    where <function isclose at 0x000001CBFE7C12F0> = np.isclose
E        +    and   0.66428554 = <function mean at 0x000001CBFE7B0158>(array([[[0.94446164, 0.2513143 , 0.40546542],\n        [0.26236433, 0.5596159 , 0.35667506],\n        [0.5596158 , 1.0986123 , 1.5404451 ]]], dtype=float32))
E        +      where <function mean at 0x000001CBFE7B0158> = np.mean

losses_test.py:115: AssertionError
---------------------------- Captured stderr call -----------------------------
2020-10-03 14:53:08.805293: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-03 14:53:08.805870: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-03 14:53:08.806221: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-03 14:53:08.806566: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-03 14:53:08.806905: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-03 14:53:08.807254: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-03 14:53:08.807601: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-03 14:53:08.807951: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-03 14:53:08.808537: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-03 14:53:08.808853: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-03 14:53:08.809213: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-03 14:53:08.809438: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-03 14:53:08.809935: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
=========================== short test summary info ===========================
FAILED losses_test.py::TestLossFunctions::test_cce_one_hot - ValueError: Shap...
FAILED losses_test.py::TestLossFunctions::test_sparse_categorical_crossentropy_4d
======================== 2 failed, 109 passed in 8.89s ========================
