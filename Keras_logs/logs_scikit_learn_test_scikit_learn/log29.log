2020-10-04 19:31:09.015933: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\wrappers
plugins: flaky-3.7.0
collected 8 items

scikit_learn_test.py FFF.....                                            [100%]

================================== FAILURES ===================================
___________________________ test_classify_build_fn ____________________________

    def test_classify_build_fn():
        clf = KerasClassifier(
            build_fn=build_fn_clf, hidden_dims=hidden_dims,
            batch_size=batch_size, epochs=epochs)
    
>       assert_classification_works(clf)

scikit_learn_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:79: in assert_classification_works
    batch_size=batch_size, epochs=epochs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasClassifier object at 0x0000026E17C8AF98>
x = array([[ 2.6324728e+00,  2.0133002e+00,  1.6259085e+00,  9.5346230e-01,
         1.4475192e+00],
       [ 5.2059788e-0...e-01],
       [ 5.7617348e-01,  6.2468755e-01,  6.6934310e-02, -6.1937118e-01,
         2.0085888e-01]], dtype=float32)
y = array([2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 2, 2, 0, 2, 1, 0, 1, 1, 1, 1, 0, 0,
       1, 1, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 2,...1,
       1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 1, 2, 0,
       1, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0])
sample_weight = array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., ...1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
kwargs = {'batch_size': 32, 'epochs': 1}

    def fit(self, x, y, sample_weight=None, **kwargs):
        """Constructs a new model with `build_fn` & fit the model to `(x, y)`.
    
        # Arguments
            x : array-like, shape `(n_samples, n_features)`
                Training samples where `n_samples` is the number of samples
                and `n_features` is the number of features.
            y : array-like, shape `(n_samples,)` or `(n_samples, n_outputs)`
                True labels for `x`.
            **kwargs: dictionary arguments
                Legal arguments are the arguments of `Sequential.fit`
    
        # Returns
            history : object
                details about the training history at each epoch.
    
        # Raises
            ValueError: In case of invalid shape for `y` argument.
        """
        y = np.array(y)
        if len(y.shape) == 2 and y.shape[1] > 1:
            self.classes_ = np.arange(y.shape[1])
        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) != 1:
            self.classes_ = np.unique(y)
            y = np.searchsorted(self.classes_, y)
        else:
>           raise ValueError('Invalid shape for y: ' + str(y.shape))
E           ValueError: Invalid shape for y: (100,)

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:205: ValueError
________________________ test_classify_class_build_fn _________________________

    def test_classify_class_build_fn():
        class ClassBuildFnClf(object):
    
            def __call__(self, hidden_dims):
                return build_fn_clf(hidden_dims)
    
        clf = KerasClassifier(
            build_fn=ClassBuildFnClf(), hidden_dims=hidden_dims,
            batch_size=batch_size, epochs=epochs)
    
>       assert_classification_works(clf)

scikit_learn_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:79: in assert_classification_works
    batch_size=batch_size, epochs=epochs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasClassifier object at 0x0000026E1884C7F0>
x = array([[ 2.6324728e+00,  2.0133002e+00,  1.6259085e+00,  9.5346230e-01,
         1.4475192e+00],
       [ 5.2059788e-0...e-01],
       [ 5.7617348e-01,  6.2468755e-01,  6.6934310e-02, -6.1937118e-01,
         2.0085888e-01]], dtype=float32)
y = array([2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 2, 2, 0, 2, 1, 0, 1, 1, 1, 1, 0, 0,
       1, 1, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 2,...1,
       1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 1, 2, 0,
       1, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0])
sample_weight = array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., ...1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
kwargs = {'batch_size': 32, 'epochs': 1}

    def fit(self, x, y, sample_weight=None, **kwargs):
        """Constructs a new model with `build_fn` & fit the model to `(x, y)`.
    
        # Arguments
            x : array-like, shape `(n_samples, n_features)`
                Training samples where `n_samples` is the number of samples
                and `n_features` is the number of features.
            y : array-like, shape `(n_samples,)` or `(n_samples, n_outputs)`
                True labels for `x`.
            **kwargs: dictionary arguments
                Legal arguments are the arguments of `Sequential.fit`
    
        # Returns
            history : object
                details about the training history at each epoch.
    
        # Raises
            ValueError: In case of invalid shape for `y` argument.
        """
        y = np.array(y)
        if len(y.shape) == 2 and y.shape[1] > 1:
            self.classes_ = np.arange(y.shape[1])
        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) != 1:
            self.classes_ = np.unique(y)
            y = np.searchsorted(self.classes_, y)
        else:
>           raise ValueError('Invalid shape for y: ' + str(y.shape))
E           ValueError: Invalid shape for y: (100,)

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:205: ValueError
____________________ test_classify_inherit_class_build_fn _____________________

    def test_classify_inherit_class_build_fn():
        class InheritClassBuildFnClf(KerasClassifier):
    
            def __call__(self, hidden_dims):
                return build_fn_clf(hidden_dims)
    
        clf = InheritClassBuildFnClf(
            build_fn=None, hidden_dims=hidden_dims,
            batch_size=batch_size, epochs=epochs)
    
>       assert_classification_works(clf)

scikit_learn_test.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:79: in assert_classification_works
    batch_size=batch_size, epochs=epochs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scikit_learn_test.test_classify_inherit_class_build_fn.<locals>.InheritClassBuildFnClf object at 0x0000026E1998B048>
x = array([[ 2.6324728e+00,  2.0133002e+00,  1.6259085e+00,  9.5346230e-01,
         1.4475192e+00],
       [ 5.2059788e-0...e-01],
       [ 5.7617348e-01,  6.2468755e-01,  6.6934310e-02, -6.1937118e-01,
         2.0085888e-01]], dtype=float32)
y = array([2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 2, 2, 0, 2, 1, 0, 1, 1, 1, 1, 0, 0,
       1, 1, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 2,...1,
       1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 1, 2, 0,
       1, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0])
sample_weight = array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., ...1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
kwargs = {'batch_size': 32, 'epochs': 1}

    def fit(self, x, y, sample_weight=None, **kwargs):
        """Constructs a new model with `build_fn` & fit the model to `(x, y)`.
    
        # Arguments
            x : array-like, shape `(n_samples, n_features)`
                Training samples where `n_samples` is the number of samples
                and `n_features` is the number of features.
            y : array-like, shape `(n_samples,)` or `(n_samples, n_outputs)`
                True labels for `x`.
            **kwargs: dictionary arguments
                Legal arguments are the arguments of `Sequential.fit`
    
        # Returns
            history : object
                details about the training history at each epoch.
    
        # Raises
            ValueError: In case of invalid shape for `y` argument.
        """
        y = np.array(y)
        if len(y.shape) == 2 and y.shape[1] > 1:
            self.classes_ = np.arange(y.shape[1])
        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) != 1:
            self.classes_ = np.unique(y)
            y = np.searchsorted(self.classes_, y)
        else:
>           raise ValueError('Invalid shape for y: ' + str(y.shape))
E           ValueError: Invalid shape for y: (100,)

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:205: ValueError
=========================== short test summary info ===========================
FAILED scikit_learn_test.py::test_classify_build_fn - ValueError: Invalid sha...
FAILED scikit_learn_test.py::test_classify_class_build_fn - ValueError: Inval...
FAILED scikit_learn_test.py::test_classify_inherit_class_build_fn - ValueErro...
========================= 3 failed, 5 passed in 5.67s =========================
