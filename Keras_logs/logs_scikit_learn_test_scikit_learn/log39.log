2020-10-04 19:33:03.370296: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\wrappers
plugins: flaky-3.7.0
collected 8 items

scikit_learn_test.py FFF.....                                            [100%]

================================== FAILURES ===================================
___________________________ test_classify_build_fn ____________________________

    def test_classify_build_fn():
        clf = KerasClassifier(
            build_fn=build_fn_clf, hidden_dims=hidden_dims,
            batch_size=batch_size, epochs=epochs)
    
>       assert_classification_works(clf)

scikit_learn_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:89: in assert_classification_works
    proba = clf.predict_proba(X_test, batch_size=batch_size)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasClassifier object at 0x000001ED95BD55F8>
x = array([[ 2.11563611e+00,  2.39825559e+00,  1.38763535e+00,
         1.71973896e+00,  2.35656476e+00],
       [ 2.87312...,
       [-4.64727849e-01,  8.16972017e-01,  1.13477600e+00,
        -1.09897220e+00,  5.17740734e-02]], dtype=float32)
kwargs = {'batch_size': 32}
probs = array([[0.30502737, 0.28808153, 0.4068911 ],
       [0.2975027 , 0.2787894 , 0.4237079 ],
       [0.33595338, 0.332382... 0.3626855 ],
       [0.347549  , 0.2849494 , 0.3675016 ],
       [0.40418527, 0.23136213, 0.3644526 ]], dtype=float32)

    def predict_proba(self, x, **kwargs):
        """Returns class probability estimates for the given test data.
    
        # Arguments
            x: array-like, shape `(n_samples, n_features)`
                Test samples where `n_samples` is the number of samples
                and `n_features` is the number of features.
            **kwargs: dictionary arguments
                Legal arguments are the arguments
                of `Sequential.predict_classes`.
    
        # Returns
            proba: array-like, shape `(n_samples, n_outputs)`
                Class probability estimates.
                In the case of binary classification,
                to match the scikit-learn API,
                will return an array of shape `(n_samples, 2)`
                (instead of `(n_sample, 1)` as in Keras).
        """
        kwargs = self.filter_sk_params(Sequential.predict_proba, kwargs)
        probs = self.model.predict(x, **kwargs)
    
        # check if binary classification
>       if probs.shape[2] == 1:
E       IndexError: tuple index out of range

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:258: IndexError
---------------------------- Captured stdout call -----------------------------
Epoch 1/1

 32/100 [========>.....................] - ETA: 1s - loss: 1.0670 - accuracy: 0.3125
100/100 [==============================] - 1s 6ms/step - loss: 1.0609 - accuracy: 0.3600

 32/100 [========>.....................] - ETA: 0s
100/100 [==============================] - 0s 469us/step
---------------------------- Captured stderr call -----------------------------
Using TensorFlow backend.
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
2020-10-04 19:33:06.225733: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-10-04 19:33:06.359271: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-04 19:33:06.360608: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-04 19:33:06.364099: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-04 19:33:06.367557: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-04 19:33:06.369248: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-04 19:33:06.374128: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-04 19:33:06.377322: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-04 19:33:06.386585: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 19:33:06.387563: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-04 19:33:06.388172: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-10-04 19:33:06.402427: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-04 19:33:06.403089: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-04 19:33:06.403473: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-04 19:33:06.403840: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-04 19:33:06.404199: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-04 19:33:06.404556: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-04 19:33:06.404897: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-04 19:33:06.405279: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 19:33:06.406145: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-04 19:33:07.352534: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-04 19:33:07.352973: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-04 19:33:07.353206: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-04 19:33:07.353991: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
WARNING:tensorflow:From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.

2020-10-04 19:33:07.944350: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
------------------------------ Captured log call ------------------------------
WARNING  tensorflow:deprecation.py:506 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
WARNING  tensorflow:module_wrapper.py:139 From C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.
________________________ test_classify_class_build_fn _________________________

    def test_classify_class_build_fn():
        class ClassBuildFnClf(object):
    
            def __call__(self, hidden_dims):
                return build_fn_clf(hidden_dims)
    
        clf = KerasClassifier(
            build_fn=ClassBuildFnClf(), hidden_dims=hidden_dims,
            batch_size=batch_size, epochs=epochs)
    
>       assert_classification_works(clf)

scikit_learn_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:89: in assert_classification_works
    proba = clf.predict_proba(X_test, batch_size=batch_size)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasClassifier object at 0x000001F031CC4780>
x = array([[ 2.11563611e+00,  2.39825559e+00,  1.38763535e+00,
         1.71973896e+00,  2.35656476e+00],
       [ 2.87312...,
       [-4.64727849e-01,  8.16972017e-01,  1.13477600e+00,
        -1.09897220e+00,  5.17740734e-02]], dtype=float32)
kwargs = {'batch_size': 32}
probs = array([[0.25893378, 0.1614011 , 0.5796651 ],
       [0.23508151, 0.13100761, 0.63391083],
       [0.2799829 , 0.190445... 0.5059711 ],
       [0.32459992, 0.30091462, 0.37448543],
       [0.3014551 , 0.23513868, 0.46340618]], dtype=float32)

    def predict_proba(self, x, **kwargs):
        """Returns class probability estimates for the given test data.
    
        # Arguments
            x: array-like, shape `(n_samples, n_features)`
                Test samples where `n_samples` is the number of samples
                and `n_features` is the number of features.
            **kwargs: dictionary arguments
                Legal arguments are the arguments
                of `Sequential.predict_classes`.
    
        # Returns
            proba: array-like, shape `(n_samples, n_outputs)`
                Class probability estimates.
                In the case of binary classification,
                to match the scikit-learn API,
                will return an array of shape `(n_samples, 2)`
                (instead of `(n_sample, 1)` as in Keras).
        """
        kwargs = self.filter_sk_params(Sequential.predict_proba, kwargs)
        probs = self.model.predict(x, **kwargs)
    
        # check if binary classification
>       if probs.shape[2] == 1:
E       IndexError: tuple index out of range

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:258: IndexError
---------------------------- Captured stdout call -----------------------------
Epoch 1/1

 32/100 [========>.....................] - ETA: 0s - loss: 1.0460 - accuracy: 0.3438
100/100 [==============================] - 0s 938us/step - loss: 1.0621 - accuracy: 0.3500

 32/100 [========>.....................] - ETA: 0s
100/100 [==============================] - 0s 468us/step
---------------------------- Captured stderr call -----------------------------
2020-10-04 19:33:09.684841: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-04 19:33:09.685447: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-04 19:33:09.685793: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-04 19:33:09.686133: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-04 19:33:09.686469: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-04 19:33:09.686807: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-04 19:33:09.687152: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-04 19:33:09.687518: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 19:33:09.688166: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-04 19:33:09.688483: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-04 19:33:09.688841: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-04 19:33:09.689159: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-04 19:33:09.689867: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
____________________ test_classify_inherit_class_build_fn _____________________

    def test_classify_inherit_class_build_fn():
        class InheritClassBuildFnClf(KerasClassifier):
    
            def __call__(self, hidden_dims):
                return build_fn_clf(hidden_dims)
    
        clf = InheritClassBuildFnClf(
            build_fn=None, hidden_dims=hidden_dims,
            batch_size=batch_size, epochs=epochs)
    
>       assert_classification_works(clf)

scikit_learn_test.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:89: in assert_classification_works
    proba = clf.predict_proba(X_test, batch_size=batch_size)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scikit_learn_test.test_classify_inherit_class_build_fn.<locals>.InheritClassBuildFnClf object at 0x000001F031F55160>
x = array([[ 2.11563611e+00,  2.39825559e+00,  1.38763535e+00,
         1.71973896e+00,  2.35656476e+00],
       [ 2.87312...,
       [-4.64727849e-01,  8.16972017e-01,  1.13477600e+00,
        -1.09897220e+00,  5.17740734e-02]], dtype=float32)
kwargs = {'batch_size': 32}
probs = array([[0.4020053 , 0.35573855, 0.24225613],
       [0.4188667 , 0.3574684 , 0.22366486],
       [0.40028226, 0.354027... 0.27395558],
       [0.33324105, 0.3332692 , 0.33348972],
       [0.3559918 , 0.3337836 , 0.31022468]], dtype=float32)

    def predict_proba(self, x, **kwargs):
        """Returns class probability estimates for the given test data.
    
        # Arguments
            x: array-like, shape `(n_samples, n_features)`
                Test samples where `n_samples` is the number of samples
                and `n_features` is the number of features.
            **kwargs: dictionary arguments
                Legal arguments are the arguments
                of `Sequential.predict_classes`.
    
        # Returns
            proba: array-like, shape `(n_samples, n_outputs)`
                Class probability estimates.
                In the case of binary classification,
                to match the scikit-learn API,
                will return an array of shape `(n_samples, 2)`
                (instead of `(n_sample, 1)` as in Keras).
        """
        kwargs = self.filter_sk_params(Sequential.predict_proba, kwargs)
        probs = self.model.predict(x, **kwargs)
    
        # check if binary classification
>       if probs.shape[2] == 1:
E       IndexError: tuple index out of range

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:258: IndexError
---------------------------- Captured stdout call -----------------------------
Epoch 1/1

 32/100 [========>.....................] - ETA: 0s - loss: 1.1860 - accuracy: 0.2188
100/100 [==============================] - 0s 937us/step - loss: 1.1505 - accuracy: 0.2800

 32/100 [========>.....................] - ETA: 0s
100/100 [==============================] - 0s 625us/step
---------------------------- Captured stderr call -----------------------------
2020-10-04 19:33:10.180372: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.65
pciBusID: 0000:73:00.0
2020-10-04 19:33:10.180967: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-10-04 19:33:10.181317: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-10-04 19:33:10.181655: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_100.dll
2020-10-04 19:33:10.181990: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_100.dll
2020-10-04 19:33:10.182345: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_100.dll
2020-10-04 19:33:10.182692: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_100.dll
2020-10-04 19:33:10.183040: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-10-04 19:33:10.183618: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-10-04 19:33:10.183932: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-10-04 19:33:10.184286: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-10-04 19:33:10.184503: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-10-04 19:33:10.185019: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8686 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:73:00.0, compute capability: 7.5)
=========================== short test summary info ===========================
FAILED scikit_learn_test.py::test_classify_build_fn - IndexError: tuple index...
FAILED scikit_learn_test.py::test_classify_class_build_fn - IndexError: tuple...
FAILED scikit_learn_test.py::test_classify_inherit_class_build_fn - IndexErro...
========================= 3 failed, 5 passed in 6.59s =========================
