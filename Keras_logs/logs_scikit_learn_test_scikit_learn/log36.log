2020-10-04 19:32:28.801248: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\wrappers
plugins: flaky-3.7.0
collected 8 items

scikit_learn_test.py F..F..FF                                            [100%]

================================== FAILURES ===================================
___________________________ test_classify_build_fn ____________________________

    def test_classify_build_fn():
        clf = KerasClassifier(
            build_fn=build_fn_clf, hidden_dims=hidden_dims,
>           batch_size=batch_size, epochs=epochs)

scikit_learn_test.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:63: in __init__
    self.check_params(sk_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasClassifier object at 0x0000016E6194B7F0>
params = {'batch_size': 32, 'epochs': 1, 'hidden_dims': 5}

    def check_params(self, params):
        """Checks for user typos in `params`.
    
        # Arguments
            params: dictionary; the parameters to be checked
    
        # Raises
            ValueError: if any member of `params` is not a valid argument.
        """
        legal_params_fns = [Sequential.fit, Sequential.predict,
                            Sequential.predict_classes, Sequential.evaluate]
        if self.build_fn is None:
            legal_params_fns.append(self.__call__)
        elif ( isinstance(self.build_fn, types.FunctionType) and
              not isinstance(self.build_fn, types.MethodType)):
            legal_params_fns.append(self.build_fn.__call__)
        else:
            legal_params_fns.append(self.build_fn)
    
        for params_name in params:
            for fn in legal_params_fns:
                if has_arg(fn, params_name):
                    break
            else:
                if params_name != 'nb_epoch':
                    raise ValueError(
>                       '{} is not a legal parameter'.format(params_name))
E                   ValueError: hidden_dims is not a legal parameter

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:91: ValueError
__________________________ test_regression_build_fn ___________________________

    def test_regression_build_fn():
        reg = KerasRegressor(
            build_fn=build_fn_reg, hidden_dims=hidden_dims,
>           batch_size=batch_size, epochs=epochs)

scikit_learn_test.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:63: in __init__
    self.check_params(sk_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasRegressor object at 0x0000016E69F7D5F8>
params = {'batch_size': 32, 'epochs': 1, 'hidden_dims': 5}

    def check_params(self, params):
        """Checks for user typos in `params`.
    
        # Arguments
            params: dictionary; the parameters to be checked
    
        # Raises
            ValueError: if any member of `params` is not a valid argument.
        """
        legal_params_fns = [Sequential.fit, Sequential.predict,
                            Sequential.predict_classes, Sequential.evaluate]
        if self.build_fn is None:
            legal_params_fns.append(self.__call__)
        elif ( isinstance(self.build_fn, types.FunctionType) and
              not isinstance(self.build_fn, types.MethodType)):
            legal_params_fns.append(self.build_fn.__call__)
        else:
            legal_params_fns.append(self.build_fn)
    
        for params_name in params:
            for fn in legal_params_fns:
                if has_arg(fn, params_name):
                    break
            else:
                if params_name != 'nb_epoch':
                    raise ValueError(
>                       '{} is not a legal parameter'.format(params_name))
E                   ValueError: hidden_dims is not a legal parameter

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:91: ValueError
______________ test_regression_predict_shape_correct_num_test_0 _______________

    def test_regression_predict_shape_correct_num_test_0():
>       assert_regression_predict_shape_correct(num_test=0)

scikit_learn_test.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:181: in assert_regression_predict_shape_correct
    batch_size=batch_size, epochs=epochs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:63: in __init__
    self.check_params(sk_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasRegressor object at 0x00000170A4ED4390>
params = {'batch_size': 32, 'epochs': 1, 'hidden_dims': 5}

    def check_params(self, params):
        """Checks for user typos in `params`.
    
        # Arguments
            params: dictionary; the parameters to be checked
    
        # Raises
            ValueError: if any member of `params` is not a valid argument.
        """
        legal_params_fns = [Sequential.fit, Sequential.predict,
                            Sequential.predict_classes, Sequential.evaluate]
        if self.build_fn is None:
            legal_params_fns.append(self.__call__)
        elif ( isinstance(self.build_fn, types.FunctionType) and
              not isinstance(self.build_fn, types.MethodType)):
            legal_params_fns.append(self.build_fn.__call__)
        else:
            legal_params_fns.append(self.build_fn)
    
        for params_name in params:
            for fn in legal_params_fns:
                if has_arg(fn, params_name):
                    break
            else:
                if params_name != 'nb_epoch':
                    raise ValueError(
>                       '{} is not a legal parameter'.format(params_name))
E                   ValueError: hidden_dims is not a legal parameter

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:91: ValueError
______________ test_regression_predict_shape_correct_num_test_1 _______________

    def test_regression_predict_shape_correct_num_test_1():
>       assert_regression_predict_shape_correct(num_test=1)

scikit_learn_test.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scikit_learn_test.py:181: in assert_regression_predict_shape_correct
    batch_size=batch_size, epochs=epochs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:63: in __init__
    self.check_params(sk_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <keras.wrappers.scikit_learn.KerasRegressor object at 0x00000170A4ED4C88>
params = {'batch_size': 32, 'epochs': 1, 'hidden_dims': 5}

    def check_params(self, params):
        """Checks for user typos in `params`.
    
        # Arguments
            params: dictionary; the parameters to be checked
    
        # Raises
            ValueError: if any member of `params` is not a valid argument.
        """
        legal_params_fns = [Sequential.fit, Sequential.predict,
                            Sequential.predict_classes, Sequential.evaluate]
        if self.build_fn is None:
            legal_params_fns.append(self.__call__)
        elif ( isinstance(self.build_fn, types.FunctionType) and
              not isinstance(self.build_fn, types.MethodType)):
            legal_params_fns.append(self.build_fn.__call__)
        else:
            legal_params_fns.append(self.build_fn)
    
        for params_name in params:
            for fn in legal_params_fns:
                if has_arg(fn, params_name):
                    break
            else:
                if params_name != 'nb_epoch':
                    raise ValueError(
>                       '{} is not a legal parameter'.format(params_name))
E                   ValueError: hidden_dims is not a legal parameter

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\wrappers\scikit_learn.py:91: ValueError
=========================== short test summary info ===========================
FAILED scikit_learn_test.py::test_classify_build_fn - ValueError: hidden_dims...
FAILED scikit_learn_test.py::test_regression_build_fn - ValueError: hidden_di...
FAILED scikit_learn_test.py::test_regression_predict_shape_correct_num_test_0
FAILED scikit_learn_test.py::test_regression_predict_shape_correct_num_test_1
========================= 4 failed, 4 passed in 6.11s =========================
