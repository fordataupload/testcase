2020-10-03 16:33:37.446178: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras
plugins: flaky-3.7.0
collected 36 items

initializers_test.py .........F.F.F.F.F.F................                [100%]

================================== FAILURES ===================================
__________________________ test_lecun_uniform[CONV] ___________________________

tensor_shape = (25, 25, 20, 20)

    @pytest.mark.parametrize('tensor_shape', [FC_SHAPE, CONV_SHAPE], ids=['FC', 'CONV'])
    def test_lecun_uniform(tensor_shape):
>       fan_in, _ = initializers._compute_fans(tensor_shape)

initializers_test.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

shape = (25, 25, 20, 20), data_format = 'channels_last'

    def _compute_fans(shape, data_format='channels_last'):
        """Computes the number of input and output units for a weight shape.
    
        # Arguments
            shape: Integer shape tuple.
            data_format: Image data format to use for convolution kernels.
                Note that all kernels in Keras are standardized on the
                `channels_last` ordering (even when inputs are set
                to `channels_first`).
    
        # Returns
            A tuple of scalars, `(fan_in, fan_out)`.
    
        # Raises
            ValueError: in case of invalid `data_format` argument.
        """
        if len(shape) == 2:
            fan_in = shape[0]
            fan_out = shape[1]
        elif len(shape) in {3, 4, 5}:
            # Assuming convolution kernels (1D, 2D or 3D).
            # TH kernel shape: (depth, input_depth, ...)
            # TF kernel shape: (..., input_depth, depth)
            if data_format == 'channels_first':
                receptive_field_size = np.prod(shape[2:])
                fan_in = shape[1] * receptive_field_size
                fan_out = shape[0] * receptive_field_size
            elif data_format != 'channels_last':
                receptive_field_size = np.prod(shape[:-2])
                fan_in = shape[-2] * receptive_field_size
                fan_out = shape[-1] * receptive_field_size
            else:
>               raise ValueError('Invalid data_format: ' + data_format)
E               ValueError: Invalid data_format: channels_last

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:494: ValueError
__________________________ test_glorot_uniform[CONV] __________________________

tensor_shape = (25, 25, 20, 20)

    @pytest.mark.parametrize('tensor_shape', [FC_SHAPE, CONV_SHAPE], ids=['FC', 'CONV'])
    def test_glorot_uniform(tensor_shape):
>       fan_in, fan_out = initializers._compute_fans(tensor_shape)

initializers_test.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

shape = (25, 25, 20, 20), data_format = 'channels_last'

    def _compute_fans(shape, data_format='channels_last'):
        """Computes the number of input and output units for a weight shape.
    
        # Arguments
            shape: Integer shape tuple.
            data_format: Image data format to use for convolution kernels.
                Note that all kernels in Keras are standardized on the
                `channels_last` ordering (even when inputs are set
                to `channels_first`).
    
        # Returns
            A tuple of scalars, `(fan_in, fan_out)`.
    
        # Raises
            ValueError: in case of invalid `data_format` argument.
        """
        if len(shape) == 2:
            fan_in = shape[0]
            fan_out = shape[1]
        elif len(shape) in {3, 4, 5}:
            # Assuming convolution kernels (1D, 2D or 3D).
            # TH kernel shape: (depth, input_depth, ...)
            # TF kernel shape: (..., input_depth, depth)
            if data_format == 'channels_first':
                receptive_field_size = np.prod(shape[2:])
                fan_in = shape[1] * receptive_field_size
                fan_out = shape[0] * receptive_field_size
            elif data_format != 'channels_last':
                receptive_field_size = np.prod(shape[:-2])
                fan_in = shape[-2] * receptive_field_size
                fan_out = shape[-1] * receptive_field_size
            else:
>               raise ValueError('Invalid data_format: ' + data_format)
E               ValueError: Invalid data_format: channels_last

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:494: ValueError
____________________________ test_he_uniform[CONV] ____________________________

tensor_shape = (25, 25, 20, 20)

    @pytest.mark.parametrize('tensor_shape', [FC_SHAPE, CONV_SHAPE], ids=['FC', 'CONV'])
    def test_he_uniform(tensor_shape):
>       fan_in, _ = initializers._compute_fans(tensor_shape)

initializers_test.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

shape = (25, 25, 20, 20), data_format = 'channels_last'

    def _compute_fans(shape, data_format='channels_last'):
        """Computes the number of input and output units for a weight shape.
    
        # Arguments
            shape: Integer shape tuple.
            data_format: Image data format to use for convolution kernels.
                Note that all kernels in Keras are standardized on the
                `channels_last` ordering (even when inputs are set
                to `channels_first`).
    
        # Returns
            A tuple of scalars, `(fan_in, fan_out)`.
    
        # Raises
            ValueError: in case of invalid `data_format` argument.
        """
        if len(shape) == 2:
            fan_in = shape[0]
            fan_out = shape[1]
        elif len(shape) in {3, 4, 5}:
            # Assuming convolution kernels (1D, 2D or 3D).
            # TH kernel shape: (depth, input_depth, ...)
            # TF kernel shape: (..., input_depth, depth)
            if data_format == 'channels_first':
                receptive_field_size = np.prod(shape[2:])
                fan_in = shape[1] * receptive_field_size
                fan_out = shape[0] * receptive_field_size
            elif data_format != 'channels_last':
                receptive_field_size = np.prod(shape[:-2])
                fan_in = shape[-2] * receptive_field_size
                fan_out = shape[-1] * receptive_field_size
            else:
>               raise ValueError('Invalid data_format: ' + data_format)
E               ValueError: Invalid data_format: channels_last

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:494: ValueError
___________________________ test_lecun_normal[CONV] ___________________________

tensor_shape = (25, 25, 20, 20)

    @pytest.mark.parametrize('tensor_shape', [FC_SHAPE, CONV_SHAPE], ids=['FC', 'CONV'])
    def test_lecun_normal(tensor_shape):
>       fan_in, _ = initializers._compute_fans(tensor_shape)

initializers_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

shape = (25, 25, 20, 20), data_format = 'channels_last'

    def _compute_fans(shape, data_format='channels_last'):
        """Computes the number of input and output units for a weight shape.
    
        # Arguments
            shape: Integer shape tuple.
            data_format: Image data format to use for convolution kernels.
                Note that all kernels in Keras are standardized on the
                `channels_last` ordering (even when inputs are set
                to `channels_first`).
    
        # Returns
            A tuple of scalars, `(fan_in, fan_out)`.
    
        # Raises
            ValueError: in case of invalid `data_format` argument.
        """
        if len(shape) == 2:
            fan_in = shape[0]
            fan_out = shape[1]
        elif len(shape) in {3, 4, 5}:
            # Assuming convolution kernels (1D, 2D or 3D).
            # TH kernel shape: (depth, input_depth, ...)
            # TF kernel shape: (..., input_depth, depth)
            if data_format == 'channels_first':
                receptive_field_size = np.prod(shape[2:])
                fan_in = shape[1] * receptive_field_size
                fan_out = shape[0] * receptive_field_size
            elif data_format != 'channels_last':
                receptive_field_size = np.prod(shape[:-2])
                fan_in = shape[-2] * receptive_field_size
                fan_out = shape[-1] * receptive_field_size
            else:
>               raise ValueError('Invalid data_format: ' + data_format)
E               ValueError: Invalid data_format: channels_last

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:494: ValueError
__________________________ test_glorot_normal[CONV] ___________________________

tensor_shape = (25, 25, 20, 20)

    @pytest.mark.parametrize('tensor_shape', [FC_SHAPE, CONV_SHAPE], ids=['FC', 'CONV'])
    def test_glorot_normal(tensor_shape):
>       fan_in, fan_out = initializers._compute_fans(tensor_shape)

initializers_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

shape = (25, 25, 20, 20), data_format = 'channels_last'

    def _compute_fans(shape, data_format='channels_last'):
        """Computes the number of input and output units for a weight shape.
    
        # Arguments
            shape: Integer shape tuple.
            data_format: Image data format to use for convolution kernels.
                Note that all kernels in Keras are standardized on the
                `channels_last` ordering (even when inputs are set
                to `channels_first`).
    
        # Returns
            A tuple of scalars, `(fan_in, fan_out)`.
    
        # Raises
            ValueError: in case of invalid `data_format` argument.
        """
        if len(shape) == 2:
            fan_in = shape[0]
            fan_out = shape[1]
        elif len(shape) in {3, 4, 5}:
            # Assuming convolution kernels (1D, 2D or 3D).
            # TH kernel shape: (depth, input_depth, ...)
            # TF kernel shape: (..., input_depth, depth)
            if data_format == 'channels_first':
                receptive_field_size = np.prod(shape[2:])
                fan_in = shape[1] * receptive_field_size
                fan_out = shape[0] * receptive_field_size
            elif data_format != 'channels_last':
                receptive_field_size = np.prod(shape[:-2])
                fan_in = shape[-2] * receptive_field_size
                fan_out = shape[-1] * receptive_field_size
            else:
>               raise ValueError('Invalid data_format: ' + data_format)
E               ValueError: Invalid data_format: channels_last

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:494: ValueError
____________________________ test_he_normal[CONV] _____________________________

tensor_shape = (25, 25, 20, 20)

    @pytest.mark.parametrize('tensor_shape', [FC_SHAPE, CONV_SHAPE], ids=['FC', 'CONV'])
    def test_he_normal(tensor_shape):
>       fan_in, _ = initializers._compute_fans(tensor_shape)

initializers_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

shape = (25, 25, 20, 20), data_format = 'channels_last'

    def _compute_fans(shape, data_format='channels_last'):
        """Computes the number of input and output units for a weight shape.
    
        # Arguments
            shape: Integer shape tuple.
            data_format: Image data format to use for convolution kernels.
                Note that all kernels in Keras are standardized on the
                `channels_last` ordering (even when inputs are set
                to `channels_first`).
    
        # Returns
            A tuple of scalars, `(fan_in, fan_out)`.
    
        # Raises
            ValueError: in case of invalid `data_format` argument.
        """
        if len(shape) == 2:
            fan_in = shape[0]
            fan_out = shape[1]
        elif len(shape) in {3, 4, 5}:
            # Assuming convolution kernels (1D, 2D or 3D).
            # TH kernel shape: (depth, input_depth, ...)
            # TF kernel shape: (..., input_depth, depth)
            if data_format == 'channels_first':
                receptive_field_size = np.prod(shape[2:])
                fan_in = shape[1] * receptive_field_size
                fan_out = shape[0] * receptive_field_size
            elif data_format != 'channels_last':
                receptive_field_size = np.prod(shape[:-2])
                fan_in = shape[-2] * receptive_field_size
                fan_out = shape[-1] * receptive_field_size
            else:
>               raise ValueError('Invalid data_format: ' + data_format)
E               ValueError: Invalid data_format: channels_last

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\initializers.py:494: ValueError
=========================== short test summary info ===========================
FAILED initializers_test.py::test_lecun_uniform[CONV] - ValueError: Invalid d...
FAILED initializers_test.py::test_glorot_uniform[CONV] - ValueError: Invalid ...
FAILED initializers_test.py::test_he_uniform[CONV] - ValueError: Invalid data...
FAILED initializers_test.py::test_lecun_normal[CONV] - ValueError: Invalid da...
FAILED initializers_test.py::test_glorot_normal[CONV] - ValueError: Invalid d...
FAILED initializers_test.py::test_he_normal[CONV] - ValueError: Invalid data_...
======================== 6 failed, 30 passed in 4.69s =========================
