2020-10-04 18:57:19.947473: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\legacy
plugins: flaky-3.7.0
collected 38 items

interface_test.py .......FFF............................                 [100%]

================================== FAILURES ===================================
_________________________ test_lstm_legacy_interface __________________________

    def test_lstm_legacy_interface():
>       old_layer = keras.layers.LSTM(input_shape=[3, 5], output_dim=2, name='d')

interface_test.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.recurrent.LSTM object at 0x000001CF27CF9780>,)
kwargs = {'input_shape': [3, 5], 'name': 'd', 'units': 2}, object_name = 'LSTM'
converted = None, key = 'consume_less', old_name = 'output_dim'
new_name = 'units', value = 2

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
>               converted.append((new_name, old_name))
E               AttributeError: 'NoneType' object has no attribute 'append'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:58: AttributeError
_______________________ test_simplernn_legacy_interface _______________________

    def test_simplernn_legacy_interface():
>       old_layer = keras.layers.SimpleRNN(input_shape=[3, 5], output_dim=2, name='d')

interface_test.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.recurrent.SimpleRNN object at 0x000001CF27CF9898>,)
kwargs = {'input_shape': [3, 5], 'name': 'd', 'units': 2}
object_name = 'SimpleRNN', converted = None, key = 'consume_less'
old_name = 'output_dim', new_name = 'units', value = 2

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
>               converted.append((new_name, old_name))
E               AttributeError: 'NoneType' object has no attribute 'append'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:58: AttributeError
__________________________ test_gru_legacy_interface __________________________

    def test_gru_legacy_interface():
>       old_layer = keras.layers.GRU(input_shape=[3, 5], output_dim=2, name='d')

interface_test.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.recurrent.GRU object at 0x000001CF29AFB128>,)
kwargs = {'input_shape': [3, 5], 'name': 'd', 'units': 2}, object_name = 'GRU'
converted = None, key = 'consume_less', old_name = 'output_dim'
new_name = 'units', value = 2

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
>               converted.append((new_name, old_name))
E               AttributeError: 'NoneType' object has no attribute 'append'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:58: AttributeError
============================== warnings summary ===============================
interface_test.py::test_embedding_legacy_interface
  C:\Users\mutation\Desktop\testcase\tests\keras\legacy\interface_test.py:55: UserWarning: The `dropout` argument is no longer support in `Embedding`. You can apply a `keras.layers.SpatialDropout1D` layer right after the `Embedding` layer to get the same behavior.
    old_layer = keras.layers.Embedding(1, 1, dropout=0.0, name='d')

interface_test.py::test_atrousconv1d_legacy_interface
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:290: UserWarning: The `AtrousConvolution1D` layer  has been deprecated. Use instead the `Conv1D` layer with the `dilation_rate` argument.
    warnings.warn('The `AtrousConvolution1D` layer '

interface_test.py::test_atrousconv2d_legacy_interface
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:304: UserWarning: The `AtrousConvolution2D` layer  has been deprecated. Use instead the `Conv2D` layer with the `dilation_rate` argument.
    warnings.warn('The `AtrousConvolution2D` layer '

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED interface_test.py::test_lstm_legacy_interface - AttributeError: 'NoneT...
FAILED interface_test.py::test_simplernn_legacy_interface - AttributeError: '...Using TensorFlow backend.

FAILED interface_test.py::test_gru_legacy_interface - AttributeError: 'NoneTy...
================== 3 failed, 35 passed, 3 warnings in 1.19s ===================
