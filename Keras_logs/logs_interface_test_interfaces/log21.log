2020-10-04 18:58:58.124930: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\legacy
plugins: flaky-3.7.0
collected 38 items

interface_test.py FFFFFFFF..FFFFFFFFFFFFFFFFFFFFFFFFFFFF                 [100%]

================================== FAILURES ===================================
_________________________ test_dense_legacy_interface _________________________

    def test_dense_legacy_interface():
>       old_layer = keras.layers.Dense(input_dim=3, output_dim=2, name='d')

interface_test.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.core.Dense object at 0x00000242E53F4D30>,)
kwargs = {'input_dim': 3, 'name': 'd', 'output_dim': 2}, object_name = 'Dense'
converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
________________________ test_dropout_legacy_interface ________________________

    def test_dropout_legacy_interface():
>       old_layer = keras.layers.Dropout(p=3, name='drop')

interface_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.core.Dropout object at 0x00000242E5F93C18>,)
kwargs = {'name': 'drop', 'p': 3}, object_name = 'Dropout', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_______________________ test_embedding_legacy_interface _______________________

    def test_embedding_legacy_interface():
>       old_layer = keras.layers.Embedding(4, 2, name='d')

interface_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.embeddings.Embedding object at 0x00000242E7156B38>, 4, 2)
kwargs = {'name': 'd'}, object_name = 'Embedding', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_maxpooling1d_legacy_interface ______________________

    def test_maxpooling1d_legacy_interface():
        old_layer = keras.layers.MaxPool1D(pool_length=2,
                                           border_mode='valid',
>                                          name='maxpool1d')

interface_test.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.pooling.MaxPooling1D object at 0x00000242E71BD5C0>,)
kwargs = {'border_mode': 'valid', 'name': 'maxpool1d', 'pool_length': 2}
object_name = 'MaxPooling1D', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_avgpooling1d_legacy_interface ______________________

    def test_avgpooling1d_legacy_interface():
        old_layer = keras.layers.AvgPool1D(pool_length=2,
                                           border_mode='valid',
>                                          name='d')

interface_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.pooling.AveragePooling1D object at 0x00000242E738D240>,)
kwargs = {'border_mode': 'valid', 'name': 'd', 'pool_length': 2}
object_name = 'AveragePooling1D', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_________________________ test_prelu_legacy_interface _________________________

    def test_prelu_legacy_interface():
>       old_layer = keras.layers.PReLU(init='zero', name='p')

interface_test.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.advanced_activations.PReLU object at 0x00000242E5F7D208>,)
kwargs = {'init': 'zero', 'name': 'p'}, object_name = 'PReLU', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_gaussiannoise_legacy_interface _____________________

    def test_gaussiannoise_legacy_interface():
>       old_layer = keras.layers.GaussianNoise(sigma=0.5, name='gn')

interface_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.noise.GaussianNoise object at 0x00000242E542C1D0>,)
kwargs = {'name': 'gn', 'sigma': 0.5}, object_name = 'GaussianNoise'
converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_________________________ test_lstm_legacy_interface __________________________

    def test_lstm_legacy_interface():
        old_layer = keras.layers.LSTM(input_shape=[3, 5], output_dim=2, name='d')
        new_layer = keras.layers.LSTM(2, input_shape=[3, 5], name='d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.LSTM(input_shape=[3, 5], output_dim=2, name='d',
                                      consume_less='mem')
        new_layer = keras.layers.LSTM(2, input_shape=[3, 5], name='d', implementation=1)
>       assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
E       assert '{"name": "d"...tion": "mem"}' == '{"name": "d"...entation": 1}'
E         Skipping 853 identical leading characters in diff, use -v to show
E         - ntation": 1}
E         ?           ^
E         + ntation": "mem"}
E         ?           ^^^^^

interface_test.py:108: AssertionError
____________________ test_gaussiandropout_legacy_interface ____________________

    def test_gaussiandropout_legacy_interface():
>       old_layer = keras.layers.GaussianDropout(p=0.6, name='drop')

interface_test.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.noise.GaussianDropout object at 0x00000242E70FA438>,)
kwargs = {'name': 'drop', 'p': 0.6}, object_name = 'GaussianDropout'
converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_maxpooling2d_legacy_interface ______________________

    def test_maxpooling2d_legacy_interface():
        old_layer = keras.layers.MaxPooling2D(
            pool_size=(2, 2), border_mode='valid', name='maxpool2d')
        new_layer = keras.layers.MaxPool2D(
            pool_size=2, padding='valid', name='maxpool2d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.MaxPooling2D((2, 2), 2, 'valid', name='maxpool2d')
        new_layer = keras.layers.MaxPool2D(
            pool_size=2, strides=2, padding='valid', name='maxpool2d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.MaxPooling2D(
>           (2, 2), padding='valid', dim_ordering='tf', name='maxpool2d')

interface_test.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:262: in __init__
    data_format, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:177: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_avgpooling2d_legacy_interface ______________________

    def test_avgpooling2d_legacy_interface():
        old_layer = keras.layers.AveragePooling2D(
            pool_size=(2, 2), border_mode='valid', name='avgpooling2d')
        new_layer = keras.layers.AvgPool2D(
            pool_size=(2, 2), padding='valid', name='avgpooling2d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.AveragePooling2D(
            (2, 2), (2, 2), 'valid', name='avgpooling2d')
        new_layer = keras.layers.AvgPool2D(
            pool_size=(2, 2), strides=(2, 2), padding='valid', name='avgpooling2d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.AveragePooling2D(
>           (2, 2), padding='valid', dim_ordering='tf', name='avgpooling2d')

interface_test.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:317: in __init__
    data_format, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:177: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_maxpooling3d_legacy_interface ______________________

    def test_maxpooling3d_legacy_interface():
        old_layer = keras.layers.MaxPooling3D(
            pool_size=(2, 2, 2), border_mode='valid', name='maxpool3d')
        new_layer = keras.layers.MaxPool3D(
            pool_size=(2, 2, 2), padding='valid', name='maxpool3d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.MaxPooling3D(
            (2, 2, 2), (2, 2, 2), 'valid', name='maxpool3d')
        new_layer = keras.layers.MaxPool3D(
            pool_size=(2, 2, 2), strides=(2, 2, 2), padding='valid', name='maxpool3d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.MaxPooling3D(
>           (2, 2, 2), padding='valid', dim_ordering='tf', name='maxpool3d')

interface_test.py:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:427: in __init__
    data_format, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:338: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_avgpooling3d_legacy_interface ______________________

    def test_avgpooling3d_legacy_interface():
        old_layer = keras.layers.AveragePooling3D(
            pool_size=(2, 2, 2), border_mode='valid', name='avgpooling3d')
        new_layer = keras.layers.AvgPool3D(
            pool_size=(2, 2, 2), padding='valid', name='avgpooling3d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.AveragePooling3D(
            (2, 2, 2), (2, 2, 2), 'valid', name='avgpooling3d')
        new_layer = keras.layers.AvgPool3D(
            pool_size=(2, 2, 2), strides=(2, 2, 2), padding='valid',
            name='avgpooling3d')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.AveragePooling3D(
>           (2, 2, 2), padding='valid', dim_ordering='tf', name='avgpooling3d')

interface_test.py:348: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:477: in __init__
    data_format, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:338: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
__________________ test_global_maxpooling2d_legacy_interface __________________

    def test_global_maxpooling2d_legacy_interface():
        old_layer = keras.layers.GlobalMaxPooling2D(dim_ordering='tf',
>                                                   name='global_maxpool2d')

interface_test.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:594: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
__________________ test_global_avgpooling2d_legacy_interface __________________

    def test_global_avgpooling2d_legacy_interface():
        old_layer = keras.layers.GlobalAveragePooling2D(dim_ordering='tf',
>                                                       name='global_avgpool2d')

interface_test.py:389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:594: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
__________________ test_global_maxpooling3d_legacy_interface __________________

    def test_global_maxpooling3d_legacy_interface():
        old_layer = keras.layers.GlobalMaxPooling3D(dim_ordering='tf',
>                                                   name='global_maxpool3d')

interface_test.py:408: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:689: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
__________________ test_global_avgpooling3d_legacy_interface __________________

    def test_global_avgpooling3d_legacy_interface():
        old_layer = keras.layers.GlobalAveragePooling3D(dim_ordering='tf',
>                                                       name='global_avgpool3d')

interface_test.py:427: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\pooling.py:689: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_upsampling1d_legacy_interface ______________________

    def test_upsampling1d_legacy_interface():
>       old_layer = keras.layers.UpSampling1D(length=3, name='us1d')

interface_test.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional.UpSampling1D object at 0x00000242E725A470>,)
kwargs = {'length': 3, 'name': 'us1d'}, object_name = 'UpSampling1D'
converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_upsampling2d_legacy_interface ______________________

    def test_upsampling2d_legacy_interface():
>       old_layer = keras.layers.UpSampling2D((2, 2), dim_ordering='tf', name='us2d')

interface_test.py:453: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2017: in __init__
    super(UpSampling2D, self).__init__(normalized_size, data_format, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1919: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_upsampling3d_legacy_interface ______________________

    def test_upsampling3d_legacy_interface():
        old_layer = keras.layers.UpSampling3D((2, 2, 2),
                                              dim_ordering='tf',
>                                             name='us3d')

interface_test.py:462: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2071: in __init__
    super(UpSampling3D, self).__init__(normalized_size, data_format, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1919: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
________________________ test_conv2d_legacy_interface _________________________

    def test_conv2d_legacy_interface():
        old_layer = keras.layers.Convolution2D(5, 3, 3, name='conv')
        new_layer = keras.layers.Conv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution2D(5, 3, nb_col=3, name='conv')
        new_layer = keras.layers.Conv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution2D(5, nb_row=3, nb_col=3, name='conv')
        new_layer = keras.layers.Conv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution2D(5, 3, 3,
                                               init='normal',
                                               subsample=(2, 2),
                                               border_mode='valid',
                                               dim_ordering='th',
                                               W_regularizer='l1',
                                               b_regularizer='l2',
                                               W_constraint='maxnorm',
                                               b_constraint='unitnorm',
>                                              name='conv')

interface_test.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:484: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:112: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'th'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: th

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_______________________ test_deconv2d_legacy_interface ________________________

    def test_deconv2d_legacy_interface():
        old_layer = keras.layers.Deconvolution2D(5, 3, 3, (6, 7, 5), name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, 3, 3, output_shape=(6, 7, 5),
                                                 name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, 3, nb_col=3, output_shape=(6, 7, 5),
                                                 name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, nb_row=3, nb_col=3,
                                                 output_shape=(6, 7, 5), name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, 3, 3,
                                                 output_shape=(6, 7, 5),
                                                 init='normal',
                                                 subsample=(2, 2),
                                                 border_mode='valid',
                                                 dim_ordering='th',
                                                 W_regularizer='l1',
                                                 b_regularizer='l2',
                                                 W_constraint='maxnorm',
                                                 b_constraint='unitnorm',
>                                                name='conv')

interface_test.py:535: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:764: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:484: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:112: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'th'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: th

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
________________________ test_conv1d_legacy_interface _________________________

    def test_conv1d_legacy_interface():
        old_layer = keras.layers.Convolution1D(5,
                                               filter_length=3,
                                               input_dim=3,
                                               input_length=4,
>                                              name='conv')

interface_test.py:555: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional.Conv1D object at 0x00000242E714F6D8>, 5)
kwargs = {'filter_length': 3, 'input_shape': (4, 3), 'name': 'conv'}
object_name = 'Conv1D', converted = [('input_shape', 'input_dim')]

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
___________________ test_separable_conv2d_legacy_interface ____________________

    def test_separable_conv2d_legacy_interface():
        old_layer = keras.layers.SeparableConv2D(5, 3, 3, name='conv')
        new_layer = keras.layers.SeparableConv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.SeparableConv2D(5, 3, nb_col=3, name='conv')
        new_layer = keras.layers.SeparableConv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.SeparableConv2D(5, nb_row=3, nb_col=3, name='conv')
        new_layer = keras.layers.SeparableConv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.SeparableConv2D(5, 3, 3,
                                                 init='normal',
                                                 subsample=(2, 2),
                                                 border_mode='valid',
                                                 dim_ordering='th',
                                                 depthwise_regularizer='l1',
                                                 b_regularizer='l2',
                                                 depthwise_constraint='maxnorm',
                                                 b_constraint='unitnorm',
>                                                name='conv')

interface_test.py:602: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1684: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:1312: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:112: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'th'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: th

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
________________________ test_conv3d_legacy_interface _________________________

    def test_conv3d_legacy_interface():
        old_layer = keras.layers.Convolution3D(5, 3, 3, 4, name='conv')
        new_layer = keras.layers.Conv3D(5, (3, 3, 4), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution3D(5, 3, 3, kernel_dim3=4, name='conv')
        new_layer = keras.layers.Conv3D(5, (3, 3, 4), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution3D(5, 3,
                                               kernel_dim2=3,
                                               kernel_dim3=4,
                                               name='conv')
        new_layer = keras.layers.Conv3D(5, (3, 3, 4), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution3D(5,
                                               kernel_dim1=3,
                                               kernel_dim2=3,
                                               kernel_dim3=4,
                                               name='conv')
        new_layer = keras.layers.Conv3D(5, (3, 3, 4), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution3D(5, 3, 3, 4,
                                               init='normal',
                                               subsample=(2, 2, 2),
                                               border_mode='valid',
                                               dim_ordering='th',
                                               W_regularizer='l1',
                                               b_regularizer='l2',
                                               W_constraint='maxnorm',
                                               b_constraint='unitnorm',
>                                              name='conv')

interface_test.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:613: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:112: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'th'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: th

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
______________________ test_convlstm2d_legacy_interface _______________________

    def test_convlstm2d_legacy_interface():
        old_layer = keras.layers.ConvLSTM2D(5, 3, 3, name='conv')
        new_layer = keras.layers.ConvLSTM2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.ConvLSTM2D(5, 3, nb_col=3, name='conv')
        new_layer = keras.layers.ConvLSTM2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.ConvLSTM2D(5, nb_row=3, nb_col=3, name='conv')
        new_layer = keras.layers.ConvLSTM2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.ConvLSTM2D(5, 3, 3,
                                            init='normal',
                                            inner_init='uniform',
                                            forget_bias_init='one',
                                            inner_activation='relu',
                                            subsample=(2, 2),
                                            border_mode='valid',
                                            dim_ordering='th',
                                            W_regularizer='l1',
                                            U_regularizer='l2',
                                            b_regularizer='l2',
                                            dropout_W=0.2,
                                            dropout_U=0.1,
>                                           name='conv')

interface_test.py:692: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional_recurrent.py:961: in __init__
    recurrent_dropout=recurrent_dropout)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional_recurrent.py:572: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'th'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: th

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_______________________ test_batchnorm_legacy_interface _______________________

    def test_batchnorm_legacy_interface():
>       old_layer = keras.layers.BatchNormalization(mode=0, name='bn')

interface_test.py:711: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.normalization.BatchNormalization object at 0x00000242E71B8940>,)
kwargs = {'name': 'bn'}, object_name = 'BatchNormalization'
converted = [('mode', None)]

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_atrousconv1d_legacy_interface ______________________

    def test_atrousconv1d_legacy_interface():
        old_layer = keras.layers.AtrousConvolution1D(5, 3,
                                                     init='normal',
                                                     subsample_length=2,
                                                     border_mode='valid',
                                                     W_regularizer='l1',
                                                     b_regularizer='l2',
                                                     W_constraint='maxnorm',
                                                     b_constraint='unitnorm',
                                                     atrous_rate=2,
>                                                    name='conv')

interface_test.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:294: in AtrousConvolution1D
    return Conv1D(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional.Conv1D object at 0x00000242E718B080>, 5, 3)
kwargs = {'W_constraint': 'maxnorm', 'W_regularizer': 'l1', 'b_constraint': 'unitnorm', 'b_regularizer': 'l2', ...}
object_name = 'Conv1D', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
_____________________ test_atrousconv2d_legacy_interface ______________________

    def test_atrousconv2d_legacy_interface():
        old_layer = keras.layers.AtrousConvolution2D(
            5, 3, 3,
            atrous_rate=(2, 2),
            init='normal',
            subsample=(2, 2),
            border_mode='valid',
            dim_ordering='th',
            W_regularizer='l1',
            b_regularizer='l2',
            W_constraint='maxnorm',
            b_constraint='unitnorm',
>           name='conv')

interface_test.py:761: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:308: in AtrousConvolution2D
    return Conv2D(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:484: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:112: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'th'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: th

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_zeropadding2d_legacy_interface _____________________

    def test_zeropadding2d_legacy_interface():
        old_layer = keras.layers.ZeroPadding2D(padding={'right_pad': 4,
                                                        'bottom_pad': 2,
                                                        'top_pad': 1,
                                                        'left_pad': 3},
                                               dim_ordering='tf',
>                                              name='zp2d')

interface_test.py:782: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2228: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2099: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
_____________________ test_zeropadding3d_legacy_interface _____________________

    def test_zeropadding3d_legacy_interface():
        old_layer = keras.layers.ZeroPadding3D((2, 2, 2),
                                               dim_ordering='tf',
>                                              name='zp3d')

interface_test.py:792: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2308: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2099: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
______________________ test_cropping2d_legacy_interface _______________________

    def test_cropping2d_legacy_interface():
>       old_layer = keras.layers.Cropping2D(dim_ordering='tf', name='c2d')

interface_test.py:800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2489: in __init__
    **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2340: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
______________________ test_cropping3d_legacy_interface _______________________

    def test_cropping3d_legacy_interface():
>       old_layer = keras.layers.Cropping3D(dim_ordering='tf', name='c3d')

interface_test.py:806: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\convolutional.py:2541: in __init__
    self.data_format = K.normalize_data_format(data_format)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'tf'

    def normalize_data_format(value):
        """Checks that the value correspond to a valid data format.
    
        # Arguments
            value: String or None. `'channels_first'` or `'channels_last'`.
    
        # Returns
            A string, either `'channels_first'` or `'channels_last'`
    
        # Example
        ```python
            >>> from keras import backend as K
            >>> K.normalize_data_format(None)
            'channels_first'
            >>> K.normalize_data_format('channels_last')
            'channels_last'
        ```
    
        # Raises
            ValueError: if `value` or the global `data_format` invalid.
        """
        if value is None:
            value = image_data_format()
        data_format = value.lower()
        if data_format not in {'channels_first', 'channels_last'}:
            raise ValueError('The `data_format` argument must be one of '
                             '"channels_first", "channels_last". Received: ' +
>                            str(value))
E           ValueError: The `data_format` argument must be one of "channels_first", "channels_last". Received: tf

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\backend\tensorflow_backend.py:315: ValueError
___________________ test_spatialdropout1d_legacy_interface ____________________

    def test_spatialdropout1d_legacy_interface():
>       old_layer = keras.layers.SpatialDropout1D(p=0.6, name='sd1d')

interface_test.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.core.SpatialDropout1D object at 0x00000242E75A62B0>,)
kwargs = {'name': 'sd1d', 'p': 0.6}, object_name = 'SpatialDropout1D'
converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
___________________ test_spatialdropout2d_legacy_interface ____________________

    def test_spatialdropout2d_legacy_interface():
        old_layer = keras.layers.SpatialDropout2D(p=0.5,
                                                  dim_ordering='tf',
>                                                 name='sd2d')

interface_test.py:863: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:215: in __init__
    super(SpatialDropout2D, self).__init__(rate, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.core.SpatialDropout2D object at 0x00000242E75989B0>, 0.5)
kwargs = {'name': 'sd2d'}, object_name = 'SpatialDropout2D', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
___________________ test_spatialdropout3d_legacy_interface ____________________

    def test_spatialdropout3d_legacy_interface():
        old_layer = keras.layers.SpatialDropout3D(p=0.5,
                                                  dim_ordering='tf',
>                                                 name='sd3d')

interface_test.py:877: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: in wrapper
    return func(*args, **kwargs)
C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\layers\core.py:264: in __init__
    super(SpatialDropout3D, self).__init__(rate, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.core.SpatialDropout3D object at 0x00000242E75645C0>, 0.5)
kwargs = {'name': 'sd3d'}, object_name = 'SpatialDropout3D', converted = []

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
>       for key in value_conversions:
E       TypeError: 'NoneType' object is not iterable

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:47: TypeError
============================== warnings summary ===============================
interface_test.py::test_atrousconv1d_legacy_interface
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:290: UserWarning: The `AtrousConvolution1D` layer  has been deprecated. Use instead the `Conv1D` layer with the `dilation_rate` argument.
    warnings.warn('The `AtrousConvolution1D` layer '

interface_test.py::test_atrousconv2d_legacy_interface
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:304: UserWarning: The `AtrousConvolution2D` layer  has been deprecated. Use instead the `Conv2D` layer with the `dilation_rate` argument.
    warnings.warn('The `AtrousConvolution2D` layer 'Using TensorFlow backend.


-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED interface_test.py::test_dense_legacy_interface - TypeError: 'NoneType'...
FAILED interface_test.py::test_dropout_legacy_interface - TypeError: 'NoneTyp...
FAILED interface_test.py::test_embedding_legacy_interface - TypeError: 'NoneT...
FAILED interface_test.py::test_maxpooling1d_legacy_interface - TypeError: 'No...
FAILED interface_test.py::test_avgpooling1d_legacy_interface - TypeError: 'No...
FAILED interface_test.py::test_prelu_legacy_interface - TypeError: 'NoneType'...
FAILED interface_test.py::test_gaussiannoise_legacy_interface - TypeError: 'N...
FAILED interface_test.py::test_lstm_legacy_interface - assert '{"name": "d".....
FAILED interface_test.py::test_gaussiandropout_legacy_interface - TypeError: ...
FAILED interface_test.py::test_maxpooling2d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_avgpooling2d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_maxpooling3d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_avgpooling3d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_global_maxpooling2d_legacy_interface - ValueEr...
FAILED interface_test.py::test_global_avgpooling2d_legacy_interface - ValueEr...
FAILED interface_test.py::test_global_maxpooling3d_legacy_interface - ValueEr...
FAILED interface_test.py::test_global_avgpooling3d_legacy_interface - ValueEr...
FAILED interface_test.py::test_upsampling1d_legacy_interface - TypeError: 'No...
FAILED interface_test.py::test_upsampling2d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_upsampling3d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_conv2d_legacy_interface - ValueError: The `dat...
FAILED interface_test.py::test_deconv2d_legacy_interface - ValueError: The `d...
FAILED interface_test.py::test_conv1d_legacy_interface - TypeError: 'NoneType...
FAILED interface_test.py::test_separable_conv2d_legacy_interface - ValueError...
FAILED interface_test.py::test_conv3d_legacy_interface - ValueError: The `dat...
FAILED interface_test.py::test_convlstm2d_legacy_interface - ValueError: The ...
FAILED interface_test.py::test_batchnorm_legacy_interface - TypeError: 'NoneT...
FAILED interface_test.py::test_atrousconv1d_legacy_interface - TypeError: 'No...
FAILED interface_test.py::test_atrousconv2d_legacy_interface - ValueError: Th...
FAILED interface_test.py::test_zeropadding2d_legacy_interface - ValueError: T...
FAILED interface_test.py::test_zeropadding3d_legacy_interface - ValueError: T...
FAILED interface_test.py::test_cropping2d_legacy_interface - ValueError: The ...
FAILED interface_test.py::test_cropping3d_legacy_interface - ValueError: The ...
FAILED interface_test.py::test_spatialdropout1d_legacy_interface - TypeError:...
FAILED interface_test.py::test_spatialdropout2d_legacy_interface - TypeError:...
FAILED interface_test.py::test_spatialdropout3d_legacy_interface - TypeError:...
================== 36 failed, 2 passed, 2 warnings in 4.36s ===================
