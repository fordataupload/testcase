2020-10-04 19:00:17.060196: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
============================= test session starts =============================
platform win32 -- Python 3.6.12, pytest-6.0.2, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\mutation\Desktop\testcase\tests\keras\legacy
plugins: flaky-3.7.0
collected 38 items

interface_test.py ......................FF.F.F..........                 [100%]

================================== FAILURES ===================================
________________________ test_conv2d_legacy_interface _________________________

    def test_conv2d_legacy_interface():
        old_layer = keras.layers.Convolution2D(5, 3, 3, name='conv')
        new_layer = keras.layers.Conv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Convolution2D(5, 3, nb_col=3, name='conv')
        new_layer = keras.layers.Conv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
>       old_layer = keras.layers.Convolution2D(5, nb_row=3, nb_col=3, name='conv')

interface_test.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional.Conv2D object at 0x000002A18E059EB8>, 5)
kwargs = {'name': 'conv', 'nb_col': 3, 'nb_row': 3}, object_name = 'Conv2D'
converted = [], key = 'dim_ordering', old_name = 'bias', new_name = 'use_bias'

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
                converted.append((new_name, old_name))
        if converted:
            signature = '`' + object_name + '('
            for i, value in enumerate(args[1:]):
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(args[1:]) - 1 or kwargs:
                    signature += ', '
            for i, (name, value) in enumerate(kwargs.items()):
                signature += name + '='
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(kwargs) - 1:
                    signature += ', '
            signature += ')`'
            warnings.warn('Update your `' + object_name + '` call to the ' +
                          'Keras 2 API: ' + signature, stacklevel=2)
>       return func(*args, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'kernel_size'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: TypeError
_______________________ test_deconv2d_legacy_interface ________________________

    def test_deconv2d_legacy_interface():
        old_layer = keras.layers.Deconvolution2D(5, 3, 3, (6, 7, 5), name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, 3, 3, output_shape=(6, 7, 5),
                                                 name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, 3, nb_col=3, output_shape=(6, 7, 5),
                                                 name='deconv')
        new_layer = keras.layers.Conv2DTranspose(5, (3, 3), name='deconv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.Deconvolution2D(5, nb_row=3, nb_col=3,
>                                                output_shape=(6, 7, 5), name='deconv')

interface_test.py:521: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional.Conv2DTranspose object at 0x000002A18E036160>, 5)
kwargs = {'name': 'deconv', 'nb_col': 3, 'nb_row': 3}
object_name = 'Conv2DTranspose', converted = [('output_shape', None)]
key = 'dim_ordering', old_name = 'bias', new_name = 'use_bias', value = 'deconv'
signature = '`Conv2DTranspose(5, nb_row=3, nb_col=3, name="deconv")`', i = 2
str_val = '3'

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
                converted.append((new_name, old_name))
        if converted:
            signature = '`' + object_name + '('
            for i, value in enumerate(args[1:]):
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(args[1:]) - 1 or kwargs:
                    signature += ', '
            for i, (name, value) in enumerate(kwargs.items()):
                signature += name + '='
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(kwargs) - 1:
                    signature += ', '
            signature += ')`'
            warnings.warn('Update your `' + object_name + '` call to the ' +
                          'Keras 2 API: ' + signature, stacklevel=2)
>       return func(*args, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'kernel_size'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: TypeError
___________________ test_separable_conv2d_legacy_interface ____________________

    def test_separable_conv2d_legacy_interface():
        old_layer = keras.layers.SeparableConv2D(5, 3, 3, name='conv')
        new_layer = keras.layers.SeparableConv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.SeparableConv2D(5, 3, nb_col=3, name='conv')
        new_layer = keras.layers.SeparableConv2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
>       old_layer = keras.layers.SeparableConv2D(5, nb_row=3, nb_col=3, name='conv')

interface_test.py:589: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional.SeparableConv2D object at 0x000002A18FE23588>, 5)
kwargs = {'name': 'conv', 'nb_col': 3, 'nb_row': 3}
object_name = 'SeparableConv2D', converted = [], key = 'dim_ordering'
old_name = 'bias', new_name = 'use_bias'

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
                converted.append((new_name, old_name))
        if converted:
            signature = '`' + object_name + '('
            for i, value in enumerate(args[1:]):
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(args[1:]) - 1 or kwargs:
                    signature += ', '
            for i, (name, value) in enumerate(kwargs.items()):
                signature += name + '='
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(kwargs) - 1:
                    signature += ', '
            signature += ')`'
            warnings.warn('Update your `' + object_name + '` call to the ' +
                          'Keras 2 API: ' + signature, stacklevel=2)
>       return func(*args, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'kernel_size'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: TypeError
______________________ test_convlstm2d_legacy_interface _______________________

    def test_convlstm2d_legacy_interface():
        old_layer = keras.layers.ConvLSTM2D(5, 3, 3, name='conv')
        new_layer = keras.layers.ConvLSTM2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
        old_layer = keras.layers.ConvLSTM2D(5, 3, nb_col=3, name='conv')
        new_layer = keras.layers.ConvLSTM2D(5, (3, 3), name='conv')
        assert json.dumps(old_layer.get_config()) == json.dumps(new_layer.get_config())
    
>       old_layer = keras.layers.ConvLSTM2D(5, nb_row=3, nb_col=3, name='conv')

interface_test.py:675: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<keras.layers.convolutional_recurrent.ConvLSTM2D object at 0x000002A18FE4BC88>, 5)
kwargs = {'name': 'conv', 'nb_col': 3, 'nb_row': 3}, object_name = 'ConvLSTM2D'
converted = [], key = 'dim_ordering', old_name = 'bias', new_name = 'use_bias'

    @six.wraps(func)
    def wrapper(*args, **kwargs):
        if object_type == 'class':
            object_name = args[0].__class__.__name__
        else:
            object_name = func.__name__
        if preprocessor:
            args, kwargs, converted = preprocessor(args, kwargs)
        else:
            converted = []
        if check_positional_args:
            if len(args) > len(allowed_positional_args) + 1:
                raise TypeError('`' + object_name +
                                '` can accept only ' +
                                str(len(allowed_positional_args)) +
                                ' positional arguments ' +
                                str(tuple(allowed_positional_args)) +
                                ', but you passed the following '
                                'positional arguments: ' +
                                str(list(args[1:])))
        for key in value_conversions:
            if key in kwargs:
                old_value = kwargs[key]
                if old_value in value_conversions[key]:
                    kwargs[key] = value_conversions[key][old_value]
        for old_name, new_name in conversions:
            if old_name in kwargs:
                value = kwargs.pop(old_name)
                if new_name in kwargs:
                    raise_duplicate_arg_error(old_name, new_name)
                kwargs[new_name] = value
                converted.append((new_name, old_name))
        if converted:
            signature = '`' + object_name + '('
            for i, value in enumerate(args[1:]):
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:Using TensorFlow backend.

                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(args[1:]) - 1 or kwargs:
                    signature += ', '
            for i, (name, value) in enumerate(kwargs.items()):
                signature += name + '='
                if isinstance(value, six.string_types):
                    signature += '"' + value + '"'
                else:
                    if isinstance(value, np.ndarray):
                        str_val = 'array'
                    else:
                        str_val = str(value)
                    if len(str_val) > 10:
                        str_val = str_val[:10] + '...'
                    signature += str_val
                if i < len(kwargs) - 1:
                    signature += ', '
            signature += ')`'
            warnings.warn('Update your `' + object_name + '` call to the ' +
                          'Keras 2 API: ' + signature, stacklevel=2)
>       return func(*args, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'kernel_size'

C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\interfaces.py:91: TypeError
============================== warnings summary ===============================
interface_test.py::test_embedding_legacy_interface
  C:\Users\mutation\Desktop\testcase\tests\keras\legacy\interface_test.py:55: UserWarning: The `dropout` argument is no longer support in `Embedding`. You can apply a `keras.layers.SpatialDropout1D` layer right after the `Embedding` layer to get the same behavior.
    old_layer = keras.layers.Embedding(1, 1, dropout=0.0, name='d')

interface_test.py::test_lstm_legacy_interface
  C:\Users\mutation\Desktop\testcase\tests\keras\legacy\interface_test.py:111: UserWarning: The `input_dim` and `input_length` arguments in recurrent layers are deprecated. Use `input_shape` instead.
    output_dim=2, name='d', consume_less='mem')

interface_test.py::test_lstm_legacy_interface
  C:\Users\mutation\Desktop\testcase\tests\keras\legacy\interface_test.py:116: UserWarning: The `input_dim` and `input_length` arguments in recurrent layers are deprecated. Use `input_shape` instead.
    output_dim=2, name='d', consume_less='mem')

interface_test.py::test_lstm_legacy_interface
  C:\Users\mutation\Desktop\testcase\tests\keras\legacy\interface_test.py:159: UserWarning: The `forget_bias_init` argument has been ignored. Use `unit_forget_bias=True` instead to initialize with ones.
    name='LSTM')

interface_test.py::test_atrousconv1d_legacy_interface
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:290: UserWarning: The `AtrousConvolution1D` layer  has been deprecated. Use instead the `Conv1D` layer with the `dilation_rate` argument.
    warnings.warn('The `AtrousConvolution1D` layer '

interface_test.py::test_atrousconv2d_legacy_interface
  C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\keras\legacy\layers.py:304: UserWarning: The `AtrousConvolution2D` layer  has been deprecated. Use instead the `Conv2D` layer with the `dilation_rate` argument.
    warnings.warn('The `AtrousConvolution2D` layer '

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED interface_test.py::test_conv2d_legacy_interface - TypeError: __init__(...
FAILED interface_test.py::test_deconv2d_legacy_interface - TypeError: __init_...
FAILED interface_test.py::test_separable_conv2d_legacy_interface - TypeError:...
FAILED interface_test.py::test_convlstm2d_legacy_interface - TypeError: __ini...
================== 4 failed, 34 passed, 6 warnings in 1.58s ===================
