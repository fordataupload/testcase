2020-10-05 19:00:22.787123: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Running tests under Python 3.6.12: C:\ProgramData\Anaconda3\envs\keras\python.exe
[ RUN      ] CallTreesTest.test_class_method
[  FAILED  ] CallTreesTest.test_class_method
[ RUN      ] CallTreesTest.test_debugger_set_trace
WARNING:tensorflow:Detected `pdb.set_trace()` in converted code. The code generated by AutoGraph is not optimized for step-by-step debugging. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/g3doc/reference/debugging.md.
W1005 19:00:27.744912  9640 ag_logging.py:146] Detected `pdb.set_trace()` in converted code. The code generated by AutoGraph is not optimized for step-by-step debugging. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/g3doc/reference/debugging.md.
Offending AST:
FunctionDef:
| name=u"test_method"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"self"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:273:22, QN: self, DEFINITIONS: (AnnotatedDef[2118509143936],), ORIG_DEFINITIONS: (AnnotatedDef[2118509142088],)}
| | | Name:
| | | | id=u"a"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:273:28, QN: a, DEFINITIONS: (AnnotatedDef[2118509142648],), ORIG_DEFINITIONS: (AnnotatedDef[2118509143992],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(a, self)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_method"
| | | | | | | Str:
| | | | | | | | s=u"test_method_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_method_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_method_scope, DEFINITIONS: (AnnotatedDef[2118508863216],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_method_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_method_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_method_scope, DEFINITIONS: (AnnotatedDef[2118508863216],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_method_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"self"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509142088],), ORIGIN: call_trees_test.py:275:15, QN: self}
| | | | | | | | | | | attr=u"other_method"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:275:15, QN: self.other_method}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_method_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_method_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_method_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"a"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509143992],), ORIGIN: call_trees_test.py:275:33, QN: a}
| | | | | | | | | | | ]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | NameConstant:
| | | | | | | | | | | value=None
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_method_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_method_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:275:15}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=300
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:275:38}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:275:15}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(a, self, self.other_method), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:275:8, SCOPE: Scope{r=(self.other_method, a, test_method_scope.mark_return_value, test_method_scope, self), w=()}, LIVE_VARS_IN: frozenset({a, test_method_scope.mark_return_value, self.other_method, test_method_scope, self})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(self, ag__, self.other_method, a, ag__.FunctionScope, test_method_scope.mark_return_value, test_method_scope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_method_scope,)}, LIVE_VARS_IN: frozenset({ag__, self.other_method, a, ag__.FunctionScope, test_method_scope.mark_return_value, ag__.Feature.ALL, ag__.ConversionOptions, self, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:273:6, SCOPE: Scope{r=(), w=(test_method,)}, BODY_SCOPE: Scope{r=(self, ag__, self.other_method, a, ag__.FunctionScope, test_method_scope.mark_return_value, test_method_scope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_method_scope,)}, 'function_context_name': 'test_method_scope'}

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=()}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118509506344],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118509506344],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"pdb"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (), ORIGIN: call_trees_test.py:245:13, QN: pdb, DEFINITIONS: ()}
| | | | | | | | | attr=u"set_trace"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:245:13, QN: pdb.set_trace}
| | | | | | | | args=[]
| | | | | | | | keywords=[]
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:245:13, ARGS_SCOPE: Scope{r=(), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(pdb.set_trace, pdb), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:245:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, test_fn_scope, pdb.set_trace, pdb), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, pdb.set_trace, pdb})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, pdb, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, pdb.set_trace, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, pdb, ag__.FunctionScope, ag__.Feature.ALL, pdb.set_trace, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:243:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, pdb, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, pdb.set_trace, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_debugger_set_trace
[ RUN      ] CallTreesTest.test_function_chaining
[  FAILED  ] CallTreesTest.test_function_chaining
[ RUN      ] CallTreesTest.test_function_with_call_in_argument

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=()}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496838824],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496838824],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | attr=u"converted_call"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | args=[
| | | | | | | | | Attribute:
| | | | | | | | | | value=Call:
| | | | | | | | | | | func=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | | | args=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"get_one"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (), ORIGIN: call_trees_test.py:113:13, QN: get_one}
| | | | | | | | | | | | Attribute:
| | | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | | | Tuple:
| | | | | | | | | | | | | elts=[]
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | NameConstant:
| | | | | | | | | | | | | value=None
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | ]
| | | | | | | | | | | keywords=[]
| | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:113:13}
| | | | | | | | | | attr=u"__add__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:113:13}
| | | | | | | | | Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | attr=u"callopts"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | Tuple:
| | | | | | | | | | elts=[
| | | | | | | | | | | Num:
| | | | | | | | | | | | n=20
| | | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:113:31}
| | | | | | | | | | ]
| | | | | | | | | | ctx=Load()
| | | | | | | | | NameConstant:
| | | | | | | | | | value=None
| | | | | | | | | Name:
| | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | ]
| | | | | | | | keywords=[]
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:113:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(get_one,), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:113:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, test_fn_scope, get_one), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, get_one})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, get_one, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, ag__.FunctionScope, get_one, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:111:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, get_one, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:81:16, QN: f, DEFINITIONS: (AnnotatedDef[2118509542872],), ORIG_DEFINITIONS: (AnnotatedDef[2118509540352],)}
| | | Name:
| | | | id=u"g"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:81:19, QN: g, DEFINITIONS: (AnnotatedDef[2118509539512],), ORIG_DEFINITIONS: (AnnotatedDef[2118509542312],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(f, g)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496838544],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496838544],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509540352],), ORIGIN: call_trees_test.py:83:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[
| | | | | | | | | | | | Call:
| | | | | | | | | | | | | func=Attribute:
| | | | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | | | | | args=[
| | | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | | id=u"g"
| | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542312],), ORIGIN: call_trees_test.py:83:15, QN: g}
| | | | | | | | | | | | | | Attribute:
| | | | | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | | | | | Tuple:
| | | | | | | | | | | | | | | elts=[]
| | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | NameConstant:
| | | | | | | | | | | | | | | value=None
| | | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | | | ]
| | | | | | | | | | | | | keywords=[]
| | | | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:83:15}
| | | | | | | | | | | ]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | NameConstant:
| | | | | | | | | | | value=None
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:83:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=300
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:83:22}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:83:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(f, g), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:83:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, test_fn_scope, f, g), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, f, g})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, g, f, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, g, f, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:81:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, g, f, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_function_with_call_in_argument
[ RUN      ] CallTreesTest.test_function_with_expression_in_argument

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:57:16, QN: f, DEFINITIONS: (AnnotatedDef[2118509540016],), ORIG_DEFINITIONS: (AnnotatedDef[2118509541584],)}
| | | Name:
| | | | id=u"g"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:57:19, QN: g, DEFINITIONS: (AnnotatedDef[2118509540688],), ORIG_DEFINITIONS: (AnnotatedDef[2118509541976],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(f, g)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118509541528],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118509541528],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509541584],), ORIGIN: call_trees_test.py:59:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[
| | | | | | | | | | | | BinOp:
| | | | | | | | | | | | | left=Call:
| | | | | | | | | | | | | | func=Attribute:
| | | | | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | | | | | | args=[
| | | | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | | | id=u"g"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509541976],), ORIGIN: call_trees_test.py:59:15, QN: g}
| | | | | | | | | | | | | | | Attribute:
| | | | | | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | | | | | | Tuple:
| | | | | | | | | | | | | | | | elts=[]
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | NameConstant:
| | | | | | | | | | | | | | | | value=None
| | | | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | | | | ]
| | | | | | | | | | | | | | keywords=[]
| | | | | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:15}
| | | | | | | | | | | | | op=Add()
| | | | | | | | | | | | | right=Num:
| | | | | | | | | | | | | | n=20
| | | | | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:21}
| | | | | | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:15}
| | | | | | | | | | | ]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | NameConstant:
| | | | | | | | | | | value=None
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=4000
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:27}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(f, g), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:59:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, test_fn_scope, f, g), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, f, g})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, g, f, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, g, f, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:57:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, g, f, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_function_with_expression_in_argument
[ RUN      ] CallTreesTest.test_function_with_kwarg
[  FAILED  ] CallTreesTest.test_function_with_kwarg
[ RUN      ] CallTreesTest.test_function_with_kwargs_keywords

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:141:16, QN: f, DEFINITIONS: (AnnotatedDef[2118509543264],), ORIG_DEFINITIONS: (AnnotatedDef[2118509540520],)}
| | | Name:
| | | | id=u"a"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:141:19, QN: a, DEFINITIONS: (AnnotatedDef[2118509540184],), ORIG_DEFINITIONS: (AnnotatedDef[2118509540632],)}
| | | Name:
| | | | id=u"b"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:141:22, QN: b, DEFINITIONS: (AnnotatedDef[2118509540576],), ORIG_DEFINITIONS: (AnnotatedDef[2118509539792],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(a, b, f)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496841400],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496841400],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509540520],), ORIGIN: call_trees_test.py:143:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"a"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509540632],), ORIGIN: call_trees_test.py:143:15, QN: a}
| | | | | | | | | | | ]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | Dict:
| | | | | | | | | | | keys=[
| | | | | | | | | | | | Str:
| | | | | | | | | | | | | s=u"c"
| | | | | | | | | | | ]
| | | | | | | | | | | values=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"b"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509539792],), ORIGIN: call_trees_test.py:143:20, QN: b}
| | | | | | | | | | | ]
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:143:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=300
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:143:25}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:143:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(a, b, f), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:143:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, b, f, a, test_fn_scope), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, a, test_fn_scope, b, f})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, b, f, a, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, b, f, a, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:141:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, b, f, a, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:16, QN: f, DEFINITIONS: (AnnotatedDef[2118509540352],), ORIG_DEFINITIONS: (AnnotatedDef[2118509542816],)}
| | | Name:
| | | | id=u"a"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:19, QN: a, DEFINITIONS: (AnnotatedDef[2118509540296],), ORIG_DEFINITIONS: (AnnotatedDef[2118509541696],)}
| | | Name:
| | | | id=u"b"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:22, QN: b, DEFINITIONS: (AnnotatedDef[2118509541304],), ORIG_DEFINITIONS: (AnnotatedDef[2118509539680],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=Name:
| | | id=u"kwargs"
| | | ctx=Param()
| | | annotation=None
| | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:27, QN: kwargs, DEFINITIONS: (AnnotatedDef[2118509543264],), ORIG_DEFINITIONS: (AnnotatedDef[2118509542928],)}
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(a, b, f, kwargs)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496838208],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496838208],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542816],), ORIGIN: call_trees_test.py:215:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"a"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509541696],), ORIGIN: call_trees_test.py:215:15, QN: a}
| | | | | | | | | | | ]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | Call:
| | | | | | | | | | | func=Name:
| | | | | | | | | | | | id=u"dict"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: dict}
| | | | | | | | | | | args=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"kwargs"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542928],), ORIGIN: call_trees_test.py:215:25, QN: kwargs}
| | | | | | | | | | | ]
| | | | | | | | | | | keywords=[
| | | | | | | | | | | | keyword:
| | | | | | | | | | | | | arg=None
| | | | | | | | | | | | | value=Dict:
| | | | | | | | | | | | | | keys=[
| | | | | | | | | | | | | | | Str:
| | | | | | | | | | | | | | | | s=u"b"
| | | | | | | | | | | | | | ]
| | | | | | | | | | | | | | values=[
| | | | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | | | id=u"b"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509539680],), ORIGIN: call_trees_test.py:215:20, QN: b}
| | | | | | | | | | | | | | ]
| | | | | | | | | | | ]
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=5
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:35}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(a, b, f, kwargs), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, kwargs, b, f, a, test_fn_scope), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, a, test_fn_scope, kwargs, b, f})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, kwargs, b, f, a, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, kwargs, b, f, a, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, kwargs, b, f, a, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_function_with_kwargs_keywords
[ RUN      ] CallTreesTest.test_function_with_kwargs_starargs

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:16, QN: f, DEFINITIONS: (AnnotatedDef[2118509541584],), ORIG_DEFINITIONS: (AnnotatedDef[2118509542312],)}
| | | Name:
| | | | id=u"a"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:19, QN: a, DEFINITIONS: (AnnotatedDef[2118509542144],), ORIG_DEFINITIONS: (AnnotatedDef[2118509540408],)}
| | ]
| | vararg=Name:
| | | id=u"args"
| | | ctx=Param()
| | | annotation=None
| | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:23, QN: args, DEFINITIONS: (AnnotatedDef[2118509541976],), ORIG_DEFINITIONS: (AnnotatedDef[2118509541304],)}
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=Name:
| | | id=u"kwargs"
| | | ctx=Param()
| | | annotation=None
| | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:31, QN: kwargs, DEFINITIONS: (AnnotatedDef[2118509541136],), ORIG_DEFINITIONS: (AnnotatedDef[2118509540128],)}
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(a, f, args, kwargs)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496841344],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118496841344],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542312],), ORIGIN: call_trees_test.py:161:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | BinOp:
| | | | | | | | | | | left=Tuple:
| | | | | | | | | | | | elts=[
| | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | id=u"a"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509540408],), ORIGIN: call_trees_test.py:161:15, QN: a}
| | | | | | | | | | | | ]
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | op=Add()
| | | | | | | | | | | right=Call:
| | | | | | | | | | | | func=Name:
| | | | | | | | | | | | | id=u"tuple"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: tuple}
| | | | | | | | | | | | args=[
| | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | id=u"args"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509541304],), ORIGIN: call_trees_test.py:161:19, QN: args}
| | | | | | | | | | | | ]
| | | | | | | | | | | | keywords=[]
| | | | | | | | | | Call:
| | | | | | | | | | | func=Name:
| | | | | | | | | | | | id=u"dict"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: dict}
| | | | | | | | | | | args=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"kwargs"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509540128],), ORIGIN: call_trees_test.py:161:27, QN: kwargs}
| | | | | | | | | | | ]
| | | | | | | | | | | keywords=[
| | | | | | | | | | | | keyword:
| | | | | | | | | | | | | arg=None
| | | | | | | | | | | | | value=Dict:
| | | | | | | | | | | | | | keys=[]
| | | | | | | | | | | | | | values=[]
| | | | | | | | | | | ]
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=5
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:37}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(a, f, args, kwargs), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, kwargs, f, a, args, test_fn_scope), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, a, args, kwargs, test_fn_scope, f})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, kwargs, f, a, ag__.FunctionScope, args, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, kwargs, f, a, ag__.FunctionScope, args, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, kwargs, f, a, ag__.FunctionScope, args, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_function_with_kwargs_starargs
[ RUN      ] CallTreesTest.test_function_with_kwargs_starargs_only
[  FAILED  ] CallTreesTest.test_function_with_kwargs_starargs_only
[ RUN      ] CallTreesTest.test_normal_function

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=()}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118508862880],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Assign:
| | | | | targets=[
| | | | | | Name:
| | | | | | | id=u"args"
| | | | | | | ctx=Store()
| | | | | | | annotation=None
| | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542928],), ORIGIN: call_trees_test.py:193:6, QN: args, DEFINITIONS: (AnnotatedDef[2118508863272],)}
| | | | | ]
| | | | | value=List:
| | | | | | elts=[
| | | | | | | Num:
| | | | | | | | n=1
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:193:14}
| | | | | | | Num:
| | | | | | | | n=20
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:193:17}
| | | | | | | Num:
| | | | | | | | n=300
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:193:21}
| | | | | | ]
| | | | | | ctx=Load()
| | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:193:13}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:193:6, SCOPE: Scope{r=(), w=(args,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, f})}
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118508862880],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (), ORIGIN: call_trees_test.py:195:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | BinOp:
| | | | | | | | | | | left=Tuple:
| | | | | | | | | | | | elts=[]
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | op=Add()
| | | | | | | | | | | right=Call:
| | | | | | | | | | | | func=Name:
| | | | | | | | | | | | | id=u"tuple"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: tuple}
| | | | | | | | | | | | args=[
| | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | id=u"args"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542928],), ORIGIN: call_trees_test.py:195:16, QN: args}
| | | | | | | | | | | | ]
| | | | | | | | | | | | keywords=[]
| | | | | | | | | | NameConstant:
| | | | | | | | | | | value=None
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:195:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=4000
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:195:24}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:195:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(f, args), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:195:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, test_fn_scope, f, args), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, f, args})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, f, ag__.FunctionScope, args, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope, args)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, ag__.FunctionScope, f, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:191:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, f, ag__.FunctionScope, args, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope, args)}, 'function_context_name': 'test_fn_scope'}

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:39:16, QN: f, DEFINITIONS: (AnnotatedDef[2118509541864],), ORIG_DEFINITIONS: (AnnotatedDef[2118509542872],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=None
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(f,)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__, ag__.ConversionOptions, ag__.Feature, ag__.Feature.ALL), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118509540016],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[2118509540016],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[2118509542872],), ORIGIN: call_trees_test.py:41:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | NameConstant:
| | | | | | | | | | | value=None
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:41:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=20
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:41:19}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:41:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(f,), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:41:6, SCOPE: Scope{r=(test_fn_scope.mark_return_value, test_fn_scope, f), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, test_fn_scope, f})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, f, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({test_fn_scope.mark_return_value, ag__, ag__.FunctionScope, f, ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature})}
| ]
| decorator_list=None
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:39:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(test_fn_scope.mark_return_value, ag__, f, ag__.FunctionScope, ag__.Feature.ALL, test_fn_scope, ag__.ConversionOptions, ag__.Feature), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_normal_function
[ RUN      ] CallTreesTest.test_object_method
[  FAILED  ] CallTreesTest.test_object_method
[ RUN      ] CallTreesTest.test_session
[  SKIPPED ] CallTreesTest.test_session
======================================================================
ERROR: test_class_method (__main__.CallTreesTest)
CallTreesTest.test_class_method
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 283, in test_class_method
    {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_debugger_set_trace (__main__.CallTreesTest)
CallTreesTest.test_debugger_set_trace
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 251, in test_debugger_set_trace
    {'pdb': pdb}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_chaining (__main__.CallTreesTest)
CallTreesTest.test_function_chaining
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 119, in test_function_chaining
    {'get_one': get_one}, ()) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_with_call_in_argument (__main__.CallTreesTest)
CallTreesTest.test_function_with_call_in_argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 87, in test_function_with_call_in_argument
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_with_expression_in_argument (__main__.CallTreesTest)
CallTreesTest.test_function_with_expression_in_argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 63, in test_function_with_expression_in_argument
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_with_kwarg (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwarg
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 147, in test_function_with_kwarg
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_with_kwargs_keywords (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwargs_keywords
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 219, in test_function_with_kwargs_keywords
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_with_kwargs_starargs (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwargs_starargs
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 165, in test_function_with_kwargs_starargs
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_function_with_kwargs_starargs_only (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwargs_starargs_only
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 201, in test_function_with_kwargs_starargs_only
    {'f': f}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_normal_function (__main__.CallTreesTest)
CallTreesTest.test_normal_function
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 45, in test_normal_function
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

======================================================================
ERROR: test_object_method (__main__.CallTreesTest)
CallTreesTest.test_object_method
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 315, in test_object_method
    {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 329, in visit_FunctionDef
    self.decorators(node, 1 if self.indentation else 2)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 277, in decorators
    for decorator in node.decorator_list:
TypeError: 'NoneType' object is not iterable

----------------------------------------------------------------------
Ran 12 tests in 1.297s

FAILED (errors=11, skipped=1)