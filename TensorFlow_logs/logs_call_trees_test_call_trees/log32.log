2020-10-05 19:01:31.230438: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Running tests under Python 3.6.12: C:\ProgramData\Anaconda3\envs\keras\python.exe
[ RUN      ] CallTreesTest.test_class_method
[       OK ] CallTreesTest.test_class_method
[ RUN      ] CallTreesTest.test_debugger_set_trace
WARNING:tensorflow:Detected `pdb.set_trace()` in converted code. The code generated by AutoGraph is not optimized for step-by-step debugging. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/g3doc/reference/debugging.md.
W1005 19:01:36.210011  9120 ag_logging.py:146] Detected `pdb.set_trace()` in converted code. The code generated by AutoGraph is not optimized for step-by-step debugging. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/g3doc/reference/debugging.md.
[       OK ] CallTreesTest.test_debugger_set_trace
[ RUN      ] CallTreesTest.test_function_chaining
[       OK ] CallTreesTest.test_function_chaining
[ RUN      ] CallTreesTest.test_function_with_call_in_argument
[       OK ] CallTreesTest.test_function_with_call_in_argument
[ RUN      ] CallTreesTest.test_function_with_expression_in_argument
[       OK ] CallTreesTest.test_function_with_expression_in_argument
[ RUN      ] CallTreesTest.test_function_with_kwarg
[  FAILED  ] CallTreesTest.test_function_with_kwarg
[ RUN      ] CallTreesTest.test_function_with_kwargs_keywords
Offending compiled code:
# coding=utf-8
def test_fn(f, a, b):
  with ag__.FunctionScope('test_fn', 'test_fn_scope', ag__.ConversionOptions(recursive=True, user_requested=False, optional_features=ag__.Feature.ALL, internal_convert_user_code=True)) as test_fn_scope:
    return test_fn_scope.mark_return_value(ag__.converted_call(f, test_fn_scope.callopts, (a,), dict(b, **{}), test_fn_scope) + 300)

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:16, QN: f, DEFINITIONS: (AnnotatedDef[1432647094344],), ORIG_DEFINITIONS: (AnnotatedDef[1432647023360],)}
| | | Name:
| | | | id=u"a"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:19, QN: a, DEFINITIONS: (AnnotatedDef[1432647094736],), ORIG_DEFINITIONS: (AnnotatedDef[1432634617528],)}
| | | Name:
| | | | id=u"b"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:22, QN: b, DEFINITIONS: (AnnotatedDef[1432647095744],), ORIG_DEFINITIONS: (AnnotatedDef[1432647021512],)}
| | ]
| | vararg=None
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=Name:
| | | id=u"kwargs"
| | | ctx=Param()
| | | annotation=None
| | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:27, QN: kwargs, DEFINITIONS: (AnnotatedDef[1432647095296],), ORIG_DEFINITIONS: (AnnotatedDef[1432647023416],)}
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(b, kwargs, f, a)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__.Feature.ALL, ag__.Feature, ag__), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature, ag__), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[1432647020896],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature, ag__.Feature.ALL, ag__.ConversionOptions), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[1432647020896],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647023360],), ORIGIN: call_trees_test.py:215:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | Tuple:
| | | | | | | | | | | elts=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"a"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432634617528],), ORIGIN: call_trees_test.py:215:15, QN: a}
| | | | | | | | | | | ]
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | Call:
| | | | | | | | | | | func=Name:
| | | | | | | | | | | | id=u"dict"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: dict}
| | | | | | | | | | | args=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"b"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647021512],), ORIGIN: call_trees_test.py:215:20, QN: b}
| | | | | | | | | | | ]
| | | | | | | | | | | keywords=[
| | | | | | | | | | | | keyword:
| | | | | | | | | | | | | arg=None
| | | | | | | | | | | | | value=Dict:
| | | | | | | | | | | | | | keys=[
| | | | | | | | | | | | | | | Str:
| | | | | | | | | | | | | | | | s=None
| | | | | | | | | | | | | | ]
| | | | | | | | | | | | | | values=[
| | | | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | | | id=u"kwargs"
| | | | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647023416],), ORIGIN: call_trees_test.py:215:25, QN: kwargs}
| | | | | | | | | | | | | | ]
| | | | | | | | | | | ]
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=5
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:35}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(f, kwargs, b, a), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:215:6, SCOPE: Scope{r=(f, test_fn_scope, a, test_fn_scope.mark_return_value, kwargs, b), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope, f, test_fn_scope.mark_return_value, b, kwargs, a})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(b, ag__, f, ag__.FunctionScope, ag__.Feature, test_fn_scope, ag__.Feature.ALL, test_fn_scope.mark_return_value, ag__.ConversionOptions, kwargs, a), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({f, ag__, ag__.FunctionScope, ag__.Feature, a, ag__.Feature.ALL, test_fn_scope.mark_return_value, ag__.ConversionOptions, kwargs, b})}
| ]
| decorator_list=[]
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:213:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(b, ag__, f, ag__.FunctionScope, ag__.Feature, test_fn_scope, ag__.Feature.ALL, test_fn_scope.mark_return_value, ag__.ConversionOptions, kwargs, a), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_function_with_kwargs_keywords
[ RUN      ] CallTreesTest.test_function_with_kwargs_starargs

Offending AST:
FunctionDef:
| name=u"test_fn"
| args=arguments:
| | args=[
| | | Name:
| | | | id=u"f"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:16, QN: f, DEFINITIONS: (AnnotatedDef[1432647045640],), ORIG_DEFINITIONS: (AnnotatedDef[1432647047208],)}
| | | Name:
| | | | id=u"a"
| | | | ctx=Param()
| | | | annotation=None
| | | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:19, QN: a, DEFINITIONS: (AnnotatedDef[1432647045864],), ORIG_DEFINITIONS: (AnnotatedDef[1432647097088],)}
| | ]
| | vararg=Name:
| | | id=u"args"
| | | ctx=Param()
| | | annotation=None
| | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:23, QN: args, DEFINITIONS: (AnnotatedDef[1432647047320],), ORIG_DEFINITIONS: (AnnotatedDef[1432647047824],)}
| | kwonlyargs=[]
| | kw_defaults=[]
| | kwarg=Name:
| | | id=u"kwargs"
| | | ctx=Param()
| | | annotation=None
| | | ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:31, QN: kwargs, DEFINITIONS: (AnnotatedDef[1432647096248],), ORIG_DEFINITIONS: (AnnotatedDef[1432647046984],)}
| | defaults=[]
| | ___pyct_anno={SCOPE: Scope{r=(), w=(kwargs, args, f, a)}}
| body=[
| | With:
| | | items=[
| | | | withitem:
| | | | | context_expr=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"ag__"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | attr=u"FunctionScope"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: ag__.FunctionScope}
| | | | | | args=[
| | | | | | | Str:
| | | | | | | | s=u"test_fn"
| | | | | | | Str:
| | | | | | | | s=u"test_fn_scope"
| | | | | | | Call:
| | | | | | | | func=Attribute:
| | | | | | | | | value=Name:
| | | | | | | | | | id=u"ag__"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | annotation=None
| | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | attr=u"ConversionOptions"
| | | | | | | | | ctx=Load()
| | | | | | | | | ___pyct_anno={QN: ag__.ConversionOptions}
| | | | | | | | args=[]
| | | | | | | | keywords=[
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"recursive"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"user_requested"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=False
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"optional_features"
| | | | | | | | | | value=Attribute:
| | | | | | | | | | | value=Attribute:
| | | | | | | | | | | | value=Name:
| | | | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: ag__, DEFINITIONS: ()}
| | | | | | | | | | | | attr=u"Feature"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | ___pyct_anno={QN: ag__.Feature}
| | | | | | | | | | | attr=u"ALL"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: ag__.Feature.ALL}
| | | | | | | | | keyword:
| | | | | | | | | | arg=u"internal_convert_user_code"
| | | | | | | | | | value=NameConstant:
| | | | | | | | | | | value=True
| | | | | | | | ]
| | | | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__.Feature.ALL, ag__.Feature, ag__), w=()}}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(ag__.Feature.ALL, ag__.ConversionOptions, ag__.Feature, ag__), w=()}}
| | | | | optional_vars=Name:
| | | | | | id=u"test_fn_scope"
| | | | | | ctx=Store()
| | | | | | annotation=None
| | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[1432647096584],)}
| | | | | ___pyct_anno={SCOPE: Scope{r=(ag__, ag__.FunctionScope, ag__.Feature, ag__.Feature.ALL, ag__.ConversionOptions), w=(test_fn_scope,)}}
| | | ]
| | | body=[
| | | | Return:
| | | | | value=Call:
| | | | | | func=Attribute:
| | | | | | | value=Name:
| | | | | | | | id=u"test_fn_scope"
| | | | | | | | ctx=Load()
| | | | | | | | annotation=None
| | | | | | | | ___pyct_anno={QN: test_fn_scope, DEFINITIONS: (AnnotatedDef[1432647096584],)}
| | | | | | | attr=u"mark_return_value"
| | | | | | | ctx=Load()
| | | | | | | ___pyct_anno={QN: test_fn_scope.mark_return_value}
| | | | | | args=[
| | | | | | | BinOp:
| | | | | | | | left=Call:
| | | | | | | | | func=Attribute:
| | | | | | | | | | value=Name:
| | | | | | | | | | | id=u"ag__"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: ag__}
| | | | | | | | | | attr=u"converted_call"
| | | | | | | | | | ctx=Load()
| | | | | | | | | | ___pyct_anno={QN: ag__.converted_call}
| | | | | | | | | args=[
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"f"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647047208],), ORIGIN: call_trees_test.py:161:13, QN: f}
| | | | | | | | | | Attribute:
| | | | | | | | | | | value=Name:
| | | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | annotation=None
| | | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | | | attr=u"callopts"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope.callopts}
| | | | | | | | | | BinOp:
| | | | | | | | | | | left=Tuple:
| | | | | | | | | | | | elts=[
| | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | id=u"a"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647097088],), ORIGIN: call_trees_test.py:161:15, QN: a}
| | | | | | | | | | | | ]
| | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | op=Add()
| | | | | | | | | | | right=Call:
| | | | | | | | | | | | func=Name:
| | | | | | | | | | | | | id=u"tuple"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={QN: tuple}
| | | | | | | | | | | | args=[
| | | | | | | | | | | | | Name:
| | | | | | | | | | | | | | id=u"args"
| | | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647047824],), ORIGIN: call_trees_test.py:161:19, QN: args}
| | | | | | | | | | | | ]
| | | | | | | | | | | | keywords=[]
| | | | | | | | | | Dict:
| | | | | | | | | | | keys=[
| | | | | | | | | | | | Str:
| | | | | | | | | | | | | s=None
| | | | | | | | | | | ]
| | | | | | | | | | | values=[
| | | | | | | | | | | | Name:
| | | | | | | | | | | | | id=u"kwargs"
| | | | | | | | | | | | | ctx=Load()
| | | | | | | | | | | | | annotation=None
| | | | | | | | | | | | | ___pyct_anno={ORIG_DEFINITIONS: (AnnotatedDef[1432647046984],), ORIGIN: call_trees_test.py:161:27, QN: kwargs}
| | | | | | | | | | | ]
| | | | | | | | | | Name:
| | | | | | | | | | | id=u"test_fn_scope"
| | | | | | | | | | | ctx=Load()
| | | | | | | | | | | annotation=None
| | | | | | | | | | | ___pyct_anno={QN: test_fn_scope}
| | | | | | | | | ]
| | | | | | | | | keywords=[]
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:13}
| | | | | | | | op=Add()
| | | | | | | | right=Num:
| | | | | | | | | n=5
| | | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:37}
| | | | | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:13}
| | | | | | ]
| | | | | | keywords=[]
| | | | | | ___pyct_anno={ARGS_SCOPE: Scope{r=(f, args, kwargs, a), w=()}}
| | | | | ___pyct_anno={ORIGIN: call_trees_test.py:161:6, SCOPE: Scope{r=(f, test_fn_scope, a, test_fn_scope.mark_return_value, kwargs, args), w=()}, LIVE_VARS_IN: frozenset({test_fn_scope, f, test_fn_scope.mark_return_value, args, kwargs, a})}
| | | ]
| | | ___pyct_anno={BODY_SCOPE: Scope{r=(f, ag__, ag__.FunctionScope, ag__.Feature, test_fn_scope, ag__.Feature.ALL, test_fn_scope.mark_return_value, args, ag__.ConversionOptions, kwargs, a), w=(test_fn_scope,)}, LIVE_VARS_IN: frozenset({f, ag__, ag__.FunctionScope, ag__.Feature, a, ag__.Feature.ALL, test_fn_scope.mark_return_value, ag__.ConversionOptions, kwargs, args})}
| ]
| decorator_list=[]
| returns=None
| ___pyct_anno={'lineno': 3, ORIGIN: call_trees_test.py:159:4, SCOPE: Scope{r=(), w=(test_fn,)}, BODY_SCOPE: Scope{r=(f, ag__, ag__.FunctionScope, ag__.Feature, test_fn_scope, ag__.Feature.ALL, test_fn_scope.mark_return_value, args, ag__.ConversionOptions, kwargs, a), w=(test_fn_scope,)}, 'function_context_name': 'test_fn_scope'}
[  FAILED  ] CallTreesTest.test_function_with_kwargs_starargs
[ RUN      ] CallTreesTest.test_function_with_kwargs_starargs_only
[       OK ] CallTreesTest.test_function_with_kwargs_starargs_only
[ RUN      ] CallTreesTest.test_normal_function
[       OK ] CallTreesTest.test_normal_function
[ RUN      ] CallTreesTest.test_object_method
[       OK ] CallTreesTest.test_object_method
[ RUN      ] CallTreesTest.test_session
[  SKIPPED ] CallTreesTest.test_session
======================================================================
ERROR: test_function_with_kwarg (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwarg
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 149, in test_function_with_kwarg
    self.assertEqual(result.test_fn(lambda a, c: a + c, 1, 20), 321)
  File "C:\Users\mutation\AppData\Local\Temp\tmp7ffele1c.py", line 4, in test_fn
    return test_fn_scope.mark_return_value(ag__.converted_call(f, test_fn_scope.callopts, (a,), dict(b, **{}), test_fn_scope) + 300)
TypeError: 'int' object is not iterable

======================================================================
FAIL: test_function_with_kwargs_keywords (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwargs_keywords
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 219, in test_function_with_kwargs_keywords
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 335, in visit_FunctionDef
    self.body(node.body)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 226, in body
    self.write(*statements)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 407, in visit_With
    self.body(node.body)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 226, in body
    self.write(*statements)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 488, in visit_Return
    self.conditional_write(' ', node.value)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 214, in conditional_write
    self.write(*stuff)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 533, in visit_Call
    write(write_comma, arg)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 750, in visit_BinOp
    self.write(left, get_op_symbol(op, ' %s '), right)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 533, in visit_Call
    write(write_comma, arg)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 540, in visit_Call
    write(write_comma, arg, '=' if arg else '**', keyword.value)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 741, in visit_Dict
    ': ' if key else '**', value)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 652, in visit_Str
    self._handle_string_constant(node, node.s)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 632, in _handle_string_constant
    assert value is not None, "Node value cannot be None"
AssertionError: Node value cannot be None

======================================================================
FAIL: test_function_with_kwargs_starargs (__main__.CallTreesTest)
CallTreesTest.test_function_with_kwargs_starargs
----------------------------------------------------------------------
Traceback (most recent call last):
  File "call_trees_test.py", line 165, in test_function_with_kwargs_starargs
    with self.converted(test_fn, (function_scopes, call_trees), {}) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 105, in converted
    with self.compiled(node, namespace, tf_symbols) as result:
  File "C:\ProgramData\Anaconda3\envs\keras\lib\contextlib.py", line 81, in __enter__
    return next(self.gen)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\core\converter_testing.py", line 69, in compiled
    node, include_source_map=True)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 134, in ast_to_object
    source = ast_to_source(nodes, indentation=indentation)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\tensorflow_core\python\autograph\pyct\compiler.py", line 61, in ast_to_source
    generator.visit(n)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 335, in visit_FunctionDef
    self.body(node.body)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 226, in body
    self.write(*statements)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 407, in visit_With
    self.body(node.body)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 226, in body
    self.write(*statements)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 488, in visit_Return
    self.conditional_write(' ', node.value)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 214, in conditional_write
    self.write(*stuff)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 533, in visit_Call
    write(write_comma, arg)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 750, in visit_BinOp
    self.write(left, get_op_symbol(op, ' %s '), right)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 533, in visit_Call
    write(write_comma, arg)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 741, in visit_Dict
    ': ' if key else '**', value)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 178, in write
    visit(item)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\node_util.py", line 143, in visit
    return visitor(node)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 652, in visit_Str
    self._handle_string_constant(node, node.s)
  File "C:\ProgramData\Anaconda3\envs\keras\lib\site-packages\astor\code_gen.py", line 632, in _handle_string_constant
    assert value is not None, "Node value cannot be None"
AssertionError: Node value cannot be None

----------------------------------------------------------------------
Ran 12 tests in 1.312s

FAILED (failures=2, errors=1, skipped=1)