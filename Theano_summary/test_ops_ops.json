[{"node type": "expr_stmt", "line number": "(101, 18)", "node content": "<ExprStmt: view_op = ViewOp()@101,0>", "related code": "view_op = ViewOp()\n"}, {"node type": "expr_stmt", "line number": "(126, 29)", "node content": "<ExprStmt: _output_guard = OutputGuard()@126,0>", "related code": "_output_guard = OutputGuard()\n"}, {"node type": "expr_stmt", "line number": "(206, 27)", "node content": "<ExprStmt: deep_copy_op = DeepCopyOp()@206,0>", "related code": "deep_copy_op = DeepCopyOp()\n"}, {"node type": "expr_stmt", "line number": "(315, 15)", "node content": "<ExprStmt: shape = Shape()@315,0>", "related code": "shape = Shape()\n"}, {"node type": "expr_stmt", "line number": "(316, 14)", "node content": "<ExprStmt: _shape = shape@316,0>", "related code": "_shape = shape  # was used in the past, now use shape directly.\n"}, {"node type": "expr_stmt", "line number": "(486, 21)", "node content": "<ExprStmt: shape_i_op.cache = {}@486,0>", "related code": "shape_i_op.cache = {}\n"}, {"node type": "expr_stmt", "line number": "(510, 21)", "node content": "<ExprStmt: # List of Theano Types that one can add an extra dimension and for which # Scan can deal with. expandable_types = ()@510,0>", "related code": "expandable_types = ()\n"}, {"node type": "expr_stmt", "line number": "(934, 30)", "node content": "<ExprStmt: specify_shape = SpecifyShape()@934,0>", "related code": "specify_shape = SpecifyShape()\n"}, {"node type": "expr_stmt", "line number": "(38, 53)", "node content": "<ExprStmt: ViewOp.c_code_and_version[type] = (code, version)@38,4>", "related code": "    ViewOp.c_code_and_version[type] = (code, version)\n"}, {"node type": "not_test", "line number": "(608, 44)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@608,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: itypes@608,22>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@608,31>, <Operator: ,>, <Name: tuple@608,37>]), <Operator: )>])]), <Operator: )>])])])", "related code": "    if not isinstance(itypes, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(612, 44)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@612,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: otypes@612,22>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@612,31>, <Operator: ,>, <Name: tuple@612,37>]), <Operator: )>])]), <Operator: )>])])])", "related code": "    if not isinstance(otypes, (list, tuple)):\n"}, {"node type": "and_test", "line number": "(621, 60)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: infer_shape@621,7>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: callable@621,39>, PythonNode(trailer, [<Operator: (>, <Name: infer_shape@621,48>, <Operator: )>])])])])", "related code": "    if infer_shape is not None and not callable(infer_shape):\n"}, {"node type": "keyword", "line number": "(53, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "keyword", "line number": "(124, 23)", "node content": "<Keyword: False>", "related code": "    check_input = False\n"}, {"node type": "keyword", "line number": "(153, 23)", "node content": "<Keyword: False>", "related code": "    check_input = False\n"}, {"node type": "keyword", "line number": "(155, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "keyword", "line number": "(238, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "keyword", "line number": "(245, 23)", "node content": "<Keyword: False>", "related code": "    check_input = False\n"}, {"node type": "keyword", "line number": "(329, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "keyword", "line number": "(336, 23)", "node content": "<Keyword: False>", "related code": "    check_input = False\n"}, {"node type": "keyword", "line number": "(608, 10)", "node content": "<Keyword: not>", "related code": "    if not isinstance(itypes, (list, tuple)):\n"}, {"node type": "keyword", "line number": "(612, 10)", "node content": "<Keyword: not>", "related code": "    if not isinstance(otypes, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(621, 60)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: callable@621,39>, PythonNode(trailer, [<Operator: (>, <Name: infer_shape@621,48>, <Operator: )>])])])", "related code": "    if infer_shape is not None and not callable(infer_shape):\n"}, {"node type": "keyword", "line number": "(669, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "keyword", "line number": "(675, 23)", "node content": "<Keyword: False>", "related code": "    check_input = False\n"}, {"node type": "keyword", "line number": "(677, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "keyword", "line number": "(839, 18)", "node content": "<Keyword: True>", "related code": "    _f16_ok = True\n"}, {"node type": "not_test", "line number": "(251, 45)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@251,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: x@251,26>, <Operator: ,>, PythonNode(atom_expr, [<Name: theano@251,29>, PythonNode(trailer, [<Operator: .>, <Name: Variable@251,36>])])]), <Operator: )>])])])", "related code": "        if not isinstance(x, theano.Variable):\n"}, {"node type": "not_test", "line number": "(368, 45)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@368,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: x@368,26>, <Operator: ,>, PythonNode(atom_expr, [<Name: theano@368,29>, PythonNode(trailer, [<Operator: .>, <Name: Variable@368,36>])])]), <Operator: )>])])])", "related code": "        if not isinstance(x, theano.Variable):\n"}, {"node type": "not_test", "line number": "(556, 46)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@556,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: outs@556,26>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@556,33>, <Operator: ,>, <Name: tuple@556,39>]), <Operator: )>])]), <Operator: )>])])])", "related code": "        if not isinstance(outs, (list, tuple)):\n"}, {"node type": "keyword", "line number": "(621, 38)", "node content": "<Keyword: not>", "related code": "    if infer_shape is not None and not callable(infer_shape):\n"}, {"node type": "number", "line number": "(47, 17)", "node content": "<Number: 0>", "related code": "    view_map = {0: [0]}\n"}, {"node type": "number", "line number": "(122, 20)", "node content": "<Number: 0>", "related code": "    destroy_map = {0: [0]}\n"}, {"node type": "keyword", "line number": "(251, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(x, theano.Variable):\n"}, {"node type": "string", "line number": "(338, 20)", "node content": "<String: \"i\">", "related code": "    __props__ = (\"i\",)\n"}, {"node type": "keyword", "line number": "(368, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(x, theano.Variable):\n"}, {"node type": "operator", "line number": "(370, 20)", "node content": "<Operator: <=>", "related code": "        if x.ndim <= self.i:\n"}, {"node type": "keyword", "line number": "(556, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(outs, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(610, 41)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@610,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: t@610,26>, <Operator: ,>, PythonNode(atom_expr, [<Name: theano@610,29>, PythonNode(trailer, [<Operator: .>, <Name: Type@610,36>])])]), <Operator: )>])])])", "related code": "    if any(not isinstance(t, theano.Type) for t in itypes):\n"}, {"node type": "not_test", "line number": "(614, 41)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@614,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: t@614,26>, <Operator: ,>, PythonNode(atom_expr, [<Name: theano@614,29>, PythonNode(trailer, [<Operator: .>, <Name: Type@614,36>])])]), <Operator: )>])])])", "related code": "    if any(not isinstance(t, theano.Type) for t in otypes):\n"}, {"node type": "keyword", "line number": "(621, 25)", "node content": "<Keyword: not>", "related code": "    if infer_shape is not None and not callable(infer_shape):\n"}, {"node type": "number", "line number": "(668, 17)", "node content": "<Number: 0>", "related code": "    view_map = {0: [0]}\n"}, {"node type": "string", "line number": "(676, 23)", "node content": "<String: \"axis\">", "related code": "    __props__ = (\"axis\",)\n"}, {"node type": "number", "line number": "(833, 17)", "node content": "<Number: 0>", "related code": "    view_map = {0: [0]}\n"}, {"node type": "number", "line number": "(47, 21)", "node content": "<Number: 0>", "related code": "    view_map = {0: [0]}\n"}, {"node type": "number", "line number": "(122, 24)", "node content": "<Number: 0>", "related code": "    destroy_map = {0: [0]}\n"}, {"node type": "operator", "line number": "(345, 19)", "node content": "<Operator: ==>", "related code": "        assert i == int(i)\n"}, {"node type": "not_test", "line number": "(389, 20)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: v@389,19>])", "related code": "            if not v:\n"}, {"node type": "keyword", "line number": "(541, 36)", "node content": "<Keyword: not>", "related code": "        if self.__infer_shape is not None:\n"}, {"node type": "operator", "line number": "(549, 33)", "node content": "<Operator: ^>", "related code": "        return hash(type(self)) ^ hash(self.__fn)\n"}]
