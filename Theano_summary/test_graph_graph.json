[{"node type": "expr_stmt", "line number": "(22, 31)", "node content": "<ExprStmt: # Lazy imports to avoid circular dependencies. is_same_graph_with_merge = None@22,0>", "related code": "is_same_graph_with_merge = None\n"}, {"node type": "expr_stmt", "line number": "(23, 25)", "node content": "<ExprStmt: equal_computations = None@23,0>", "related code": "equal_computations = None\n"}, {"node type": "expr_stmt", "line number": "(25, 19)", "node content": "<ExprStmt: NoParams = object()@25,0>", "related code": "NoParams = object()\n"}, {"node type": "expr_stmt", "line number": "(1106, 28)", "node content": "<ExprStmt: default_leaf_formatter = str@1106,0>", "related code": "default_leaf_formatter = str\n"}, {"node type": "string", "line number": "(19, 37)", "node content": "<String: \"restructuredtext en\">", "related code": "__docformat__ = \"restructuredtext en\"\n"}, {"node type": "expr_stmt", "line number": "(257, 81)", "node content": "<ExprStmt: # convenience properties     nin = property(lambda self: len(self.inputs), doc='same as len(self.inputs)')@257,4>", "related code": "    nin = property(lambda self: len(self.inputs), doc='same as len(self.inputs)')\n"}, {"node type": "expr_stmt", "line number": "(262, 84)", "node content": "<ExprStmt: nout = property(lambda self: len(self.outputs), doc='same as len(self.outputs)')@262,4>", "related code": "    nout = property(lambda self: len(self.outputs), doc='same as len(self.outputs)')\n"}, {"node type": "expr_stmt", "line number": "(267, 94)", "node content": "<ExprStmt: params_type = property(lambda self: self.op.params_type, doc='type to use for the params')@267,4>", "related code": "    params_type = property(lambda self: self.op.params_type, doc='type to use for the params')\n"}, {"node type": "expr_stmt", "line number": "(376, 24)", "node content": "<ExprStmt: # __slots__ = ['type', 'owner', 'index', 'name']     __count__ = count(0)@376,4>", "related code": "    __count__ = count(0)\n"}, {"node type": "expr_stmt", "line number": "(543, 31)", "node content": "<ExprStmt: #  refer to doc in nodes_constructed.     construction_observers = []@543,4>", "related code": "    construction_observers = []\n"}, {"node type": "string", "line number": "(630, 42)", "node content": "<String: 'bfs'>", "related code": "def stack_search(start, expand, mode='bfs', build_inv=False):\n"}, {"node type": "keyword", "line number": "(630, 59)", "node content": "<Keyword: False>", "related code": "def stack_search(start, expand, mode='bfs', build_inv=False):\n"}, {"node type": "keyword", "line number": "(831, 32)", "node content": "<Keyword: True>", "related code": "def clone(i, o, copy_inputs=True, copy_orphans=None):\n"}, {"node type": "keyword", "line number": "(866, 53)", "node content": "<Keyword: True>", "related code": "def clone_get_equiv(inputs, outputs, copy_inputs=True, copy_orphans=True,\n"}, {"node type": "keyword", "line number": "(866, 72)", "node content": "<Keyword: True>", "related code": "def clone_get_equiv(inputs, outputs, copy_inputs=True, copy_orphans=True,\n"}, {"node type": "keyword", "line number": "(929, 53)", "node content": "<Keyword: False>", "related code": "def general_toposort(outputs, deps, debug_print=False,\n"}, {"node type": "and_test", "line number": "(1031, 40)", "node content": "PythonNode(and_test, [PythonNode(not_test, [<Keyword: not>, <Name: orderings@1031,11>]), <Keyword: and>, PythonNode(comparison, [<Name: clients@1031,25>, <Keyword: is>, <Keyword: None>])])", "related code": "    if not orderings and clients is None:  # ordering can be None or empty dict\n"}, {"node type": "keyword", "line number": "(1183, 54)", "node content": "<Keyword: False>", "related code": "def is_same_graph(var1, var2, givens=None, debug=False):\n"}, {"node type": "not_test", "line number": "(1234, 35)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@1234,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: givens@1234,22>, <Operator: ,>, <Name: dict@1234,30>]), <Operator: )>])])])", "related code": "    if not isinstance(givens, dict):\n"}, {"node type": "operator", "line number": "(663, 14)", "node content": "<Operator: ==>", "related code": "    if mode == 'bfs':\n"}, {"node type": "string", "line number": "(663, 20)", "node content": "<String: 'bfs'>", "related code": "    if mode == 'bfs':\n"}, {"node type": "keyword", "line number": "(860, 22)", "node content": "<Keyword: is>", "related code": "    if copy_orphans is None:\n"}, {"node type": "keyword", "line number": "(893, 14)", "node content": "<Keyword: is>", "related code": "    if memo is None:\n"}, {"node type": "not_test", "line number": "(1031, 20)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: orderings@1031,11>])", "related code": "    if not orderings and clients is None:  # ordering can be None or empty dict\n"}, {"node type": "keyword", "line number": "(1227, 16)", "node content": "<Keyword: is>", "related code": "    if givens is None:\n"}, {"node type": "keyword", "line number": "(1230, 28)", "node content": "<Keyword: is>", "related code": "    if equal_computations is None:\n"}, {"node type": "keyword", "line number": "(1234, 10)", "node content": "<Keyword: not>", "related code": "    if not isinstance(givens, dict):\n"}, {"node type": "keyword", "line number": "(1240, 33)", "node content": "<Keyword: True>", "related code": "    use_equal_computations = True\n"}, {"node type": "not_test", "line number": "(101, 48)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@101,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: inputs@101,26>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@101,35>, <Operator: ,>, <Name: tuple@101,41>]), <Operator: )>])]), <Operator: )>])])])", "related code": "        if not isinstance(inputs, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(104, 49)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@104,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: outputs@104,26>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@104,36>, <Operator: ,>, <Name: tuple@104,42>]), <Operator: )>])]), <Operator: )>])])])", "related code": "        if not isinstance(outputs, (list, tuple)):\n"}, {"node type": "keyword", "line number": "(211, 55)", "node content": "<Keyword: True>", "related code": "    def clone_with_new_inputs(self, inputs, strict=True):\n"}, {"node type": "and_test", "line number": "(383, 61)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: owner@383,11>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@383,37>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: owner@383,48>, <Operator: ,>, <Name: Apply@383,55>]), <Operator: )>])])])])", "related code": "        if owner is not None and not isinstance(owner, Apply):\n"}, {"node type": "and_test", "line number": "(386, 69)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: index@386,11>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@386,37>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: index@386,48>, <Operator: ,>, <Name: integer_types@386,55>]), <Operator: )>])])])])", "related code": "        if index is not None and not isinstance(index, integer_types):\n"}, {"node type": "and_test", "line number": "(389, 66)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: name@389,11>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@389,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: name@389,47>, <Operator: ,>, <Name: string_types@389,53>]), <Operator: )>])])])])", "related code": "        if name is not None and not isinstance(name, string_types):\n"}, {"node type": "keyword", "line number": "(420, 37)", "node content": "<Keyword: True>", "related code": "    def __repr__(self, firstPass=True):\n"}, {"node type": "not_test", "line number": "(517, 41)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@517,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@517,23>, <Operator: ,>, <String: '_fn_cache'>]), <Operator: )>])])])", "related code": "        if not hasattr(self, '_fn_cache'):\n"}, {"node type": "keyword", "line number": "(659, 15)", "node content": "<Keyword: not>", "related code": "    if mode not in ('bfs', 'dfs'):\n"}, {"node type": "operator", "line number": "(679, 28)", "node content": "<Operator: ==>", "related code": "    assert len(rval_list) == len(rval_set)\n"}, {"node type": "and_test", "line number": "(703, 58)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: r@703,11>, PythonNode(trailer, [<Operator: .>, <Name: owner@703,13>])]), <Keyword: and>, PythonNode(atom, [<Operator: (>, PythonNode(or_test, [PythonNode(not_test, [<Keyword: not>, <Name: blockers@703,28>]), <Keyword: or>, PythonNode(comparison, [<Name: r@703,40>, PythonNode(comp_op, [<Keyword: not>, <Keyword: in>]), <Name: blockers@703,49>])]), <Operator: )>])])", "related code": "        if r.owner and (not blockers or r not in blockers):\n"}, {"node type": "and_test", "line number": "(745, 33)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: r@745,11>, PythonNode(trailer, [<Operator: .>, <Name: owner@745,13>])]), <Keyword: and>, PythonNode(comparison, [<Name: r@745,23>, PythonNode(comp_op, [<Keyword: not>, <Keyword: in>]), <Name: i@745,32>])])", "related code": "        if r.owner and r not in i:\n"}, {"node type": "keyword", "line number": "(1031, 10)", "node content": "<Keyword: not>", "related code": "    if not orderings and clients is None:  # ordering can be None or empty dict\n"}, {"node type": "keyword", "line number": "(1031, 35)", "node content": "<Keyword: is>", "related code": "    if not orderings and clients is None:  # ordering can be None or empty dict\n"}, {"node type": "not_test", "line number": "(1280, 17)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: ok@1280,15>])", "related code": "        if not ok:\n"}, {"node type": "keyword", "line number": "(101, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(inputs, (list, tuple)):\n"}, {"node type": "keyword", "line number": "(104, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(outputs, (list, tuple)):\n"}, {"node type": "keyword", "line number": "(162, 16)", "node content": "<Keyword: is>", "related code": "        if do is None:\n"}, {"node type": "keyword", "line number": "(236, 27)", "node content": "<Keyword: False>", "related code": "        remake_node = False\n"}, {"node type": "number", "line number": "(376, 23)", "node content": "<Number: 0>", "related code": "    __count__ = count(0)\n"}, {"node type": "not_test", "line number": "(383, 61)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@383,37>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: owner@383,48>, <Operator: ,>, <Name: Apply@383,55>]), <Operator: )>])])])", "related code": "        if owner is not None and not isinstance(owner, Apply):\n"}, {"node type": "not_test", "line number": "(386, 69)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@386,37>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: index@386,48>, <Operator: ,>, <Name: integer_types@386,55>]), <Operator: )>])])])", "related code": "        if index is not None and not isinstance(index, integer_types):\n"}]
