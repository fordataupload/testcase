[{"node type": "expr_stmt", "line number": "(328, 25)", "node content": "<ExprStmt: cger_inplace = CGer(True)@328,0>", "related code": "cger_inplace = CGer(True)\n"}, {"node type": "expr_stmt", "line number": "(329, 29)", "node content": "<ExprStmt: cger_no_inplace = CGer(False)@329,0>", "related code": "cger_no_inplace = CGer(False)\n"}, {"node type": "expr_stmt", "line number": "(619, 35)", "node content": "<ExprStmt: cgemv_inplace = CGemv(inplace=True)@619,0>", "related code": "cgemv_inplace = CGemv(inplace=True)\n"}, {"node type": "expr_stmt", "line number": "(620, 39)", "node content": "<ExprStmt: cgemv_no_inplace = CGemv(inplace=False)@620,0>", "related code": "cgemv_no_inplace = CGemv(inplace=False)\n"}, {"node type": "expr_stmt", "line number": "(675, 45)", "node content": "<ExprStmt: check_force_gemv_init._force_init_beta = None@675,0>", "related code": "check_force_gemv_init._force_init_beta = None\n"}, {"node type": "expr_stmt", "line number": "(316, 49)", "node content": "<ExprStmt: params_type = ParamsType(destructive=bool_t,)@316,4>", "related code": "    params_type = ParamsType(destructive=bool_t,)\n"}, {"node type": "expr_stmt", "line number": "(600, 45)", "node content": "<ExprStmt: params_type = ParamsType(inplace=bool_t,)@600,4>", "related code": "    params_type = ParamsType(inplace=bool_t,)\n"}, {"node type": "keyword", "line number": "(328, 24)", "node content": "<Keyword: True>", "related code": "cger_inplace = CGer(True)\n"}, {"node type": "keyword", "line number": "(329, 28)", "node content": "<Keyword: False>", "related code": "cger_no_inplace = CGer(False)\n"}, {"node type": "not_test", "line number": "(334, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: config@334,11>, PythonNode(trailer, [<Operator: .>, <Name: blas@334,18>]), PythonNode(trailer, [<Operator: .>, <Name: ldflags@334,23>])])])", "related code": "    if not config.blas.ldflags:\n"}, {"node type": "and_test", "line number": "(347, 60)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: isinstance@347,7>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: node@347,18>, PythonNode(trailer, [<Operator: .>, <Name: op@347,23>])]), <Operator: ,>, <Name: CGer@347,27>]), <Operator: )>])]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: node@347,41>, PythonNode(trailer, [<Operator: .>, <Name: op@347,46>]), PythonNode(trailer, [<Operator: .>, <Name: destructive@347,49>])])])])", "related code": "    if isinstance(node.op, CGer) and not node.op.destructive:\n"}, {"node type": "keyword", "line number": "(624, 48)", "node content": "<Keyword: is>", "related code": "    if check_force_gemv_init._force_init_beta is None:\n"}, {"node type": "not_test", "line number": "(680, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: config@680,11>, PythonNode(trailer, [<Operator: .>, <Name: blas@680,18>]), PythonNode(trailer, [<Operator: .>, <Name: ldflags@680,23>])])])", "related code": "    if not config.blas.ldflags:\n"}, {"node type": "and_test", "line number": "(693, 57)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: isinstance@693,7>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: node@693,18>, PythonNode(trailer, [<Operator: .>, <Name: op@693,23>])]), <Operator: ,>, <Name: CGemv@693,27>]), <Operator: )>])]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: node@693,42>, PythonNode(trailer, [<Operator: .>, <Name: op@693,47>]), PythonNode(trailer, [<Operator: .>, <Name: inplace@693,50>])])])])", "related code": "    if isinstance(node.op, CGemv) and not node.op.inplace:\n"}, {"node type": "string", "line number": "(708, 32)", "node content": "<String: 'use_c_blas'>", "related code": "blas_optdb.register('use_c_blas',\n"}, {"node type": "string", "line number": "(713, 35)", "node content": "<String: 'c_blas_destructive'>", "related code": "optdb.register('c_blas_destructive',\n"}, {"node type": "keyword", "line number": "(334, 10)", "node content": "<Keyword: not>", "related code": "    if not config.blas.ldflags:\n"}, {"node type": "keyword", "line number": "(345, 28)", "node content": "<Keyword: False>", "related code": "@local_optimizer([CGer(False)])\n"}, {"node type": "not_test", "line number": "(347, 60)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: node@347,41>, PythonNode(trailer, [<Operator: .>, <Name: op@347,46>]), PythonNode(trailer, [<Operator: .>, <Name: destructive@347,49>])])])", "related code": "    if isinstance(node.op, CGer) and not node.op.destructive:\n"}, {"node type": "keyword", "line number": "(619, 34)", "node content": "<Keyword: True>", "related code": "cgemv_inplace = CGemv(inplace=True)\n"}, {"node type": "keyword", "line number": "(620, 38)", "node content": "<Keyword: False>", "related code": "cgemv_no_inplace = CGemv(inplace=False)\n"}, {"node type": "keyword", "line number": "(680, 10)", "node content": "<Keyword: not>", "related code": "    if not config.blas.ldflags:\n"}, {"node type": "not_test", "line number": "(693, 57)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: node@693,42>, PythonNode(trailer, [<Operator: .>, <Name: op@693,47>]), PythonNode(trailer, [<Operator: .>, <Name: inplace@693,50>])])])", "related code": "    if isinstance(node.op, CGemv) and not node.op.inplace:\n"}, {"node type": "keyword", "line number": "(347, 40)", "node content": "<Keyword: not>", "related code": "    if isinstance(node.op, CGer) and not node.op.destructive:\n"}, {"node type": "keyword", "line number": "(691, 37)", "node content": "<Keyword: False>", "related code": "@local_optimizer([CGemv(inplace=False)])\n"}, {"node type": "keyword", "line number": "(693, 41)", "node content": "<Keyword: not>", "related code": "    if isinstance(node.op, CGemv) and not node.op.inplace:\n"}, {"node type": "expr_stmt", "line number": "(694, 34)", "node content": "<ExprStmt: inputs = list(node.inputs)@694,8>", "related code": "        inputs = list(node.inputs)\n"}, {"node type": "expr_stmt", "line number": "(695, 24)", "node content": "<ExprStmt: dest = inputs[0]@695,8>", "related code": "        dest = inputs[0]\n"}, {"node type": "operator", "line number": "(337, 18)", "node content": "<Operator: ==>", "related code": "    if (node.op == ger and\n"}, {"node type": "operator", "line number": "(683, 18)", "node content": "<Operator: ==>", "related code": "    if (node.op == gemv_no_inplace and\n"}, {"node type": "number", "line number": "(327, 18)", "node content": "<Number: 11>", "related code": "        return (11, blas_header_version())\n"}, {"node type": "number", "line number": "(617, 18)", "node content": "<Number: 14>", "related code": "        return (14, blas_header_version(), check_force_gemv_init())\n"}, {"node type": "number", "line number": "(666, 20)", "node content": "<Number: 0>", "related code": "            if res[0]:\n"}, {"node type": "number", "line number": "(695, 23)", "node content": "<Number: 0>", "related code": "        dest = inputs[0]\n"}, {"node type": "keyword", "line number": "(19, 33)", "node content": "<Keyword: False>", "related code": "        return ldflags(libs=False, flags=True)\n"}, {"node type": "keyword", "line number": "(19, 45)", "node content": "<Keyword: True>", "related code": "        return ldflags(libs=False, flags=True)\n"}, {"node type": "keyword", "line number": "(25, 33)", "node content": "<Keyword: False>", "related code": "        return ldflags(libs=False, include_dir=True)\n"}, {"node type": "keyword", "line number": "(25, 51)", "node content": "<Keyword: True>", "related code": "        return ldflags(libs=False, include_dir=True)\n"}, {"node type": "keyword", "line number": "(339, 26)", "node content": "<Keyword: False>", "related code": "        return [CGer(False)(*node.inputs)]\n"}, {"node type": "string", "line number": "(661, 78)", "node content": "<String: 'check_beta_'>", "related code": "        res = GCC_compiler.try_compile_tmp(test_code, tmp_prefix='check_beta_',\n"}, {"node type": "keyword", "line number": "(669, 62)", "node content": "<Keyword: False>", "related code": "                check_force_gemv_init._force_init_beta = False\n"}, {"node type": "number", "line number": "(699, 20)", "node content": "<Number: 0>", "related code": "            inputs[0] = T.AllocEmpty(dest.dtype)(*dest.owner.inputs)\n"}]
