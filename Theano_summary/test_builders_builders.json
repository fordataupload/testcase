[{"node type": "string", "line number": "(743, 43)", "node content": "<String: 'fn'>", "related code": "ops_with_inner_function[OpFromGraph] = 'fn'\n"}, {"node type": "string", "line number": "(208, 71)", "node content": "<String: 'L_op type can only be \"grad\" or \"lop\", got %s.'>", "related code": "    LOP_TYPE_ERR_MSG = 'L_op type can only be \"grad\" or \"lop\", got %s.'\n"}, {"node type": "string", "line number": "(209, 66)", "node content": "<String: 'expect overrider with %d inputs, got %d'>", "related code": "    OV_INP_LEN_ERR_MSG = 'expect overrider with %d inputs, got %d'\n"}, {"node type": "expr_stmt", "line number": "(724, 16)", "node content": "<ExprStmt: op = node.op@724,4>", "related code": "    op = node.op\n"}, {"node type": "not_test", "line number": "(725, 38)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@725,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: op@725,22>, <Operator: ,>, <Name: OpFromGraph@725,26>]), <Operator: )>])])])", "related code": "    if not isinstance(op, OpFromGraph):\n"}, {"node type": "not_test", "line number": "(727, 23)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: op@727,11>, PythonNode(trailer, [<Operator: .>, <Name: is_inline@727,14>])])])", "related code": "    if not op.is_inline:\n"}, {"node type": "not_test", "line number": "(259, 40)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@259,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: outputs@259,26>, <Operator: ,>, <Name: list@259,35>]), <Operator: )>])])])", "related code": "        if not isinstance(outputs, list):\n"}, {"node type": "or_test", "line number": "(265, 52)", "node content": "PythonNode(or_test, [PythonNode(comparison, [<String: 'updates'>, <Keyword: in>, <Name: kwargs@265,24>]), <Keyword: or>, PythonNode(comparison, [<String: 'givens'>, <Keyword: in>, <Name: kwargs@265,46>])])", "related code": "        if 'updates' in kwargs or 'givens' in kwargs:\n"}, {"node type": "expr_stmt", "line number": "(267, 31)", "node content": "<ExprStmt: self.is_inline = inline@267,8>", "related code": "        self.is_inline = inline\n"}, {"node type": "expr_stmt", "line number": "(272, 64)", "node content": "<ExprStmt: shared_vars = [var.type() for var in self.shared_inputs]@272,8>", "related code": "        shared_vars = [var.type() for var in self.shared_inputs]\n"}, {"node type": "expr_stmt", "line number": "(286, 40)", "node content": "<ExprStmt: self.local_inputs = local_inputs@286,8>", "related code": "        self.local_inputs = local_inputs\n"}, {"node type": "expr_stmt", "line number": "(287, 42)", "node content": "<ExprStmt: self.local_outputs = local_outputs@287,8>", "related code": "        self.local_outputs = local_outputs\n"}, {"node type": "expr_stmt", "line number": "(288, 28)", "node content": "<ExprStmt: self.inputs = inputs@288,8>", "related code": "        self.inputs = inputs\n"}, {"node type": "expr_stmt", "line number": "(289, 30)", "node content": "<ExprStmt: self.outputs = outputs@289,8>", "related code": "        self.outputs = outputs\n"}, {"node type": "expr_stmt", "line number": "(290, 28)", "node content": "<ExprStmt: self.kwargs = kwargs@290,8>", "related code": "        self.kwargs = kwargs\n"}, {"node type": "expr_stmt", "line number": "(291, 55)", "node content": "<ExprStmt: self.input_types = [inp.type for inp in inputs]@291,8>", "related code": "        self.input_types = [inp.type for inp in inputs]\n"}, {"node type": "string", "line number": "(326, 49)", "node content": "<String: 'off'>", "related code": "    @theano.change_flags(compute_test_value='off')\n"}, {"node type": "string", "line number": "(454, 49)", "node content": "<String: 'off'>", "related code": "    @theano.change_flags(compute_test_value='off')\n"}, {"node type": "not_test", "line number": "(565, 37)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@565,15>, PythonNode(trailer, [<Operator: .>, <Name: _lop_op_is_cached@565,20>])])])", "related code": "        if not self._lop_op_is_cached:\n"}, {"node type": "not_test", "line number": "(610, 37)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@610,15>, PythonNode(trailer, [<Operator: .>, <Name: _lop_op_is_cached@610,20>])])])", "related code": "        if not self._lop_op_is_cached:\n"}, {"node type": "not_test", "line number": "(621, 37)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@621,15>, PythonNode(trailer, [<Operator: .>, <Name: _rop_op_is_cached@621,20>])])])", "related code": "        if not self._rop_op_is_cached:\n"}, {"node type": "keyword", "line number": "(725, 10)", "node content": "<Keyword: not>", "related code": "    if not isinstance(op, OpFromGraph):\n"}, {"node type": "keyword", "line number": "(727, 10)", "node content": "<Keyword: not>", "related code": "    if not op.is_inline:\n"}, {"node type": "string", "line number": "(203, 74)", "node content": "<String: \"L_op/gradient override should be (single or list of)\">", "related code": "    TYPE_ERR_MSG = (\"L_op/gradient override should be (single or list of)\"\n"}, {"node type": "string", "line number": "(206, 70)", "node content": "<String: 'Overriding Variable instance can only have type'>", "related code": "    STYPE_ERR_MSG = ('Overriding Variable instance can only have type'\n"}, {"node type": "keyword", "line number": "(259, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(outputs, list):\n"}, {"node type": "operator", "line number": "(261, 25)", "node content": "<Operator: +>", "related code": "        for i in inputs + outputs:\n"}, {"node type": "not_test", "line number": "(282, 27)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: update_d@282,19>])", "related code": "        assert not update_d\n"}, {"node type": "not_test", "line number": "(283, 30)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: update_expr@283,19>])", "related code": "        assert not update_expr\n"}, {"node type": "not_test", "line number": "(284, 32)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: shared_inputs@284,19>])", "related code": "        assert not shared_inputs\n"}, {"node type": "operator", "line number": "(293, 27)", "node content": "<Operator: !=>", "related code": "        if lop_overrides != 'default':\n"}, {"node type": "string", "line number": "(293, 37)", "node content": "<String: 'default'>", "related code": "        if lop_overrides != 'default':\n"}, {"node type": "operator", "line number": "(299, 30)", "node content": "<Operator: !=>", "related code": "        elif grad_overrides != 'default':\n"}, {"node type": "string", "line number": "(299, 40)", "node content": "<String: 'default'>", "related code": "        elif grad_overrides != 'default':\n"}, {"node type": "keyword", "line number": "(565, 14)", "node content": "<Keyword: not>", "related code": "        if not self._lop_op_is_cached:\n"}, {"node type": "keyword", "line number": "(595, 38)", "node content": "<Keyword: False>", "related code": "        self._lop_op_is_cached = False\n"}, {"node type": "keyword", "line number": "(606, 38)", "node content": "<Keyword: False>", "related code": "        self._rop_op_is_cached = False\n"}, {"node type": "keyword", "line number": "(610, 14)", "node content": "<Keyword: not>", "related code": "        if not self._lop_op_is_cached:\n"}, {"node type": "keyword", "line number": "(621, 14)", "node content": "<Keyword: not>", "related code": "        if not self._rop_op_is_cached:\n"}, {"node type": "operator", "line number": "(632, 25)", "node content": "<Operator: !=>", "related code": "        if len(inputs) != num_expected_inps:\n"}, {"node type": "number", "line number": "(693, 16)", "node content": "<Number: 0>", "related code": "        used = 0\n"}, {"node type": "not_test", "line number": "(702, 34)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@702,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@702,23>, <Operator: ,>, <String: \"fn\">]), <Operator: )>])])])", "related code": "        if not hasattr(self, \"fn\") and impl == 'py':\n"}, {"node type": "not_test", "line number": "(262, 46)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@262,19>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: i@262,30>, <Operator: ,>, PythonNode(atom_expr, [<Name: gof@262,33>, PythonNode(trailer, [<Operator: .>, <Name: Variable@262,37>])])]), <Operator: )>])])])", "related code": "            if not isinstance(i, gof.Variable):\n"}, {"node type": "keyword", "line number": "(265, 23)", "node content": "<Keyword: in>", "related code": "        if 'updates' in kwargs or 'givens' in kwargs:\n"}, {"node type": "keyword", "line number": "(265, 45)", "node content": "<Keyword: in>", "related code": "        if 'updates' in kwargs or 'givens' in kwargs:\n"}, {"node type": "operator", "line number": "(280, 35)", "node content": "<Operator: ==>", "related code": "        assert len(local_inputs) == len(inputs) + len(self.shared_inputs)\n"}, {"node type": "operator", "line number": "(281, 36)", "node content": "<Operator: ==>", "related code": "        assert len(local_outputs) == len(outputs)\n"}, {"node type": "keyword", "line number": "(282, 18)", "node content": "<Keyword: not>", "related code": "        assert not update_d\n"}, {"node type": "keyword", "line number": "(283, 18)", "node content": "<Keyword: not>", "related code": "        assert not update_expr\n"}, {"node type": "keyword", "line number": "(284, 18)", "node content": "<Keyword: not>", "related code": "        assert not shared_inputs\n"}]
