[{"node type": "expr_stmt", "line number": "(18, 51)", "node content": "<ExprStmt: _logger = logging.getLogger(\"theano.compile.pfunc\")@18,0>", "related code": "_logger = logging.getLogger(\"theano.compile.pfunc\")\n"}, {"node type": "string", "line number": "(20, 37)", "node content": "<String: 'restructuredtext en'>", "related code": "__docformat__ = 'restructuredtext en'\n"}, {"node type": "expr_stmt", "line number": "(69, 16)", "node content": "<ExprStmt: # This function implements similar functionality as graph.clone     # and it should be merged with that     clone_d = {}@69,4>", "related code": "    clone_d = {}\n"}, {"node type": "expr_stmt", "line number": "(70, 17)", "node content": "<ExprStmt: update_d = {}@70,4>", "related code": "    update_d = {}\n"}, {"node type": "expr_stmt", "line number": "(71, 20)", "node content": "<ExprStmt: update_expr = []@71,4>", "related code": "    update_expr = []\n"}, {"node type": "expr_stmt", "line number": "(73, 22)", "node content": "<ExprStmt: # list of shared inputs that are used as inputs of the graph     shared_inputs = []@73,4>", "related code": "    shared_inputs = []\n"}, {"node type": "expr_stmt", "line number": "(165, 55)", "node content": "<ExprStmt: input_variables = [clone_inputs(i) for i in inputs]@165,4>", "related code": "    input_variables = [clone_inputs(i) for i in inputs]\n"}, {"node type": "not_test", "line number": "(380, 44)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@380,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: params@380,22>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@380,31>, <Operator: ,>, <Name: tuple@380,37>]), <Operator: )>])]), <Operator: )>])])])", "related code": "    if not isinstance(params, (list, tuple)):\n"}, {"node type": "expr_stmt", "line number": "(400, 55)", "node content": "<ExprStmt: # Check if some variable is present more than once in inputs     in_variables = [input.variable for input in inputs]@400,4>", "related code": "    in_variables = [input.variable for input in inputs]\n"}, {"node type": "expr_stmt", "line number": "(412, 34)", "node content": "<ExprStmt: # Check that we are not using `givens` to replace input variables, because     # this typically does nothing, contrary to what one may expect.     in_var_set = set(in_variables)@412,4>", "related code": "    in_var_set = set(in_variables)\n"}, {"node type": "expr_stmt", "line number": "(433, 63)", "node content": "<ExprStmt: # Extend the outputs with the updates on input variables so they are also     # cloned     additional_outputs = [i.update for i in inputs if i.update]@433,4>", "related code": "    additional_outputs = [i.update for i in inputs if i.update]\n"}, {"node type": "keyword", "line number": "(489, 42)", "node content": "<Keyword: False>", "related code": "def _pfunc_param_to_in(param, strict=False, allow_downcast=None):\n"}, {"node type": "string", "line number": "(18, 50)", "node content": "<String: \"theano.compile.pfunc\">", "related code": "_logger = logging.getLogger(\"theano.compile.pfunc\")\n"}, {"node type": "keyword", "line number": "(131, 17)", "node content": "<Keyword: is>", "related code": "    if replace is None:\n"}, {"node type": "keyword", "line number": "(156, 16)", "node content": "<Keyword: is>", "related code": "    if inputs is None:\n"}, {"node type": "keyword", "line number": "(179, 17)", "node content": "<Keyword: is>", "related code": "    if updates is None:\n"}, {"node type": "number", "line number": "(254, 9)", "node content": "<Number: 0>", "related code": "    i = 0\n"}, {"node type": "operator", "line number": "(255, 13)", "node content": "<Operator: <>", "related code": "    while i < len(update_expr):\n"}, {"node type": "keyword", "line number": "(362, 17)", "node content": "<Keyword: is>", "related code": "    if updates is None:\n"}, {"node type": "keyword", "line number": "(364, 16)", "node content": "<Keyword: is>", "related code": "    if givens is None:\n"}, {"node type": "keyword", "line number": "(366, 17)", "node content": "<Keyword: is>", "related code": "    if profile is None:\n"}, {"node type": "keyword", "line number": "(371, 17)", "node content": "<Keyword: is>", "related code": "    if profile is True:\n"}, {"node type": "keyword", "line number": "(371, 22)", "node content": "<Keyword: True>", "related code": "    if profile is True:\n"}, {"node type": "operator", "line number": "(374, 25)", "node content": "<Operator: ==>", "related code": "    elif type(profile) == str:\n"}, {"node type": "keyword", "line number": "(380, 10)", "node content": "<Keyword: not>", "related code": "    if not isinstance(params, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(384, 47)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@384,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: no_default_updates@384,22>, <Operator: ,>, <Name: bool@384,42>]), <Operator: )>])])])", "related code": "    if not isinstance(no_default_updates, bool)\\\n"}, {"node type": "keyword", "line number": "(434, 17)", "node content": "<Keyword: is>", "related code": "    if outputs is None:\n"}, {"node type": "keyword", "line number": "(455, 17)", "node content": "<Keyword: is>", "related code": "    if outputs is None:\n"}, {"node type": "not_test", "line number": "(139, 43)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@139,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: v_orig@139,26>, <Operator: ,>, <Name: Variable@139,34>]), <Operator: )>])])])", "related code": "        if not isinstance(v_orig, Variable):\n"}, {"node type": "not_test", "line number": "(141, 43)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@141,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: v_repl@141,26>, <Operator: ,>, <Name: Variable@141,34>]), <Operator: )>])])])", "related code": "        if not isinstance(v_repl, Variable):\n"}, {"node type": "not_test", "line number": "(160, 31)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: copy_inputs_over@160,15>])", "related code": "        if not copy_inputs_over:\n"}, {"node type": "not_test", "line number": "(182, 53)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@182,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: store_into@182,26>, <Operator: ,>, <Name: SharedVariable@182,38>]), <Operator: )>])])])", "related code": "        if not isinstance(store_into, SharedVariable):\n"}, {"node type": "and_test", "line number": "(260, 67)", "node content": "PythonNode(and_test, [PythonNode(atom_expr, [<Name: isinstance@260,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: v@260,22>, <Operator: ,>, <Name: SharedVariable@260,25>]), <Operator: )>])]), <Keyword: and>, PythonNode(comparison, [<Name: v@260,45>, PythonNode(comp_op, [<Keyword: not>, <Keyword: in>]), <Name: shared_inputs@260,54>])])", "related code": "        if isinstance(v, SharedVariable) and v not in shared_inputs:\n"}, {"node type": "keyword", "line number": "(270, 71)", "node content": "<Keyword: False>", "related code": "    def __init__(self, variable, default=None, name=None, mutable=False,\n"}, {"node type": "keyword", "line number": "(384, 10)", "node content": "<Keyword: not>", "related code": "    if not isinstance(no_default_updates, bool)\\\n"}, {"node type": "operator", "line number": "(389, 21)", "node content": "<Operator: >>", "related code": "    if len(updates) > 0 and any(isinstance(v, Variable)\n"}, {"node type": "number", "line number": "(389, 23)", "node content": "<Number: 0>", "related code": "    if len(updates) > 0 and any(isinstance(v, Variable)\n"}, {"node type": "operator", "line number": "(441, 33)", "node content": "<Operator: +>", "related code": "    extended_outputs = out_list + additional_outputs\n"}, {"node type": "keyword", "line number": "(87, 15)", "node content": "<Keyword: in>", "related code": "        if v in clone_d:\n"}, {"node type": "not_test", "line number": "(122, 31)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: copy_inputs_over@122,15>])", "related code": "        if not copy_inputs_over or (isinstance(v, Constant) and\n"}, {"node type": "keyword", "line number": "(139, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(v_orig, Variable):\n"}, {"node type": "keyword", "line number": "(141, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(v_repl, Variable):\n"}, {"node type": "keyword", "line number": "(144, 20)", "node content": "<Keyword: in>", "related code": "        if v_orig in clone_d:\n"}, {"node type": "keyword", "line number": "(160, 14)", "node content": "<Keyword: not>", "related code": "        if not copy_inputs_over:\n"}, {"node type": "keyword", "line number": "(182, 14)", "node content": "<Keyword: not>", "related code": "        if not isinstance(store_into, SharedVariable):\n"}, {"node type": "keyword", "line number": "(185, 24)", "node content": "<Keyword: in>", "related code": "        if store_into in update_d:\n"}, {"node type": "operator", "line number": "(262, 12)", "node content": "<Operator: +=>", "related code": "        i += 1\n"}, {"node type": "number", "line number": "(262, 14)", "node content": "<Number: 1>", "related code": "        i += 1\n"}, {"node type": "or_test", "line number": "(367, 61)", "node content": "PythonNode(or_test, [PythonNode(atom_expr, [<Name: config@367,18>, PythonNode(trailer, [<Operator: .>, <Name: profile@367,25>])]), <Keyword: or>, PythonNode(atom_expr, [<Name: config@367,36>, PythonNode(trailer, [<Operator: .>, <Name: print_global_stats@367,43>])])])", "related code": "        profile = config.profile or config.print_global_stats\n"}, {"node type": "keyword", "line number": "(369, 21)", "node content": "<Keyword: is>", "related code": "        if profile is False:\n"}]
