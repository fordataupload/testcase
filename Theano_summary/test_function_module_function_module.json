[{"node type": "expr_stmt", "line number": "(29, 61)", "node content": "<ExprStmt: _logger = logging.getLogger('theano.compile.function_module')@29,0>", "related code": "_logger = logging.getLogger('theano.compile.function_module')\n"}, {"node type": "expr_stmt", "line number": "(206, 62)", "node content": "<ExprStmt: std_fgraph.features = [gof.toolbox.PreserveVariableAttributes]@206,0>", "related code": "std_fgraph.features = [gof.toolbox.PreserveVariableAttributes]\n"}, {"node type": "expr_stmt", "line number": "(222, 25)", "node content": "<ExprStmt: ### # Function ###  # unique id object used as a placeholder for duplicate entries DUPLICATE = ['DUPLICATE']@222,0>", "related code": "DUPLICATE = ['DUPLICATE']\n"}, {"node type": "expr_stmt", "line number": "(1182, 25)", "node content": "<ExprStmt: NODEFAULT = ['NODEFAULT']@1182,0>", "related code": "NODEFAULT = ['NODEFAULT']\n"}, {"node type": "expr_stmt", "line number": "(1749, 15)", "node content": "<ExprStmt: __checkers = []@1749,0>", "related code": "__checkers = []\n"}, {"node type": "string", "line number": "(31, 37)", "node content": "<String: \"restructuredtext en\">", "related code": "__docformat__ = \"restructuredtext en\"\n"}, {"node type": "expr_stmt", "line number": "(50, 46)", "node content": "<ExprStmt: vmap = getattr(v.owner.op, 'view_map', {})@50,4>", "related code": "    vmap = getattr(v.owner.op, 'view_map', {})\n"}, {"node type": "expr_stmt", "line number": "(51, 49)", "node content": "<ExprStmt: dmap = getattr(v.owner.op, 'destroy_map', {})@51,4>", "related code": "    dmap = getattr(v.owner.op, 'destroy_map', {})\n"}, {"node type": "expr_stmt", "line number": "(52, 37)", "node content": "<ExprStmt: outpos = v.owner.outputs.index(v)@52,4>", "related code": "    outpos = v.owner.outputs.index(v)\n"}, {"node type": "expr_stmt", "line number": "(53, 57)", "node content": "<ExprStmt: v_views = vmap.get(outpos, []) + dmap.get(outpos, [])@53,4>", "related code": "    v_views = vmap.get(outpos, []) + dmap.get(outpos, [])\n"}, {"node type": "keyword", "line number": "(148, 62)", "node content": "<Keyword: False>", "related code": "def std_fgraph(input_specs, output_specs, accept_inplace=False):\n"}, {"node type": "string", "line number": "(222, 24)", "node content": "<String: 'DUPLICATE'>", "related code": "DUPLICATE = ['DUPLICATE']\n"}, {"node type": "not_test", "line number": "(1055, 57)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom, [<Operator: (>, PythonNode(comparison, [PythonNode(atom_expr, [<Name: f@1055,12>, PythonNode(trailer, [<Operator: .>, <Name: pickle_aliased_memory_strategy@1055,14>])]), <Operator: ==>, <String: 'ignore'>]), <Operator: )>])])", "related code": "    if not (f.pickle_aliased_memory_strategy == 'ignore'):\n"}, {"node type": "keyword", "line number": "(1078, 78)", "node content": "<Keyword: False>", "related code": "def _constructor_Function(maker, input_storage, inputs_data, trust_input=False):\n"}, {"node type": "not_test", "line number": "(1079, 42)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: theano@1079,11>, PythonNode(trailer, [<Operator: .>, <Name: config@1079,18>]), PythonNode(trailer, [<Operator: .>, <Name: unpickle_function@1079,25>])])])", "related code": "    if not theano.config.unpickle_function:\n"}, {"node type": "string", "line number": "(1182, 24)", "node content": "<String: 'NODEFAULT'>", "related code": "NODEFAULT = ['NODEFAULT']\n"}, {"node type": "keyword", "line number": "(1765, 66)", "node content": "<Keyword: False>", "related code": "def orig_function(inputs, outputs, mode=None, accept_inplace=False,\n"}, {"node type": "string", "line number": "(29, 60)", "node content": "<String: 'theano.compile.function_module'>", "related code": "_logger = logging.getLogger('theano.compile.function_module')\n"}, {"node type": "keyword", "line number": "(48, 17)", "node content": "<Keyword: is>", "related code": "    if v.owner is None:\n"}, {"node type": "operator", "line number": "(54, 21)", "node content": "<Operator: >>", "related code": "    if len(v_views) > 1:\n"}, {"node type": "number", "line number": "(54, 23)", "node content": "<Number: 1>", "related code": "    if len(v_views) > 1:\n"}, {"node type": "operator", "line number": "(115, 30)", "node content": "<Operator: !=>", "related code": "    if len(expanded_inputs) != len(fgraph.inputs):\n"}, {"node type": "string", "line number": "(265, 43)", "node content": "<String: 'warn'>", "related code": "    pickle_aliased_memory_strategy = 'warn'\n"}, {"node type": "keyword", "line number": "(1055, 10)", "node content": "<Keyword: not>", "related code": "    if not (f.pickle_aliased_memory_strategy == 'ignore'):\n"}, {"node type": "keyword", "line number": "(1079, 10)", "node content": "<Keyword: not>", "related code": "    if not theano.config.unpickle_function:\n"}, {"node type": "string", "line number": "(1116, 30)", "node content": "<String: \"insert_deepcopy\">", "related code": "    reason = \"insert_deepcopy\"\n"}, {"node type": "operator", "line number": "(1945, 24)", "node content": "<Operator: ==>", "related code": "    if n_named_inputs == 0:\n"}, {"node type": "number", "line number": "(1945, 26)", "node content": "<Number: 0>", "related code": "    if n_named_inputs == 0:\n"}, {"node type": "operator", "line number": "(53, 36)", "node content": "<Operator: +>", "related code": "    v_views = vmap.get(outpos, []) + dmap.get(outpos, [])\n"}, {"node type": "and_test", "line number": "(135, 81)", "node content": "PythonNode(and_test, [PythonNode(comparison, [PythonNode(atom_expr, [<Name: config@135,11>, PythonNode(trailer, [<Operator: .>, <Name: cycle_detection@135,18>])]), <Operator: ==>, <String: 'fast'>]), <Keyword: and>, PythonNode(atom_expr, [<Name: hasattr@135,48>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: fgraph@135,56>, <Operator: ,>, <String: 'has_destroyers'>]), <Operator: )>])])])", "related code": "        if config.cycle_detection == 'fast' and hasattr(fgraph, 'has_destroyers'):\n"}, {"node type": "not_test", "line number": "(140, 44)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@140,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: fgraph@140,23>, <Operator: ,>, <String: 'destroyers'>]), <Operator: )>])])])", "related code": "        if not hasattr(fgraph, 'destroyers'):\n"}, {"node type": "operator", "line number": "(178, 61)", "node content": "<Operator: +>", "related code": "    orig_outputs = [spec.variable for spec in output_specs] + updates\n"}, {"node type": "keyword", "line number": "(539, 37)", "node content": "<Keyword: False>", "related code": "    def copy(self, share_memory=False, swap=None, delete_updates=False,\n"}, {"node type": "keyword", "line number": "(539, 70)", "node content": "<Keyword: False>", "related code": "    def copy(self, share_memory=False, swap=None, delete_updates=False,\n"}, {"node type": "and_test", "line number": "(679, 33)", "node content": "PythonNode(and_test, [PythonNode(not_test, [<Keyword: not>, <Name: name@679,15>]), <Keyword: and>, PythonNode(atom_expr, [<Name: self@679,24>, PythonNode(trailer, [<Operator: .>, <Name: name@679,29>])])])", "related code": "        if not name and self.name:\n"}, {"node type": "and_test", "line number": "(781, 69)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: output_subset@781,11>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [PythonNode(atom_expr, [<Name: self@781,41>, PythonNode(trailer, [<Operator: .>, <Name: output_keys@781,46>])]), PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>])])", "related code": "        if output_subset is not None and self.output_keys is not None:\n"}, {"node type": "not_test", "line number": "(880, 31)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: self@880,15>, PythonNode(trailer, [<Operator: .>, <Name: trust_input@880,20>])])])", "related code": "        if not self.trust_input:\n"}, {"node type": "not_test", "line number": "(1015, 49)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: getattr@1015,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: self@1015,23>, PythonNode(trailer, [<Operator: .>, <Name: fn@1015,28>])]), <Operator: ,>, <String: 'allow_gc'>, <Operator: ,>, <Keyword: True>]), <Operator: )>])])])", "related code": "        if not getattr(self.fn, 'allow_gc', True):\n"}, {"node type": "operator", "line number": "(1083, 34)", "node content": "<Operator: ==>", "related code": "    assert len(f.input_storage) == len(inputs_data)\n"}, {"node type": "operator", "line number": "(1114, 33)", "node content": "<Operator: ==>", "related code": "    assert len(wrapped_inputs) == len(fgraph.inputs)\n"}, {"node type": "operator", "line number": "(1115, 34)", "node content": "<Operator: ==>", "related code": "    assert len(wrapped_outputs) == len(fgraph.outputs)\n"}, {"node type": "not_test", "line number": "(1145, 21)", "node content": "PythonNode(not_test, [<Keyword: not>, <Name: copied@1145,15>])", "related code": "        if not copied:\n"}, {"node type": "not_test", "line number": "(1460, 49)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@1460,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: outputs@1460,26>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@1460,36>, <Operator: ,>, <Name: tuple@1460,42>]), <Operator: )>])]), <Operator: )>])])])", "related code": "        if not isinstance(outputs, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(1463, 48)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@1463,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: inputs@1463,26>, <Operator: ,>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: list@1463,35>, <Operator: ,>, <Name: tuple@1463,41>]), <Operator: )>])]), <Operator: )>])])])", "related code": "        if not isinstance(inputs, (list, tuple)):\n"}, {"node type": "not_test", "line number": "(1551, 40)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@1551,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: linker@1551,23>, <Operator: ,>, <String: 'accept'>]), <Operator: )>])])])", "related code": "        if not hasattr(linker, 'accept'):\n"}, {"node type": "keyword", "line number": "(1634, 54)", "node content": "<Keyword: False>", "related code": "    def create(self, input_storage=None, trustme=False, storage_map=None):\n"}, {"node type": "keyword", "line number": "(1819, 21)", "node content": "<Keyword: not>", "related code": "    if outputs is not None:\n"}, {"node type": "and_test", "line number": "(1844, 25)", "node content": "PythonNode(and_test, [<Name: fn@1844,11>, <Keyword: and>, <Name: profile@1844,18>])", "related code": "        if fn and profile:\n"}, {"node type": "operator", "line number": "(73, 16)", "node content": "<Operator: ==>", "related code": "        if cl == 'output':\n"}, {"node type": "string", "line number": "(73, 25)", "node content": "<String: 'output'>", "related code": "        if cl == 'output':\n"}]
