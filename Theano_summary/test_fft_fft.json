[{"node type": "expr_stmt", "line number": "(59, 18)", "node content": "<ExprStmt: rfft_op = RFFTOp()@59,0>", "related code": "rfft_op = RFFTOp()\n"}, {"node type": "expr_stmt", "line number": "(116, 20)", "node content": "<ExprStmt: irfft_op = IRFFTOp()@116,0>", "related code": "irfft_op = IRFFTOp()\n"}, {"node type": "expr_stmt", "line number": "(10, 18)", "node content": "<ExprStmt: __props__ = ()@10,4>", "related code": "    __props__ = ()\n"}, {"node type": "expr_stmt", "line number": "(64, 18)", "node content": "<ExprStmt: __props__ = ()@64,4>", "related code": "    __props__ = ()\n"}, {"node type": "expr_stmt", "line number": "(144, 21)", "node content": "<ExprStmt: s = inp.shape[1:]@144,4>", "related code": "    s = inp.shape[1:]\n"}, {"node type": "expr_stmt", "line number": "(145, 30)", "node content": "<ExprStmt: cond_norm = _unitary(norm)@145,4>", "related code": "    cond_norm = _unitary(norm)\n"}, {"node type": "keyword", "line number": "(153, 38)", "node content": "<Keyword: False>", "related code": "def irfft(inp, norm=None, is_odd=False):\n"}, {"node type": "expr_stmt", "line number": "(185, 23)", "node content": "<ExprStmt: s = inp.shape[1:-1]@185,4>", "related code": "    s = inp.shape[1:-1]\n"}, {"node type": "expr_stmt", "line number": "(191, 30)", "node content": "<ExprStmt: cond_norm = _unitary(norm)@191,4>", "related code": "    cond_norm = _unitary(norm)\n"}, {"node type": "number", "line number": "(146, 15)", "node content": "<Number: 1>", "related code": "    scaling = 1\n"}, {"node type": "operator", "line number": "(147, 19)", "node content": "<Operator: ==>", "related code": "    if cond_norm == \"ortho\":\n"}, {"node type": "string", "line number": "(147, 27)", "node content": "<String: \"ortho\">", "related code": "    if cond_norm == \"ortho\":\n"}, {"node type": "number", "line number": "(192, 15)", "node content": "<Number: 1>", "related code": "    scaling = 1\n"}, {"node type": "keyword", "line number": "(194, 19)", "node content": "<Keyword: is>", "related code": "    if cond_norm is None:\n"}, {"node type": "operator", "line number": "(196, 21)", "node content": "<Operator: ==>", "related code": "    elif cond_norm == \"ortho\":\n"}, {"node type": "string", "line number": "(196, 29)", "node content": "<String: \"ortho\">", "related code": "    elif cond_norm == \"ortho\":\n"}, {"node type": "expr_stmt", "line number": "(18, 35)", "node content": "<ExprStmt: a = T.as_tensor_variable(a)@18,8>", "related code": "        a = T.as_tensor_variable(a)\n"}, {"node type": "operator", "line number": "(150, 28)", "node content": "<Operator: />", "related code": "    return rfft_op(inp, s) / scaling\n"}, {"node type": "keyword", "line number": "(182, 17)", "node content": "<Keyword: not>", "related code": "    if is_odd not in (True, False):\n"}, {"node type": "operator", "line number": "(199, 29)", "node content": "<Operator: />", "related code": "    return irfft_op(inp, s) / scaling\n"}, {"node type": "keyword", "line number": "(203, 15)", "node content": "<Keyword: not>", "related code": "    if norm not in (None, \"ortho\", \"no_norm\"):\n"}, {"node type": "operator", "line number": "(19, 19)", "node content": "<Operator: <>", "related code": "        if a.ndim < 2:\n"}, {"node type": "number", "line number": "(19, 21)", "node content": "<Number: 2>", "related code": "        if a.ndim < 2:\n"}, {"node type": "keyword", "line number": "(23, 15)", "node content": "<Keyword: is>", "related code": "        if s is None:\n"}, {"node type": "operator", "line number": "(73, 19)", "node content": "<Operator: <>", "related code": "        if a.ndim < 3:\n"}, {"node type": "number", "line number": "(73, 21)", "node content": "<Number: 3>", "related code": "        if a.ndim < 3:\n"}, {"node type": "keyword", "line number": "(78, 15)", "node content": "<Keyword: is>", "related code": "        if s is None:\n"}, {"node type": "keyword", "line number": "(182, 26)", "node content": "<Keyword: True>", "related code": "    if is_odd not in (True, False):\n"}, {"node type": "keyword", "line number": "(182, 33)", "node content": "<Keyword: False>", "related code": "    if is_odd not in (True, False):\n"}, {"node type": "string", "line number": "(203, 33)", "node content": "<String: \"ortho\">", "related code": "    if norm not in (None, \"ortho\", \"no_norm\"):\n"}, {"node type": "string", "line number": "(203, 44)", "node content": "<String: \"no_norm\">", "related code": "    if norm not in (None, \"ortho\", \"no_norm\"):\n"}, {"node type": "operator", "line number": "(94, 25)", "node content": "<Operator: +>", "related code": "        inp = a[..., 0] + 1j * a[..., 1]\n"}, {"node type": "number", "line number": "(144, 19)", "node content": "<Number: 1>", "related code": "    s = inp.shape[1:]\n"}, {"node type": "number", "line number": "(185, 19)", "node content": "<Number: 1>", "related code": "    s = inp.shape[1:-1]\n"}, {"node type": "number", "line number": "(34, 20)", "node content": "<Number: 0>", "related code": "        a = inputs[0]\n"}, {"node type": "number", "line number": "(35, 20)", "node content": "<Number: 1>", "related code": "        s = inputs[1]\n"}, {"node type": "number", "line number": "(42, 24)", "node content": "<Number: 0>", "related code": "        output_storage[0][0] = out\n"}, {"node type": "number", "line number": "(42, 27)", "node content": "<Number: 0>", "related code": "        output_storage[0][0] = out\n"}, {"node type": "number", "line number": "(46, 20)", "node content": "<Number: 1>", "related code": "        s = inputs[1]\n"}, {"node type": "operator", "line number": "(50, 29)", "node content": "<Operator: *>", "related code": "        idx = [slice(None)] * (gout.ndim - 2) \\\n"}, {"node type": "number", "line number": "(90, 20)", "node content": "<Number: 0>", "related code": "        a = inputs[0]\n"}, {"node type": "number", "line number": "(91, 20)", "node content": "<Number: 1>", "related code": "        s = inputs[1]\n"}, {"node type": "number", "line number": "(94, 28)", "node content": "<Number: 1j>", "related code": "        inp = a[..., 0] + 1j * a[..., 1]\n"}, {"node type": "operator", "line number": "(94, 30)", "node content": "<Operator: *>", "related code": "        inp = a[..., 0] + 1j * a[..., 1]\n"}, {"node type": "number", "line number": "(98, 24)", "node content": "<Number: 0>", "related code": "        output_storage[0][0] = (out * s.prod()).astype(a.dtype)\n"}, {"node type": "number", "line number": "(98, 27)", "node content": "<Number: 0>", "related code": "        output_storage[0][0] = (out * s.prod()).astype(a.dtype)\n"}, {"node type": "number", "line number": "(102, 20)", "node content": "<Number: 1>", "related code": "        s = inputs[1]\n"}, {"node type": "operator", "line number": "(107, 29)", "node content": "<Operator: *>", "related code": "        idx = [slice(None)] * (gf.ndim - 2) \\\n"}, {"node type": "operator", "line number": "(185, 21)", "node content": "<Operator: ->", "related code": "    s = inp.shape[1:-1]\n"}, {"node type": "number", "line number": "(185, 22)", "node content": "<Number: 1>", "related code": "    s = inp.shape[1:-1]\n"}]
