[{"node type": "expr_stmt", "line number": "(17, 37)", "node content": "<ExprStmt: _logger = logging.getLogger(__name__)@17,0>", "related code": "_logger = logging.getLogger(__name__)\n"}, {"node type": "expr_stmt", "line number": "(49, 89)", "node content": "<ExprStmt: __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')@49,4>", "related code": "    __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')\n"}, {"node type": "expr_stmt", "line number": "(51, 21)", "node content": "<ExprStmt: _direction = None@51,4>", "related code": "    _direction = None\n"}, {"node type": "expr_stmt", "line number": "(134, 88)", "node content": "<ExprStmt: # Direction should be converted to real enum value,     # as it is compared to integer later in c_code_helper().     direction = property(lambda self: self.params_type.enum_from_alias(self._direction))@134,4>", "related code": "    direction = property(lambda self: self.params_type.enum_from_alias(self._direction))\n"}, {"node type": "expr_stmt", "line number": "(136, 49)", "node content": "<ExprStmt: dH = property(lambda self: self.subsample[0])@136,4>", "related code": "    dH = property(lambda self: self.subsample[0])\n"}, {"node type": "expr_stmt", "line number": "(137, 49)", "node content": "<ExprStmt: dW = property(lambda self: self.subsample[1])@137,4>", "related code": "    dW = property(lambda self: self.subsample[1])\n"}, {"node type": "expr_stmt", "line number": "(139, 57)", "node content": "<ExprStmt: dilH = property(lambda self: self.filter_dilation[0])@139,4>", "related code": "    dilH = property(lambda self: self.filter_dilation[0])\n"}, {"node type": "expr_stmt", "line number": "(140, 57)", "node content": "<ExprStmt: dilW = property(lambda self: self.filter_dilation[1])@140,4>", "related code": "    dilW = property(lambda self: self.filter_dilation[1])\n"}, {"node type": "expr_stmt", "line number": "(142, 50)", "node content": "<ExprStmt: padH_l = property(lambda self: self.pad[0][0])@142,4>", "related code": "    padH_l = property(lambda self: self.pad[0][0])\n"}, {"node type": "keyword", "line number": "(48, 27)", "node content": "<Keyword: False>", "related code": "    check_broadcast = False\n"}, {"node type": "string", "line number": "(631, 26)", "node content": "<String: \"forward\">", "related code": "    _direction = \"forward\"\n"}, {"node type": "string", "line number": "(697, 35)", "node content": "<String: \"backprop weights\">", "related code": "    _direction = \"backprop weights\"\n"}, {"node type": "string", "line number": "(813, 34)", "node content": "<String: \"backprop inputs\">", "related code": "    _direction = \"backprop inputs\"\n"}, {"node type": "string", "line number": "(62, 42)", "node content": "<String: \"valid\">", "related code": "    def __init__(self, border_mode=\"valid\", subsample=(1, 1),\n"}, {"node type": "not_test", "line number": "(102, 41)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: theano@102,15>, PythonNode(trailer, [<Operator: .>, <Name: config@102,22>]), PythonNode(trailer, [<Operator: .>, <Name: blas@102,29>]), PythonNode(trailer, [<Operator: .>, <Name: ldflags@102,34>])])])", "related code": "        if not theano.config.blas.ldflags:\n"}, {"node type": "not_test", "line number": "(166, 42)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: hasattr@166,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: self@166,23>, <Operator: ,>, <String: 'num_groups'>]), <Operator: )>])])])", "related code": "        if not hasattr(self, 'num_groups'):\n"}, {"node type": "or_test", "line number": "(751, 45)", "node content": "PythonNode(or_test, [PythonNode(atom, [<Operator: (>, PythonNode(comparison, [<Name: padH_l@751,14>, <Operator: ==>, PythonNode(factor, [<Operator: ->, <Number: 2>])]), <Operator: )>]), <Keyword: or>, PythonNode(atom, [<Operator: (>, PythonNode(comparison, [<Name: padH_r@751,32>, <Operator: ==>, PythonNode(factor, [<Operator: ->, <Number: 2>])]), <Operator: )>])])", "related code": "        elif (padH_l == -2) or (padH_r == -2):\n"}, {"node type": "or_test", "line number": "(759, 45)", "node content": "PythonNode(or_test, [PythonNode(atom, [<Operator: (>, PythonNode(comparison, [<Name: padW_l@759,14>, <Operator: ==>, PythonNode(factor, [<Operator: ->, <Number: 2>])]), <Operator: )>]), <Keyword: or>, PythonNode(atom, [<Operator: (>, PythonNode(comparison, [<Name: padW_r@759,32>, <Operator: ==>, PythonNode(factor, [<Operator: ->, <Number: 2>])]), <Operator: )>])])", "related code": "        elif (padW_l == -2) or (padW_r == -2):\n"}, {"node type": "string", "line number": "(49, 30)", "node content": "<String: 'border_mode'>", "related code": "    __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')\n"}, {"node type": "string", "line number": "(49, 43)", "node content": "<String: 'subsample'>", "related code": "    __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')\n"}, {"node type": "string", "line number": "(49, 62)", "node content": "<String: 'filter_dilation'>", "related code": "    __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')\n"}, {"node type": "string", "line number": "(49, 76)", "node content": "<String: 'num_groups'>", "related code": "    __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')\n"}, {"node type": "string", "line number": "(49, 88)", "node content": "<String: 'unshared'>", "related code": "    __props__ = ('border_mode', 'subsample', 'filter_dilation', 'num_groups', 'unshared')\n"}, {"node type": "operator", "line number": "(94, 28)", "node content": "<Operator: !=>", "related code": "        if len(subsample) != 2:\n"}, {"node type": "number", "line number": "(94, 30)", "node content": "<Number: 2>", "related code": "        if len(subsample) != 2:\n"}, {"node type": "operator", "line number": "(96, 34)", "node content": "<Operator: !=>", "related code": "        if len(filter_dilation) != 2:\n"}, {"node type": "number", "line number": "(96, 36)", "node content": "<Number: 2>", "related code": "        if len(filter_dilation) != 2:\n"}, {"node type": "keyword", "line number": "(102, 14)", "node content": "<Keyword: not>", "related code": "        if not theano.config.blas.ldflags:\n"}, {"node type": "operator", "line number": "(116, 23)", "node content": "<Operator: <>", "related code": "        if num_groups < 1:\n"}, {"node type": "number", "line number": "(116, 25)", "node content": "<Number: 1>", "related code": "        if num_groups < 1:\n"}, {"node type": "lambdef", "line number": "(134, 87)", "node content": "<Lambda@(134, 25)>", "related code": "    direction = property(lambda self: self.params_type.enum_from_alias(self._direction))\n"}, {"node type": "lambdef", "line number": "(136, 48)", "node content": "<Lambda@(136, 18)>", "related code": "    dH = property(lambda self: self.subsample[0])\n"}, {"node type": "lambdef", "line number": "(137, 48)", "node content": "<Lambda@(137, 18)>", "related code": "    dW = property(lambda self: self.subsample[1])\n"}, {"node type": "lambdef", "line number": "(139, 56)", "node content": "<Lambda@(139, 20)>", "related code": "    dilH = property(lambda self: self.filter_dilation[0])\n"}, {"node type": "lambdef", "line number": "(140, 56)", "node content": "<Lambda@(140, 20)>", "related code": "    dilW = property(lambda self: self.filter_dilation[1])\n"}, {"node type": "lambdef", "line number": "(142, 49)", "node content": "<Lambda@(142, 22)>", "related code": "    padH_l = property(lambda self: self.pad[0][0])\n"}, {"node type": "lambdef", "line number": "(143, 49)", "node content": "<Lambda@(143, 22)>", "related code": "    padH_r = property(lambda self: self.pad[0][1])\n"}, {"node type": "lambdef", "line number": "(144, 49)", "node content": "<Lambda@(144, 22)>", "related code": "    padW_l = property(lambda self: self.pad[1][0])\n"}, {"node type": "lambdef", "line number": "(145, 49)", "node content": "<Lambda@(145, 22)>", "related code": "    padW_r = property(lambda self: self.pad[1][1])\n"}, {"node type": "keyword", "line number": "(166, 14)", "node content": "<Keyword: not>", "related code": "        if not hasattr(self, 'num_groups'):\n"}, {"node type": "operator", "line number": "(171, 28)", "node content": "<Operator: ==>", "related code": "        if self.blas_type == 'openblas':\n"}, {"node type": "operator", "line number": "(173, 30)", "node content": "<Operator: ==>", "related code": "        elif self.blas_type == 'mkl':\n"}, {"node type": "operator", "line number": "(182, 23)", "node content": "<Operator: +=>", "related code": "        compile_args += super(BaseCorrMM, self).c_compile_args()\n"}, {"node type": "operator", "line number": "(193, 18)", "node content": "<Operator: +=>", "related code": "        headers += super(BaseCorrMM, self).c_headers()\n"}, {"node type": "operator", "line number": "(206, 19)", "node content": "<Operator: ==>", "related code": "        if dtype == 'float32':\n"}, {"node type": "operator", "line number": "(637, 27)", "node content": "<Operator: !=>", "related code": "        if img.type.ndim != 4:\n"}, {"node type": "number", "line number": "(637, 29)", "node content": "<Number: 4>", "related code": "        if img.type.ndim != 4:\n"}, {"node type": "keyword", "line number": "(639, 27)", "node content": "<Keyword: is>", "related code": "        if self.unshared is True:\n"}, {"node type": "keyword", "line number": "(639, 32)", "node content": "<Keyword: True>", "related code": "        if self.unshared is True:\n"}, {"node type": "operator", "line number": "(703, 27)", "node content": "<Operator: !=>", "related code": "        if img.type.ndim != 4:\n"}]
