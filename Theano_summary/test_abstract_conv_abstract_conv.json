[{"node type": "expr_stmt", "line number": "(35, 63)", "node content": "<ExprStmt: _logger = logging.getLogger(\"theano.tensor.nnet.abstract_conv\")@35,0>", "related code": "_logger = logging.getLogger(\"theano.tensor.nnet.abstract_conv\")\n"}, {"node type": "string", "line number": "(34, 37)", "node content": "<String: \"restructuredtext en\">", "related code": "__docformat__ = \"restructuredtext en\"\n"}, {"node type": "expr_stmt", "line number": "(79, 50)", "node content": "<ExprStmt: bsize, imshp = image_shape[0], image_shape[2:]@79,4>", "related code": "    bsize, imshp = image_shape[0], image_shape[2:]\n"}, {"node type": "expr_stmt", "line number": "(82, 58)", "node content": "<ExprStmt: nkern, kshp = kernel_shape[0], kernel_shape[-convdim:]@82,4>", "related code": "    nkern, kshp = kernel_shape[0], kernel_shape[-convdim:]\n"}, {"node type": "expr_stmt", "line number": "(148, 46)", "node content": "<ExprStmt: # In case of symbolic shape, we want to build the smallest graph     # (image_shape + 2 * pad - dil_kernel_shape) // subsample + 1     out_shp = (image_shape - dil_kernel_shape)@148,4>", "related code": "    out_shp = (image_shape - dil_kernel_shape)\n"}, {"node type": "expr_stmt", "line number": "(205, 50)", "node content": "<ExprStmt: nkern, imshp = image_shape[1], image_shape[2:]@205,4>", "related code": "    nkern, imshp = image_shape[1], image_shape[2:]\n"}, {"node type": "expr_stmt", "line number": "(206, 47)", "node content": "<ExprStmt: nchan, topshp = top_shape[1], top_shape[2:]@206,4>", "related code": "    nchan, topshp = top_shape[1], top_shape[2:]\n"}, {"node type": "expr_stmt", "line number": "(328, 47)", "node content": "<ExprStmt: bsize, topshp = top_shape[0], top_shape[2:]@328,4>", "related code": "    bsize, topshp = top_shape[0], top_shape[2:]\n"}, {"node type": "expr_stmt", "line number": "(331, 58)", "node content": "<ExprStmt: nkern, kshp = kernel_shape[1], kernel_shape[-convdim:]@331,4>", "related code": "    nkern, kshp = kernel_shape[1], kernel_shape[-convdim:]\n"}, {"node type": "expr_stmt", "line number": "(404, 52)", "node content": "<ExprStmt: # In case of symbolic shape, we want to build the smallest graph     # image_shape = (top_shape - 1) * s - 2 * pad + dil_kernel_shape + a     # where 0 <= a < subsample, but we have checked that subsample == 1     image_shape = (top_shape + dil_kernel_shape - 1)@404,4>", "related code": "    image_shape = (top_shape + dil_kernel_shape - 1)\n"}, {"node type": "or_test", "line number": "(459, 85)", "node content": "PythonNode(or_test, [PythonNode(comparison, [PythonNode(atom_expr, [<Name: len@459,7>, PythonNode(trailer, [<Operator: (>, <Name: image_shape@459,11>, <Operator: )>])]), <Operator: !=>, PythonNode(atom_expr, [<Name: len@459,27>, PythonNode(trailer, [<Operator: (>, <Name: kernel_shape@459,31>, <Operator: )>])])]), <Keyword: or>, PythonNode(comparison, [PythonNode(atom_expr, [<Name: len@459,48>, PythonNode(trailer, [<Operator: (>, <Name: image_shape@459,52>, <Operator: )>])]), <Operator: !=>, PythonNode(atom_expr, [<Name: len@459,68>, PythonNode(trailer, [<Operator: (>, <Name: output_shape@459,72>, <Operator: )>])])])])", "related code": "    if len(image_shape) != len(kernel_shape) or len(image_shape) != len(output_shape):\n"}, {"node type": "and_test", "line number": "(463, 83)", "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: filter_dilation@463,7>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(comparison, [PythonNode(arith_expr, [PythonNode(atom_expr, [<Name: len@463,39>, PythonNode(trailer, [<Operator: (>, <Name: image_shape@463,43>, <Operator: )>])]), <Operator: ->, <Number: 2>]), <Operator: !=>, PythonNode(atom_expr, [<Name: len@463,63>, PythonNode(trailer, [<Operator: (>, <Name: filter_dilation@463,67>, <Operator: )>])])])])", "related code": "    if filter_dilation is not None and len(image_shape) - 2 != len(filter_dilation):\n"}, {"node type": "string", "line number": "(528, 59)", "node content": "<String: 'Unexpected shape.'>", "related code": "def assert_shape(x, expected_shape, msg='Unexpected shape.'):\n"}, {"node type": "or_test", "line number": "(550, 68)", "node content": "PythonNode(or_test, [PythonNode(comparison, [<Name: expected_shape@550,7>, <Keyword: is>, <Keyword: None>]), <Keyword: or>, PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: theano@550,37>, PythonNode(trailer, [<Operator: .>, <Name: config@550,44>]), PythonNode(trailer, [<Operator: .>, <Name: conv@550,51>]), PythonNode(trailer, [<Operator: .>, <Name: assert_shape@550,56>])])])])", "related code": "    if expected_shape is None or not theano.config.conv.assert_shape:\n"}, {"node type": "or_test", "line number": "(758, 60)", "node content": "PythonNode(or_test, [PythonNode(comparison, [<Name: input_shape@758,7>, <Keyword: is>, <Keyword: None>]), <Keyword: or>, PythonNode(comparison, [<Name: depthwise_filter_shape@758,30>, <Keyword: is>, <Keyword: None>])])", "related code": "    if input_shape is None or depthwise_filter_shape is None:\n"}, {"node type": "or_test", "line number": "(882, 60)", "node content": "PythonNode(or_test, [PythonNode(comparison, [<Name: input_shape@882,7>, <Keyword: is>, <Keyword: None>]), <Keyword: or>, PythonNode(comparison, [<Name: depthwise_filter_shape@882,30>, <Keyword: is>, <Keyword: None>])])", "related code": "    if input_shape is None or depthwise_filter_shape is None:\n"}, {"node type": "keyword", "line number": "(1705, 44)", "node content": "<Keyword: True>", "related code": "def bilinear_kernel_2D(ratio, normalize=True):\n"}, {"node type": "keyword", "line number": "(1743, 44)", "node content": "<Keyword: True>", "related code": "def bilinear_kernel_1D(ratio, normalize=True):\n"}, {"node type": "not_test", "line number": "(1813, 40)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@1813,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: frac_ratio@1813,22>, <Operator: ,>, <Name: tuple@1813,34>]), <Operator: )>])])])", "related code": "    if not isinstance(frac_ratio, tuple):\n"}, {"node type": "and_test", "line number": "(1910, 27)", "node content": "PythonNode(and_test, [<Name: ratio@1910,7>, <Keyword: and>, <Name: frac_ratio@1910,17>])", "related code": "    if ratio and frac_ratio:\n"}, {"node type": "not_test", "line number": "(1912, 32)", "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom, [<Operator: (>, PythonNode(or_test, [<Name: ratio@1912,12>, <Keyword: or>, <Name: frac_ratio@1912,21>]), <Operator: )>])])", "related code": "    if not (ratio or frac_ratio):\n"}, {"node type": "keyword", "line number": "(29, 32)", "node content": "<Keyword: True>", "related code": "    imported_scipy_signal = True\n"}, {"node type": "string", "line number": "(35, 62)", "node content": "<String: \"theano.tensor.nnet.abstract_conv\">", "related code": "_logger = logging.getLogger(\"theano.tensor.nnet.abstract_conv\")\n"}, {"node type": "keyword", "line number": "(84, 25)", "node content": "<Keyword: is>", "related code": "    if filter_dilation is None:\n"}, {"node type": "keyword", "line number": "(127, 14)", "node content": "<Keyword: in>", "related code": "    if None in [image_shape, kernel_shape, border_mode,\n"}, {"node type": "operator", "line number": "(132, 21)", "node content": "<Operator: ==>", "related code": "    if border_mode == \"half\":\n"}, {"node type": "string", "line number": "(132, 28)", "node content": "<String: \"half\">", "related code": "    if border_mode == \"half\":\n"}, {"node type": "operator", "line number": "(134, 23)", "node content": "<Operator: ==>", "related code": "    elif border_mode == \"full\":\n"}, {"node type": "string", "line number": "(134, 30)", "node content": "<String: \"full\">", "related code": "    elif border_mode == \"full\":\n"}, {"node type": "operator", "line number": "(136, 23)", "node content": "<Operator: ==>", "related code": "    elif border_mode == \"valid\":\n"}, {"node type": "string", "line number": "(136, 31)", "node content": "<String: \"valid\">", "related code": "    elif border_mode == \"valid\":\n"}, {"node type": "operator", "line number": "(149, 15)", "node content": "<Operator: !=>", "related code": "    if pad_l != 0:\n"}, {"node type": "number", "line number": "(149, 17)", "node content": "<Number: 0>", "related code": "    if pad_l != 0:\n"}, {"node type": "operator", "line number": "(151, 15)", "node content": "<Operator: !=>", "related code": "    if pad_r != 0:\n"}, {"node type": "number", "line number": "(151, 17)", "node content": "<Number: 0>", "related code": "    if pad_r != 0:\n"}, {"node type": "operator", "line number": "(153, 19)", "node content": "<Operator: !=>", "related code": "    if subsample != 1:\n"}, {"node type": "number", "line number": "(153, 21)", "node content": "<Number: 1>", "related code": "    if subsample != 1:\n"}, {"node type": "keyword", "line number": "(208, 25)", "node content": "<Keyword: is>", "related code": "    if filter_dilation is None:\n"}, {"node type": "operator", "line number": "(210, 19)", "node content": "<Operator: >>", "related code": "    if num_groups > 1:\n"}, {"node type": "number", "line number": "(210, 21)", "node content": "<Number: 1>", "related code": "    if num_groups > 1:\n"}, {"node type": "keyword", "line number": "(258, 14)", "node content": "<Keyword: in>", "related code": "    if None in [image_shape, top_shape, border_mode,\n"}, {"node type": "operator", "line number": "(264, 21)", "node content": "<Operator: ==>", "related code": "    if border_mode == \"full\":\n"}, {"node type": "string", "line number": "(264, 28)", "node content": "<String: \"full\">", "related code": "    if border_mode == \"full\":\n"}, {"node type": "operator", "line number": "(266, 23)", "node content": "<Operator: ==>", "related code": "    elif border_mode == \"valid\":\n"}, {"node type": "string", "line number": "(266, 31)", "node content": "<String: \"valid\">", "related code": "    elif border_mode == \"valid\":\n"}, {"node type": "operator", "line number": "(278, 17)", "node content": "<Operator: >>", "related code": "    if dilation > 1:\n"}, {"node type": "number", "line number": "(278, 19)", "node content": "<Number: 1>", "related code": "    if dilation > 1:\n"}, {"node type": "keyword", "line number": "(333, 25)", "node content": "<Keyword: is>", "related code": "    if filter_dilation is None:\n"}, {"node type": "operator", "line number": "(335, 19)", "node content": "<Operator: >>", "related code": "    if num_groups > 1:\n"}, {"node type": "number", "line number": "(335, 21)", "node content": "<Number: 1>", "related code": "    if num_groups > 1:\n"}]
